&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		ЭтоВозврат = (Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат);
		
		УстановитьЗаголовокФормы(ЭтотОбъект);
		УстановитьЗаголовокКнопкиОплата();
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	ТипыОборудования = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ТипыОборудования.СканерШтрихкода   = ИспользуетсяСканерШтрихкодов;
	ТипыОборудования.ДисплейПокупателя = ИспользуютсяДисплеиПокупателя;
	ТипыОборудования.ККТ               = ИспользуетсяФискальныйРегистратор И ВестиУчетМаркируемойПродукцииИСМП;
	
	МенеджерОборудования.ПриСозданииНаСервере(ЭтаФорма, ТипыОборудования);
	
	ЕстьПравоВводаРозничнаяПродажа    = ПравоДоступа("Добавление", Метаданные.Документы.РозничнаяПродажа);
	ЕстьПравоВводаЧекаКоррекции       = РольДоступна(Метаданные.Роли.КоррекцияРозничнойПродажи) ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава);
	
	// Нельзя менять ответственного пока не отработал обработчик обновления
	Элементы.Ответственный.Доступность = Объект.УдалитьОтветственный.Пустая();
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Активизировать первую непустую табличную часть
	СписокТабличныхЧастей = Новый СписокЗначений;
	СписокТабличныхЧастей.Добавить("Товары",                "Товары");
	СписокТабличныхЧастей.Добавить("АгентскиеУслуги",       "АгентскиеУслуги");
	СписокТабличныхЧастей.Добавить("ПодарочныеСертификаты", "ПодарочныеСертификаты");
	СписокТабличныхЧастей.Добавить("Оплата",                "Оплата");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтотОбъект, СписокТабличныхЧастей);
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтотОбъект, АктивизироватьТабличнуюЧасть);
	
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.РозничнаяПродажа",
		"ФормаДокументаОбщая",
		НСтр("ru = 'Новости: Розничная продажа (чек)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтотОбъект);
	ОбновитьИтоги(ЭтотОбъект);
	
	НастройкаОтображенияФормыВПростомИнтерфейсе();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.Ссылка.Пустая() И ЗначениеЗаполнено(РозничнаяПродажаСсылка) Тогда
		ТекущийОбъект.УстановитьСсылкуНового(РозничнаяПродажаСсылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ИнтеграцияИСМП.ПриЗаписиДокумента(ТекущийОбъект, Отказ);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если Не ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Ценообразование.ОбновитьЦеныНоменклатуры(Объект.Ссылка, 
			Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам,
			Объект.ВалютаДокумента,
			Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнойВариантРасчетаИсходящегоНДС",
		?(Объект.СуммаВключаетНДС, Перечисления.ВариантыРасчетаНДС.НДСВСумме, Перечисления.ВариантыРасчетаНДС.НДССверху));
		
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_РозничнаяПродажа", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	ИНачеЕсли ИмяСобытия = КассовыеСменыКлиентБП.СобытиеВыполняетсяОперацияКассовойСмены() Тогда
		Доступность = Ложь;
	ИначеЕсли ИмяСобытия = КассовыеСменыКлиентБП.СобытиеЗавершиласьОперацияКассовойСмены() Тогда
		Доступность = Истина;
	ИначеЕсли ИмяСобытия = "ОбновитьБаннеры_РозничнаяТорговля" И ИспользуетсяПростойИнтерфейс Тогда
		Элементы.ГруппаБаннерОткрытьСмену.Видимость =
			ОтображатьБаннерОткрытияСмены(Объект.Ссылка, ИспользуетсяФискальныйРегистратор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ВестиУчетМаркируемойПродукцииИСМП 
		И ИспользуетсяФискальныйРегистратор Тогда
		
		ЗаполнитьСписокОборудования();
	КонецЕсли;
	
	
	Если НЕ ТолькоПросмотр Тогда
		// Подключаем все оборудование на рабочем месте при открытии формы
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено,ЭтотОбъект);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ТолькоПросмотр ИЛИ НЕ ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(ЭтотОбъект, Источник, Событие, Данные);
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ОписаниеОповещенияОбработкиКодаМаркировки(), ДанныеСоСканераСтруктура);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПринятьОплату(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Если ИспользуетсяФискальныйРегистратор 
		И НЕ ЗаполнитьСписокОборудования(СообщениеОбОшибке) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыОплаты = ПодготовитьПараметрыФормаОплата();
	
	СписокТоваровОплатаСертификатом = Неопределено;
	Если НЕ ЭтоЧекКоррекции 
		И ИспользуютсяСертификатыНСПК // на рабочем месте подключен терминал с насройками подключения к НСПК
		И СписокОборудованияПечатьЧека.Количество() > 0 Тогда // работа с сертификатами подразумевает ККТ подключенное на рабочем месте
		
		СписокТоваровОплатаСертификатом = СписокТоваровОплатаСертификатом(Объект.Товары, Объект.СуммаВключаетНДС);
	КонецЕсли;
	
	// Обычная продажа товаров без электронных сертификатов
	Если НЕ ЗначениеЗаполнено(СписокТоваровОплатаСертификатом) Тогда
		ВыбратьФискальноеУстройство(ПараметрыФормыОплаты);
	Иначе
		ПринятьОплатуСертификатыНСПК(СписокТоваровОплатаСертификатом, ПараметрыФормыОплаты);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	ШтрихкодированиеНоменклатурыБПКлиент.ПоказатьВводШтрихкода(
		ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	Если Не УправлениеКассовойСменойДоступно Тогда
		ПоказатьПредупреждение( , НСтр("ru='Недостаточно прав для выполнения операции'"));
	Иначе
		ОчиститьСообщения();
		КассовыеСменыКлиентБП.НачатьОткрытиеКассовойСмены(УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекКоррекции(Команда)
	Если НЕ Объект.ОтчетОРозничныхПродажах.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'По этому чеку был сформирован ""Отчет о розничных продажах"". После пробития чека коррекции отчет нужно будет откорректировать вручную.'");
		ОповещениеОВыборе = Новый ОписаниеОповещения("ПробитьЧекКоррекцииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОВыборе, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПереключитьЧекКоррекции();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанныеФискальногоЧекаНСПК(Команда)
	ПараметрыОплатыЭС = ПараметрыОплатыЭС(Объект.Ссылка);
	
	Если ПараметрыОплатыЭС.ОплатаСертификатНСПК > 0 Тогда 
		ОповещениеПриЗавершении = НОвый ОписаниеОповещения("ПередачаДанныхФискальногоЧекаЗавершение", ЭтотОбъект, ПараметрыОплатыЭС);
		
		ПечатьФискальныхДокументовКлиент.НачатьПередачуДанныхФискальногоЧека(
			Объект.Ссылка, ПараметрыОплатыЭС.ИдентификаторУстройстваЭТ, 
			ПараметрыОплатыЭС.ИдентификаторКорзины, ОповещениеПриЗавершении);
			
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФискальноеУстройствоЗавершение(ИдентификаторУстройства, ДополнительныеПараметры) Экспорт
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Организация",                     Объект.Организация);
	ПараметрыФормы.Вставить("ЗаголовокКнопкиВыполнить",        ?(ДополнительныеПараметры.СписокОборудованияПечатьЧека.Количество() = 0, Элементы.ФормаПринятьОплату.Заголовок, НСтр("ru = 'Пробить чек'")));
	ПараметрыФормы.Вставить("ВидОперации",                     Объект.ВидОперации);
	ПараметрыФормы.Вставить("ЭтоЧекКоррекции",                 ЭтоЧекКоррекции);
	ПараметрыФормы.Вставить("АдресТаблицаОплата",              ДополнительныеПараметры.АдресТаблицаОплата);
	
	Если ЭтоПредоплата 
		ИЛИ (ЭтоВозврат И Объект.СуммаПредоплаты > 0) Тогда
		
		// В чеке на предоплату сумма оплаты задается на форме документа
		ПараметрыФормы.Вставить("СуммаДокумента",  Объект.СуммаПредоплаты);
	Иначе
		// Сумма документа без учета скидки
		ПараметрыФормы.Вставить("СуммаДокумента",  ИтогВсего + ИтогСкидка);
		ПараметрыФормы.Вставить("СуммаПредоплаты", Объект.СуммаПредоплаты);
		ПараметрыФормы.Вставить("СуммаСкидки",                     ИтогСкидка);
		ПараметрыФормы.Вставить("СуммаОплатыСертификат",           ДополнительныеПараметры.СуммаСертификатамиНСПК);
	КонецЕсли;
	
	ПодключенныеДисплеиПокупателяВыводятQRКод = ИспользуютсяДисплеиПокупателя 
		И ОборудованиеДисплеиПокупателяКлиент.ПодключенныеДисплеиПокупателяВыводятQRКод();
	
	ПараметрыОплатыСБП = ПараметрыОплатыСБП(Объект.Организация, Объект.Склад, ПодключенныеДисплеиПокупателяВыводятQRКод);
	Если ПараметрыОплатыСБП <> Неопределено 
		И ЭтоВозврат 
		И НЕ ДокументОснованиеОплаченСБП(Объект.Основание, ПараметрыОплатыСБП.НастройкаИнтеграции) Тогда
		
		// Возврат по СБП возможен только если исходная операция также была по СБП
		ПараметрыОплатыСБП = Неопределено;
	КонецЕсли; 
	ПараметрыФормы.Вставить("ИспользоватьОплатуСБП", ПараметрыОплатыСБП <> Неопределено);
	
	
	ТипУстройства = Неопределено;
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		ДанныеУстройства = МенеджерОборудованияВызовСервера.ДанныеУстройства(ИдентификаторУстройства);
		ТипУстройства    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеУстройства, "ТипОборудованияИмя", "ККТ");
	КонецЕсли;
	
	Если ТипУстройства = "ККТ" Тогда
		ПараметрыФормы.Вставить("ЭкземплярОборудования", ИдентификаторУстройства);
		Если ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю) Тогда
			ПараметрыФормы.Вставить("СчетНаОплату", Объект.СчетНаОплатуПокупателю);
		КонецЕсли; 
	КонецЕсли; 
	
	ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	ДополнительныеПараметры.Вставить("ТипУстройства",           ТипУстройства);
	ДополнительныеПараметры.Вставить("ПараметрыОплатыСБП",      ПараметрыОплатыСБП);
	
	ОповещениеПриЗакрытииФормыОплаты = Новый ОписаниеОповещения("ОткрытьФормуОплатыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормаОплаты", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеПриЗакрытииФормыОплаты, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ОБъект.Организация.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВестиУчетМаркируемойПродукцииИСМП 
		И ИспользуетсяФискальныйРегистратор Тогда
		
		ЗаполнитьСписокОборудования();
	КонецЕсли;
	
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	Если Объект.Склад.Пустая() Тогда
		Возврат;
	КонецЕсли;
		
	Если ВестиУчетМаркируемойПродукцииИСМП 
		И ИспользуетсяФискальныйРегистратор Тогда
		
		ЗаполнитьСписокОборудования();
	КонецЕсли;
		
	СкладПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтчетОРозничныхПродажахНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Объект.ОтчетОРозничныхПродажах);
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если НЕ Объект.Основание.Пустая() Тогда
		ОснованиеПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьУсловноеОформление(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ИспользуетсяПростойИнтерфейс Тогда
		СтандартнаяОбработка = Ложь;
		
		ВидыОпераций = Новый Массив;
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Предоплата"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа"));
		
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Объект.Организация);
		Отбор.Вставить("ВидОперации", Новый ФиксированныйМассив(ВидыОпераций));
		Отбор.Вставить("Склад", Объект.Склад);
		
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ОткрытьФорму("Документ.РозничнаяПродажа.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияПриИзменении(Элемент)
	Если ВестиУчетМаркируемойПродукцииИСМП 
		И ИспользуетсяФискальныйРегистратор Тогда
		
		ЗаполнитьСписокОборудования();
	КонецЕсли;
	
	Объект.ДокументБезНДС = Объект.ДокументБезНДС 
		И (ПрименяетсяОсвобождениеОтУплатыНДС ИЛИ Объект.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент"));
		
	СформироватьНадписьЦеныИВалюта(ЭтотОбъект)
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	Если ВидСкидки <> 2 Тогда
		Объект.СуммаСкидки = 0;
		СуммаСкидки = 0;
	КонецЕсли;
	
	РаспределитьСуммуСкидки(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПоДокументуПриИзменении(Элемент)
	Если СуммаСкидки >= ИтогВсего + Объект.СуммаСкидки Тогда
		ТекстСообщения = НСтр("ru = 'Сумма скидки превышает сумму по документу'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"СуммаСкидки");
		СуммаСкидки = Объект.СуммаСкидки;
		
		Возврат;
	КонецЕсли; 
	
	Объект.СуммаСкидки = СуммаСкидки;
	РаспределитьСуммуСкидки(ЭтотОбъект);
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаОрганизации");
	РаспределитьСуммуСкидкуПриИзмененииДокумента(ЭтотОбъект);
	
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если (Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента") И Объект.АгентскиеУслуги.Количество() > 0) Тогда
		ТекстСообщения = НСтр("ru = 'Чек на прием платежей по договору платежного агента не должен содержать иных товаров или услуг.'");
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.Товары");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализироватьДанныеШтрихкода(ПараметрыСканирования)

	Возврат ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);

КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество, Цена, Сумма, СтавкаНДС ,СуммаНДС, Всего, ЭтоУслуга, ПродукцияМаркируемаяДляГИСМ, СуммаСкидки, ПроцентСкидки, 
		|ЭтоМаркируемаяПродукция, ВидПродукцииИС, ЭтоАлкогольнаяПродукция, ИндексАкцизнойМарки, АкцизнаяМарка");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Основание, ВидОперации, Склад, ТипЦен, СуммаВключаетНДС, ДокументБезНДС, ЭтоВозврат");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	
	ДанныеОбъекта.Вставить("Реализация",       Истина);
	ДанныеОбъекта.Вставить("РозничнаяПродажа", Истина);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	Если ДанныеСтрокиТаблицы.ЭтоМаркируемаяПродукция 
		ИЛИ ДанныеСтрокиТаблицы.ЭтоАлкогольнаяПродукция Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыВводаКодаМаркировки();
		
		ПараметрыОткрытия.Номенклатура     = ТекущиеДанные.Номенклатура;
		
		ПараметрыОткрытия.МаркируемаяПродукция = Истина;
		Если ДанныеСтрокиТаблицы.ЭтоМаркируемаяПродукция Тогда
			ПараметрыОткрытия.ВидПродукции = ДанныеСтрокиТаблицы.ВидПродукцииИС;
		Иначе
			ПараметрыОткрытия.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
		КонецЕсли; 
		
		ПараметрыОткрытия.ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект,,ПараметрыОткрытия.ВидПродукции);
		ПараметрыОткрытия.ДанныеШтрихкода       = ИнициализироватьДанныеШтрихкода(ПараметрыОткрытия.ПараметрыСканирования);
		ПараметрыОткрытия.Документ = Объект.Ссылка;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ТоварыНоменклатураПриИзмененииЗавершение", ЭтотОбъект, ДанныеСтрокиТаблицы);
		ШтрихкодированиеИСКлиент.ОткрытьФормуСчитыванияКодаМаркировки(ЭтотОбъект, ПараметрыОткрытия, ОповещениеОЗавершении);
	Иначе
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзмененииЗавершение(ДанныеКодаМаркировки, ДанныеСтрокиТаблицы) Экспорт
	
	ТекущиеДанные	= Элементы.Товары.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	Если ДанныеКодаМаркировки <> Неопределено 
		И ДанныеКодаМаркировки.МаркируемаяПродукция Тогда
		
		ТекущиеДанные.Количество       = 1;
		ТекущиеДанные.Штрихкод         = ДанныеКодаМаркировки.Штрихкод;
		ТекущиеДанные.АкцизнаяМарка    = ДанныеКодаМаркировки.ШтрихкодУпаковки;
		ТекущиеДанные.ШтрихкодУпаковки = ДанныеКодаМаркировки.ШтрихкодУпаковки;
		
		ТекущиеДанные.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(ТекущиеДанные.АкцизнаяМарка), 1, 0);
		
		ПриИзмененииКоличествоЦена("Товары");
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТоварыНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных);
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ПриИзмененииСумма("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ПриИзмененииСтавкаНДС("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ПриИзмененииСуммаНДС("Товары");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Если ИспользоватьКонтрольныеЗнакиГИСМ Тогда
			Элемент.ТекущиеДанные.КиЗ_ГИСМ = Неопределено;
		КонецЕсли; 
		
		Элемент.ТекущиеДанные.АкцизнаяМарка       = Неопределено;
		Элемент.ТекущиеДанные.КодАкцизнойМарки    = Неопределено;
		Элемент.ТекущиеДанные.ИндексАкцизнойМарки = 0;
	КонецЕсли;
	
	// Для маркируемой продукции не меняем количество, так как там могут быть блоки
	Элементы.ТоварыКоличество.Доступность = (Элемент.ТекущиеДанные.ИндексАкцизнойМарки = 0);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущаяСтрока = Неопределено 
			ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.АкцизнаяМарка) Тогда
		
			Продолжить;
		КонецЕсли; 
		
		ТоварыПередУдалениемНаСервере(КэшМаркируемойПродукции, ТекущаяСтрока.АкцизнаяМарка);
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыПередУдалениемНаСервере(КэшМаркируемойПродукции, АкцизнаяМарка)
	Если ЭтоАдресВременногоХранилища(КэшМаркируемойПродукции) Тогда
		ДанныеКэша = ПолучитьИзВременногоХранилища(КэшМаркируемойПродукции);
		Если ДанныеКэша.ОбработанныеКодыМаркировки[АкцизнаяМарка.ЗначениеШтрихкода] <> Неопределено Тогда
			ДанныеКэша.ОбработанныеКодыМаркировки.Удалить(АкцизнаяМарка.ЗначениеШтрихкода);
			ПоместитьВоВременноеХранилище(ДанныеКэша, КэшМаркируемойПродукции);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.ПроцентСкидки / 100;
	
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.ПроцентСкидки = ?(СтрокаТабличнойЧасти.Сумма = 0, 0, СтрокаТабличнойЧасти.СуммаСкидки / СтрокаТабличнойЧасти.Сумма * 100);
	
	ОбщегоНазначенияБПКлиент.ПересчитатьСуммуНДС(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РаспределитьСуммуСкидкуПриИзмененииДокумента(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАгентскиеУслуги

&НаКлиенте
Процедура АгентскиеУслугиПослеУдаления(Элемент)
	Если Объект.АгентскиеУслуги.Количество() = 0 Тогда
	
		Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаОрганизации");
		УправлениеФормой(ЭтотОбъект);
		УстановитьЗаголовокФормы(ЭтотОбъект);
	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриИзменении(Элемент)
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		
			ПроверитьУстановитьСчетКассы(ТекущиеДанные.ДоговорКонтрагента);
		КонецЕсли; 
	
		Если НоваяСтрока Тогда
			ОбновитьИтоги(ЭтотОбъект);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Всего");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Основание, ВидОперации, ТипЦен, СуммаВключаетНДС, ДокументБезНДС, ЭтоВозврат");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
	
	АгентскиеУслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСодержаниеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АгентскиеУслуги.ТекущиеДанные;
	РаботаСНоменклатуройКлиентБП.СодержаниеПриИзменении(ТекущиеДанные, ТекущаяДатаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКоличествоПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиЦенаПриИзменении(Элемент)
	ПриИзмененииКоличествоЦена("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаПриИзменении(Элемент)
	ПриИзмененииСумма("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСтавкаНДСПриИзменении(Элемент)
	ПриИзмененииСтавкаНДС("АгентскиеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиСуммаНДСПриИзменении(Элемент)

	ПриИзмененииСуммаНДС("АгентскиеУслуги");

КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиКонтрагентПриИзменении(Элемент)

	ДанныеСтрокаТаблицы = Новый Структура("Контрагент, ДоговорКонтрагента, ВидОперации");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, Элементы.АгентскиеУслуги.ТекущиеДанные);

	ПараметрыОбъекта = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);

	АгентскиеУслугиКонтрагентПриИзмененииНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта);

	ЗаполнитьЗначенияСвойств(Элементы.АгентскиеУслуги.ТекущиеДанные, ДанныеСтрокаТаблицы);
КонецПроцедуры

&НаКлиенте
Процедура АгентскиеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	МассивПараметровВыбора = Новый Массив(Элементы.АгентскиеУслугиДоговорКонтрагента.ПараметрыВыбора);
	
	Индекс = МассивПараметровВыбора.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Если МассивПараметровВыбора[Индекс].Имя = "Отбор.ПлатежныйАгент" Тогда
			МассивПараметровВыбора.Удалить(Индекс)
		КонецЕсли; 
		
		Индекс = Индекс -1;
	КонецЦикла; 
	
	// Если это единственная строка в агентских услугах, то признак платежного агента может быть любым.
	Если Объект.Товары.Количество() <> 0 
		ИЛИ Объект.ПодарочныеСертификаты.Количество() <> 0 
		ИЛИ Объект.АгентскиеУслуги.Количество() <> 1 Тогда
	
		ПлатежныйАгент = (Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента"));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПлатежныйАгент", ПлатежныйАгент));
		
	КонецЕсли;
	
	Элементы.АгентскиеУслугиДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарочныеСертификаты

&НаКлиенте
Процедура ПодарочныеСертификатыПриИзменении(Элемент)
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыВидОплатыОткрытие(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидОплаты.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПередачи = Новый Структура;
	
	ДопустимыеТипыОплаты = Новый Массив;
	
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСобственный"));
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСторонний"));
	
	ПараметрыПередачи.Вставить("ТипОплатыДоступныеЗначения", ДопустимыеТипыОплаты);
	ПараметрыПередачи.Вставить("Ключ", ТекущиеДанные.ВидОплаты);
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаОбъекта", ПараметрыПередачи, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОплата

&НаКлиенте
Процедура ОплатаВидОплатыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПередачи = Новый Структура;
	
	ДопустимыеТипыОплаты = Новый Массив;
	
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПлатежнаяКарта"));
	ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.БанковскийКредит"));
	
	Если ИспользуютсяПодарочныеСертификаты Тогда
	
		ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСобственный"));
		ДопустимыеТипыОплаты.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОплат.ПодарочныйСертификатСторонний"));
		
	КонецЕсли;
	
	ПараметрыПередачи.Вставить("ТипОплатыДоступныеЗначения", ДопустимыеТипыОплаты);
	ПараметрыПередачи.Вставить("Ключ", Элемент.Родитель.ТекущиеДанные.ВидОплаты);
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаОбъекта", ПараметрыПередачи, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область ПечатьЧека

// Заполняем теги специфичные для маркированных товаров. 
// Предусловие - минимальная версия ФД ККТ 1.2
//
// Параметры:
//  СтрокаПозицииЧека        - <Структура> - строка позиции чека см. ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека
//  <РезультатРаспределения> - <Структура> - результат распределения кодов маркировки см. ШтрихкодированиеИСМП.НовыйРезультатРаспределенияШтрихкодовПоТоварам
//  <ЭтоВерсия120>           - <Булево>  - признак что и ККТ и ФН имеют версию ФД 1.2 или выше
//
&НаСервереБезКонтекста
Процедура ЗаполнитьСтрокуЧекаМаркируемыеТовары(СтрокаПозицииЧека, РезультатРаспределения, ЭтоВерсия120)
	Если ЭтоВерсия120 Тогда 
		СтрокаПозицииЧека.КонтрольнаяМарка = РезультатРаспределения.ПолныйКодМаркировки;
	КонецЕсли;
	
	ЭтоПивоВКегах = РезультатРаспределения.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво 
		И РезультатРаспределения.ЧастичноеВыбытие;
		
	// Для пива в кегах заполняем только контрольную марку
	Если ЭтоПивоВКегах Тогда
		Возврат;
	КонецЕсли;

	СтрокаПозицииЧека.Штрихкод = РезультатРаспределения.Штрихкод;
	
	// количество товара маркируемого средствами идентификации всегда равно 1, 
	// только если это не пиво в кегах
	СтрокаПозицииЧека.Количество = 1;
	СтрокаПозицииЧека.Цена = СтрокаПозицииЧека.Сумма; 
	
	СтрокаПозицииЧека.ШтрихкодBase64 = РезультатРаспределения.ПолныйКодМаркировки;
	
	Если НЕ ЭтоВерсия120 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПозицииЧека.ЗапросПроверкиКода.ИдентификаторЗапроса = РезультатРаспределения.РазрешительныйРежимИдентификаторЗапросаГИСМТ;  
	СтрокаПозицииЧека.ЗапросПроверкиКода.ВременнаяМетка = РезультатРаспределения.РазрешительныйРежимДатаЗапросаГИСМТ;
	
	// Частичное выбытие поддерживатеся только под ФФД 1.2
	Если НЕ РезультатРаспределения.ЧастичноеВыбытие Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПозицииЧека.ДробноеКоличество.Числитель   = РезультатРаспределения.Количество;
	СтрокаПозицииЧека.ДробноеКоличество.Знаменатель = РезультатРаспределения.ЕмкостьПотребительскойУпаковки;
	

КонецПроцедуры

&НаСервере
Функция ПараметрыПечатиЧека(ПараметрыОплаты, ИдентификаторУстройства, ВерсияФормата, АдресУстановкиККТ, РезультатРаспределенияКодовМаркировки, ОписаниеОшибки)
	Перем СведенияОКомитентах;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	
	ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ОбщиеПараметры.ИндивидуальныйРежимПодготовкиДанныхКПередачеВОФД = Истина;
	
	ЭтоВерсия120 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.2.0.0", ВерсияФормата.ВерсияФД) > 0;
	ЭтоВерсия110 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.1.0.0", ВерсияФормата.ВерсияФД) > 0;
	ЭтоВерсия105 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", ВерсияФормата.ВерсияФД) > 0;
	
	ВерсияККТ120 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.2.0.0", ВерсияФормата.ВерсияККТ) > 0;
	
	Если ЭтоВозврат Тогда
		ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	Иначе
		ОбщиеПараметры.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	КонецЕсли; 
		
	ДанныеКассира = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛицаТекущегоПользователя(Объект.Организация, Объект.Дата);
	
	ОбщиеПараметры.Кассир    = ?(ДанныеКассира.Представление = Неопределено, НСтр("ru = 'Администратор'"), СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление)));
	ОбщиеПараметры.КассирИНН = ДанныеКассира.ИНН;
	
	ОбщиеПараметры.Электронно = НЕ ПараметрыОплаты.ПечататьЧек;
	
	ОбщиеПараметры.НомерКассы        = "00001";
	ОбщиеПараметры.НомерЧека         = НомерЧекаККМ(Объект.Организация, Объект.Склад, ИдентификаторУстройства, Объект.Дата);
	ОбщиеПараметры.НомерСмены        = 1;
	ОбщиеПараметры.ДокументОснование = РозничнаяПродажаСсылка;
	ОбщиеПараметры.Организация       = Объект.Организация;
	ОбщиеПараметры.ТорговыйОбъект    = Объект.Склад;
	
	ОбщиеПараметры.ОрганизацияНазвание = СведенияОбОрганизации.НаименованиеДляПечатныхФорм;
	ОбщиеПараметры.ОрганизацияИНН      = СведенияОбОрганизации.ИНН;
	ОбщиеПараметры.ОрганизацияКПП      = СведенияОбОрганизации.КПП;
	ОбщиеПараметры.АдресМагазина       = ?(ЗначениеЗаполнено(АдресУстановкиККТ), АдресУстановкиККТ, СведенияОбОрганизации.ФактическийАдрес);
	
	ОбщиеПараметры.ОтправительEMail    = СведенияОбОрганизации.Email;
	
	НастройкиОтправкиЧеков = РегистрыСведений.ОборудованиеПоОрганизациям.Получить(Новый Структура("Оборудование", ИдентификаторУстройства));
	Если ЗначениеЗаполнено(ПараметрыОплаты.ПокупательEmail) Тогда
		ОбщиеПараметры.ПокупательEmail     = ПараметрыОплаты.ПокупательEmail;
		ОбщиеПараметры.Отправляет1СEmail   = НастройкиОтправкиЧеков.Отправляет1СEmail;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОплаты.ПокупательНомер) Тогда 
		ОбщиеПараметры.ПокупательНомер     = ПараметрыОплаты.ПокупательНомер;
		ОбщиеПараметры.Отправляет1СSMS     = НастройкиОтправкиЧеков.Отправляет1СSMS;
	КонецЕсли;
	
	ОбщиеПараметры.НаименованиеМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Наименование");
	
	ОбщиеПараметры.СистемаНалогообложения = Объект.СистемаНалогообложения;
	
	ЕстьТовары = Объект.Товары.Количество() > 0;
	ЕстьСертификаты = Объект.ПодарочныеСертификаты.Количество() > 0;
	
	// Подготовка таблицы товаров
	ПараметрыПечатиЧека = ПодготовитьПараметрыПечатиЧека(ВерсияФормата.ВерсияФД, ИдентификаторУстройства);
	
	ТаблицаДокумента    = ПараметрыПечатиЧека.ТаблицаДокумента;
	
	
	ЕстьОбщийКомитентПоЧеку       = Неопределено;
	ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено;
	
	ДоговорПлатежногоАгента  = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ПлатежныйАгентПоЧеку     = Справочники.Контрагенты.ПустаяСсылка();
	СведенияОКомитентеПоЧеку = ПечатьФискальныхДокументов.НовыйСведенияОКомитенте();
	
	СписокДоговоровПлатежногоАгента = ПараметрыПечатиЧека.ТаблицаДоговораПлатежногоАгента.ВыгрузитьКолонку("ДоговорКонтрагента");
	
	КоличествоДоговоровКомиссииВЧеке    = ПараметрыПечатиЧека.ТаблицаКомитенты.Итог("КоличествоДоговоров");
	КоличествоДоговоровПлатежногоАгента = СписокДоговоровПлатежногоАгента.Количество();
	
	СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокумента, "Номенклатура", Истина);
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ПараметрыОбъекта, Истина, Ложь);
	
	Если ЭтоВерсия105 Тогда
		Если ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов") Тогда 
			ПараметрыОбъекта = Новый Структура("Организация, Дата");
		
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
			
			СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокумента, "Номенклатура", Истина);
			
			МассивТоваровНаКомиссии = Новый Массив;
			Для каждого СведенияОНоменклатуре Из СведенияОСпискеНоменклатуры Цикл
				Если СведенияОНоменклатуре.Значение.Комиссионный  Тогда
					МассивТоваровНаКомиссии.Добавить(СведенияОНоменклатуре.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			СведенияОКомитентах = ПечатьФискальныхДокументов.ПолучитьСведенияОКомитентах(МассивТоваровНаКомиссии, ПараметрыОбъекта.Организация, ПараметрыОбъекта.Дата);
			
		КонецЕсли;
	ИначеЕсли (КоличествоДоговоровПлатежногоАгента > 1 
			ИЛИ (КоличествоДоговоровПлатежногоАгента = 1 И (ЕстьТовары ИЛИ  КоличествоДоговоровКомиссииВЧеке > 1))) Тогда
			
		ТекстСообщения = НСтр("ru = 'Для версии формата фискальных данных %1 возможен лишь один договор платежного агента в чеке'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВерсияФормата.ВерсияФорматаФД);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоПредоплата ИЛИ ЭтоВозвратПредоплаты Тогда
		НДСПоДокументу = ТаблицаДокумента.Итог("СуммаНДС")*Объект.СуммаПредоплаты/ТаблицаДокумента.Итог("Сумма");
		
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Объект.СуммаПредоплаты, ТаблицаДокумента, "Цена", "Сумма");
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(Объект.СуммаПредоплаты, ТаблицаДокумента, "Сумма");
		
		ТаблицаДокумента.ЗаполнитьЗначения(1, "Количество");
		
		Если НДСПоДокументу > 0 Тогда
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(НДСПоДокументу,         ТаблицаДокумента, "СуммаНДС");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ТаблицаДокумента Цикл
		СтрокаПозицииЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, СтрокаТовары,,"Штрихкод");
		
		// обработка кода маркировки в соотвествии с ФФД
		Если НЕ ЭтоЧекКоррекции
			И ВерсияККТ120
			И СтрокаТовары.ЭтоМаркируемаяПродукция 
			И ЗначениеЗаполнено(РезультатРаспределенияКодовМаркировки) 
			И РезультатРаспределенияКодовМаркировки[СтрокаТовары.ШтрихкодыУпаковокТоваровСсылка] <> Неопределено Тогда
			
			РезультатРаспределения = РезультатРаспределенияКодовМаркировки[СтрокаТовары.ШтрихкодыУпаковокТоваровСсылка];
			
			ЗаполнитьСтрокуЧекаМаркируемыеТовары(СтрокаПозицииЧека, РезультатРаспределения, ЭтоВерсия120);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.КодВидаНоменклатурнойКлассификации) Тогда
			
			СтрокаПозицииЧека.Штрихкод = СтрокаТовары.КодВидаНоменклатурнойКлассификации;
		
		КонецЕсли; 
		
		Если Не ПустаяСтрока(СтрокаТовары.КодВидаТРУ) Тогда
			СтрокаПозицииЧека.NTIN = СтрокаТовары.КодВидаТРУ; // Для тега 1162 и 1163
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаПозицииЧека.ПризнакПредметаРасчета)
			ИЛИ СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТовар Тогда
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[СтрокаТовары.Номенклатура];
			
			СтрокаПозицииЧека.ПризнакПредметаРасчета = 
				ПечатьФискальныхДокументов.РасчитатьПризнакПредметаРасчета(СведенияОНоменклатуре);
		КонецЕсли;
		
		СтрокаПозицииЧека.ЦенаСоСкидками    = СтрокаПозицииЧека.Цена;
		СтрокаПозицииЧека.НомерСтрокиТовара = ОбщиеПараметры.ПозицииЧека.Количество()+1;
		
		Если ЗначениеЗаполнено(СтрокаТовары.ДоговорПлатежногоАгента) Тогда
			// Договор платежного агента - общего комитента по чеку указать нельзя.
			ЕстьОбщийКомитентПоЧеку = Ложь;
			
			РеквизитыАгента = ПечатьФискальныхДокументов.РеквизитыПлатежногоАгента(СтрокаТовары.ДоговорПлатежногоАгента, СтрокаТовары.Контрагент, Объект.Дата);
			ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, РеквизитыАгента, "ДанныеАгента, ДанныеПоставщика, ПризнакАгентаПоПредметуРасчета");
			Если ЕстьОбщийПлатежныйАгентПоЧеку = Неопределено Тогда
				
				// Общего платежного агента нет и никогда не было
				ДоговорПлатежногоАгента       = СтрокаТовары.ДоговорПлатежногоАгента;
				ПлатежныйАгентПоЧеку          = СтрокаТовары.Контрагент;
				ЕстьОбщийПлатежныйАгентПоЧеку = Истина;
				
			ИначеЕсли ЕстьОбщийПлатежныйАгентПоЧеку = Истина
				И ДоговорПлатежногоАгента <> СтрокаТовары.ДоговорПлатежногоАгента Тогда
				
				// Платежный агент по текущей строке не равен общему платежному агента
				ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
			КонецЕсли; 
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.Контрагент) Тогда 
			// Комиссионная услуга
			ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
			СведенияОКомитенте = ПечатьФискальныхДокументов.СведенияОКонтрагенте(СтрокаТовары.Контрагент, Объект.Дата);
			
			СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
			ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека.ДанныеПоставщика, СведенияОКомитенте);
			
			Если ЕстьОбщийКомитентПоЧеку = Неопределено Тогда
				
				// Общего комитента нет и никогда не было
				СведенияОКомитентеПоЧеку = СведенияОКомитенте;
				ЕстьОбщийКомитентПоЧеку  = Истина;
				
			ИначеЕсли ЕстьОбщийКомитентПоЧеку = Истина 
				И СведенияОКомитенте.Контрагент <> СведенияОКомитентеПоЧеку.Контрагент Тогда 
				
				// Комитент по строке не равен общему комитенту по чеку
				ЕстьОбщийКомитентПоЧеку = Ложь;
			КонецЕсли; 
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.Номенклатура) И СведенияОКомитентах <> Неопределено Тогда
			ЕстьОбщийПлатежныйАгентПоЧеку = Ложь;
			
			СведенияОКомитенте = СведенияОКомитентах[СтрокаТовары.Номенклатура];
			Если СведенияОКомитенте <> Неопределено Тогда
				// Комиссионный товар
				СтрокаПозицииЧека.ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.Комиссионер;
				ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека.ДанныеПоставщика, СведенияОКомитенте);
				
				Если ЕстьОбщийКомитентПоЧеку = Неопределено Тогда
					
					// Общего комитента нет и никогда не было
					СведенияОКомитентеПоЧеку = СведенияОКомитенте;
					ЕстьОбщийКомитентПоЧеку  = Истина;
					
				ИначеЕсли ЕстьОбщийКомитентПоЧеку = Истина 
					И СведенияОКомитенте.Контрагент <> СведенияОКомитентеПоЧеку.Контрагент Тогда 
					
					// Комитент по строке не равен общему комитенту по чеку
					ЕстьОбщийКомитентПоЧеку = Ложь;
				КонецЕсли; 
			Иначе
				// Некомиссионный товар или услуга - общего комитента по чеку указать нельзя.
				ЕстьОбщийКомитентПоЧеку = Ложь;
			КонецЕсли; 
		КонецЕсли; 
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
		Если Не ПустаяСтрока(СтрокаТовары.КодВидаТРУ) Тогда
			// Нефискальная строка
			СтрокаТекста = СтрШаблон(НСтр("ru = 'ТРУ (КОД): %1'"), СтрокаТовары.КодВидаТРУ); 
			ТекстоваяСтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(СтрокаТекста);
			ОбщиеПараметры.ПозицииЧека.Добавить(ТекстоваяСтрокаЧека);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДокумента.Итог("СуммаСкидок") > 0  Тогда
		// Нефискальная строка
		СтрокаТекста = СТрШаблон(НСтр("ru = 'ВСЕГО СКИДКА ПО ЧЕКУ: %1'"), ОбщегоНазначенияБПВызовСервера.ФорматСумм(ТаблицаДокумента.Итог("СуммаСкидок")));
		ТекстоваяСтрокаЧека = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыТекстовойСтрокиЧека(СтрокаТекста);
		
		ОбщиеПараметры.ПозицииЧека.Добавить(ТекстоваяСтрокаЧека);
	КонецЕсли; 
	
	// Для ФФД 1.2 общий комитент/платежный агент по чеку в шапке не устанавливается
	Если НЕ ЭтоВерсия120 Тогда
		Если ЕстьОбщийПлатежныйАгентПоЧеку = Истина Тогда
			СтруктураРеквизитов = ПечатьФискальныхДокументов.РеквизитыПлатежногоАгента(ДоговорПлатежногоАгента, ПлатежныйАгентПоЧеку, Объект.Дата);
			ЗаполнитьЗначенияСвойств(ОбщиеПараметры, СтруктураРеквизитов, "ДанныеАгента, ДанныеПоставщика, ПризнакАгента");
		ИначеЕсли ЕстьОбщийКомитентПоЧеку = Истина Тогда 
			ОбщиеПараметры.ПризнакАгента = Перечисления.ПризнакиАгента.Комиссионер;
			ЗаполнитьЗначенияСвойств(ОбщиеПараметры.ДанныеПоставщика, СведенияОКомитентеПоЧеку);
		КонецЕсли; 
	КонецЕсли; 
	
	ОплатыПоДокументу = ПараметрыПечатиЧека.ТаблицаОплат;
	
	Если ПараметрыОплаты.ОплатаНаличные > 0 Тогда
		СтрокаОплаты = ОплатыПоДокументу.Добавить();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
		СтрокаОплаты.Сумма = ПараметрыОплаты.ОплатаНаличные;
	КонецЕсли;
	
	ЭтоПродажа = НЕ ЭтоПредоплата И НЕ ЭтоВозврат;
	
	// Зачет предоплат в момент отгрузки
	Если ЭтоПродажа И Объект.СуммаПредоплаты > 0 Тогда
		СтрокаОплаты = ОплатыПоДокументу.Добавить();
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата;
		СтрокаОплаты.Сумма = Объект.СуммаПредоплаты;
	КонецЕсли;
	
	Для каждого СтрокаОплатыПоДокументу Из ОплатыПоДокументу Цикл
		СтрокаОплаты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаОплатыПоДокументу);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	Если ПараметрыОплаты.ОплатаСертификатНСПК > 0 Тогда
	
		ОбщиеПараметры.ИдентификаторОплатыПлатежнойСистемы = ПараметрыОплаты.ИдентификаторКорзины;
		ОбщиеПараметры.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК;
		ОбщиеПараметры.QRКод.ЗначениеКода = ПараметрыОплаты.ИдентификаторКорзины;
		
		ДетализацияОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДетализацииСтрокиОплаты();
		ДетализацияОплаты.НаименованиеТипаОплаты = "СЕРТИФИКАТОМ";
		ДетализацияОплаты.Сумма = ПараметрыОплаты.ОплатаСертификатНСПК;
		ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
	
		Если ПараметрыОплаты.ОплатаКарта > 0 Тогда
			ДетализацияОплаты = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДетализацииСтрокиОплаты();
			ДетализацияОплаты.НаименованиеТипаОплаты = "КАРТА МИР";
			ДетализацияОплаты.Сумма = ПараметрыОплаты.ОплатаКарта;
			ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ОбщиеПараметры;
КонецФункции

&НаСервере
Функция ПараметрыПечатиЧекаНаличныеКарта(ПараметрыОплаты, ИдентификаторУстройства, ВерсияФормата, АдресУстановкиККТ, РезультатРаспределенияКодовМаркировки, ОписаниеОшибки)
	

	Возврат ПараметрыПечатиЧека(ПараметрыОплаты, ИдентификаторУстройства, ВерсияФормата, АдресУстановкиККТ, РезультатРаспределенияКодовМаркировки, ОписаниеОшибки);
	
КонецФункции

&НаСервере
Функция ПараметрыПечатиЧекаСложнаяОплата(ПараметрыОплаты, ИдентификаторУстройства, ВерсияФормата, АдресУстановкиККТ, РезультатРаспределенияКодовМаркировки, ОписаниеОшибки)

	ТаблицаОплата = ПолучитьИзВременногоХранилища(ПараметрыОплаты.АдресТаблицыОплаты);
	
	Объект.Оплата.Загрузить(ТаблицаОплата);
	
	УдалитьИзВременногоХранилища(ПараметрыОплаты.АдресТаблицыОплаты);
	
	Возврат ПараметрыПечатиЧека(ПараметрыОплаты, ИдентификаторУстройства, ВерсияФормата, АдресУстановкиККТ, РезультатРаспределенияКодовМаркировки, ОписаниеОшибки);

КонецФункции

&НаСервере
Функция ТекстЗапросаТаблицаТоваров(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВТ_Сертификаты",                  НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_Товары",                       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_АгентскиеУслуги",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТаблицаОплата",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ТаблицаЧека",                  НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаДокумента",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаОплат",                    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаКомитенты",                НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаДоговораПлатежногоАгента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСертификаты.ВидОплаты КАК ВидОплаты,
	|	ТаблицаСертификаты.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ТаблицаСертификаты
	|ИЗ
	|	&ТаблицаСертификаты КАК ТаблицаСертификаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ТаблицаТовары.КодАкцизнойМарки КАК Штрихкод,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаСкидки КАК СуммаСкидки,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаУслуги.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаУслуги.Цена КАК Цена,
	|	ТаблицаУслуги.Сумма КАК Сумма,
	|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
	|	ТаблицаУслуги.Контрагент КАК Контрагент,
	|	ТаблицаУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_АгентскиеУслуги
	|ИЗ
	|	&ТаблицаУслуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
	|	ТаблицаОплата.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_ТаблицаОплата
	|ИЗ
	|	&ТаблицаОплата КАК ТаблицаОплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	"""" КАК Содержание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникНоменклатура.Услуга, ИСТИНА)
	|				И ТаблицаТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ТаблицаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СуммаСкидки КАК СуммаСкидок,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ЭтоПредоплата
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата)
	|		КОГДА ЕСТЬNULL(СправочникНоменклатура.Услуга, ИСТИНА)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Товар)
	|	КОНЕЦ КАК ПризнакПредметаРасчета,
	|	ВЫБОР
	|		КОГДА &ЭтоПредоплата
	|				И &ЭтоПолнаяПредоплата
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная)
	|		КОГДА &ЭтоПредоплата
	|				И НЕ &ЭтоПолнаяПредоплата
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой)
	|	КОНЕЦ КАК ПризнакСпособаРасчета,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорПлатежногоАгента,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	НЕ ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ NULL КАК ЭтоМаркируемаяПродукция,
	|	СправочникНоменклатура.КодВидаТРУ КАК КодВидаТРУ,
	|	ТаблицаТовары.Штрихкод КАК Штрихкод,
	|	ЕСТЬNULL(ШтрихкодыУпаковокТоваров.Ссылка, ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)) КАК ШтрихкодыУпаковокТоваровСсылка
	|ПОМЕСТИТЬ ВТ_ТаблицаЧека
	|ИЗ
	|	ВТ_ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ТаблицаТовары.АкцизнаяМарка = ШтрихкодыУпаковокТоваров.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Содержание,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.Сумма,
	|	0,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ЭтоПредоплата
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Услуга)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ЭтоПредоплата
	|				И &ЭтоПолнаяПредоплата
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПредоплатаПолная)
	|		КОГДА &ЭтоПредоплата
	|				И НЕ &ЭтоПолнаяПредоплата
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПредоплатаЧастичная)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой)
	|	КОНЕЦ,
	|	ТаблицаУслуги.ДоговорКонтрагента,
	|	ТаблицаУслуги.Контрагент,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|ИЗ
	|	ВТ_АгентскиеУслуги КАК ТаблицаУслуги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ВидыОплатОрганизаций.Наименование,
	|	1,
	|	ТаблицаСертификаты.Сумма,
	|	ТаблицаСертификаты.Сумма,
	|	0,
	|	ВЫБОР
	|		КОГДА &ДокументБезНДС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ &РасчетнаяСтавкаНДСПоУмолчанию
	|	КОНЕЦ,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата),
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.Аванс),
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
	|			ТОГДА ДоговорыКонтрагентов.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
	|			ТОГДА ДоговорыКонтрагентов.Владелец
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|ИЗ
	|	ВТ_ТаблицаСертификаты КАК ТаблицаСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ПО ТаблицаСертификаты.ВидОплаты = ВидыОплатОрганизаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО (ВидыОплатОрганизаций.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаЧека.Содержание <> """"
	|			ТОГДА ТаблицаЧека.Содержание
	|		КОГДА ЕСТЬNULL(СправочникНоменклатура.НаименованиеПолное, """") <> """"
	|			ТОГДА СправочникНоменклатура.НаименованиеПолное
	|		ИНАЧЕ ЕСТЬNULL(СправочникНоменклатура.Наименование, """")
	|	КОНЕЦ КАК Наименование,
	|	ЕСТЬNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(СправочникНоменклатура.ТабачнаяПродукция, ЛОЖЬ) КАК ЭтоТабачнаяПродукция,
	|	ЕСТЬNULL(СправочникНоменклатура.Артикул, """") КАК Артикул,
	|	&Склад КАК Склад,
	|	ТаблицаЧека.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА ТаблицаЧека.Цена
	|		КОГДА ТаблицаЧека.Количество <> 0
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС) / ТаблицаЧека.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				И ТаблицаЧека.СуммаСкидок = 0
	|			ТОГДА ТаблицаЧека.Цена
	|		КОГДА &СуммаВключаетНДС
	|				И ТаблицаЧека.Количество <> 0
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаЧека.Сумма - ТаблицаЧека.СуммаСкидок) / ТаблицаЧека.Количество КАК ЧИСЛО(15, 2))
	|		КОГДА &СуммаВключаетНДС
	|				И ТаблицаЧека.Количество = 0
	|			ТОГДА ТаблицаЧека.Сумма - ТаблицаЧека.СуммаСкидок
	|		КОГДА ТаблицаЧека.Количество <> 0
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС - ТаблицаЧека.СуммаСкидок) / ТаблицаЧека.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС
	|	КОНЕЦ КАК ЦенаСоСкидками,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА ТаблицаЧека.Сумма - ТаблицаЧека.СуммаСкидок
	|		ИНАЧЕ ТаблицаЧека.Сумма + ТаблицаЧека.СуммаНДС - ТаблицаЧека.СуммаСкидок
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаЧека.СуммаСкидок КАК СуммаСкидок,
	|	ВЫБОР
	|		КОГДА &ЭтоВерсия105
	|				И ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 120
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|				ИЛИ ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|			ТОГДА 20
	|		КОГДА &ЭтоВерсия105
	|				И ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 118
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 18
	|		КОГДА &ЭтоВерсия105
	|				И ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 110
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|				ИЛИ ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА 10
	|		КОГДА ТаблицаЧека.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДС,
	|	ТаблицаЧека.СуммаНДС КАК СуммаНДС,
	|	ТаблицаЧека.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета,
	|	ТаблицаЧека.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
	|	1 КАК НомерСекции,
	|	ТаблицаЧека.ДоговорПлатежногоАгента КАК ДоговорПлатежногоАгента,
	|	ТаблицаЧека.Контрагент КАК Контрагент,
	|	ТаблицаЧека.ЭтоМаркируемаяПродукция КАК ЭтоМаркируемаяПродукция,
	|	ТаблицаЧека.ШтрихкодыУпаковокТоваровСсылка КАК ШтрихкодыУпаковокТоваровСсылка,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаЧека.Штрихкод, """") КАК СТРОКА(200)) КАК Штрихкод,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТаблицаЧека.КодВидаТРУ, """") КАК СТРОКА(200)) КАК КодВидаТРУ,
	|	ЕСТЬNULL(СправочникНоменклатура.КодНоменклатурнойКлассификацииККТ.Код, НЕОПРЕДЕЛЕНО) КАК КодВидаНоменклатурнойКлассификации,
	|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения.Код, НЕОПРЕДЕЛЕНО) КАК КодЕдиницыИзмерения
	|ИЗ
	|	ВТ_ТаблицаЧека КАК ТаблицаЧека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаЧека.Номенклатура = СправочникНоменклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР ВидыОплатОрганизаций.ТипОплаты
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.Наличные)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)
	|	КОНЕЦ КАК ТипОплаты,
	|	СУММА(ТаблицаОплата.Сумма) КАК Сумма
	|ИЗ
	|	ВТ_ТаблицаОплата КАК ТаблицаОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ПО (ВидыОплатОрганизаций.Ссылка = ТаблицаОплата.ВидОплаты)
	|ГДЕ
	|	ВидыОплатОрганизаций.ТипОплаты <> ЗНАЧЕНИЕ(Перечисление.ТипыОплат.Наличные)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР ВидыОплатОрганизаций.ТипОплаты
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.Наличные)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Наличные)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Предоплата)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОплатыККТ.Электронно)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АгентскиеУслуги.Контрагент КАК Контрагент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_АгентскиеУслуги.ДоговорКонтрагента) КАК КоличествоДоговоров
	|ИЗ
	|	ВТ_АгентскиеУслуги КАК ВТ_АгентскиеУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_АгентскиеУслуги.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	АгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	АгентскиеУслуги.Контрагент КАК Контрагент
	|ИЗ
	|	ВТ_АгентскиеУслуги КАК АгентскиеУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО АгентскиеУслуги.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.ПлатежныйАгент";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыПечатиЧека(ВерсияФормата, ИдентификаторУстройства)
	Запрос = Новый Запрос;
	
	ЭтоВерсия105 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", ВерсияФормата) > 0;
	
	Запрос.УстановитьПараметр("ТаблицаТовары",                  Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаУслуги",                  Объект.АгентскиеУслуги.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСертификаты",             Объект.ПодарочныеСертификаты.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаОплата",                  Объект.Оплата.Выгрузить());
	Запрос.УстановитьПараметр("ЕдиницаТовара",                  Перечисления.ТипыУпаковок.МаркированныйТовар);
	Запрос.УстановитьПараметр("СуммаВключаетНДС",               Объект.СуммаВключаетНДС);
	Запрос.УстановитьПараметр("ДокументБезНДС",                 Объект.ДокументБезНДС);
	Запрос.УстановитьПараметр("Склад",                          Объект.Склад);
	Запрос.УстановитьПараметр("ЭтоВерсия105",                   ЭтоВерсия105);
	Запрос.УстановитьПараметр("ЭтоПредоплата",                  ЭтоПредоплата ИЛИ ЭтоВозвратПредоплаты);
	Запрос.УстановитьПараметр("ЭтоПолнаяПредоплата",            ПолнаяПредоплата);
	Запрос.УстановитьПараметр("РасчетнаяСтавкаНДСПоУмолчанию",  УчетНДСКлиентСервер.РасчетнаяСтавкаНДСПоУмолчанию(Объект.Дата));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаТаблицаТоваров(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПараметрыПечатиЧека = Новый Структура;
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПечатиЧека.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПечатиЧека;
КонецФункции

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукция Тогда
		
		Записать();
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресТорговогоОбъекта);
		ПараметрыОперации.Вставить("СерийныйНомер", "");
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПриОшибкеПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукция Тогда
		
		НомерСмены = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерСмены);
		Если НомерСмены = 0 Тогда
			НомерСмены = 1;
		КонецЕсли;
		
		НомерЧека = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПараметрыВыполнения.НомерЧека);
		Если НомерЧека = 0 Тогда
			НомерЧека = 1;
		КонецЕсли;
		
		ПараметрыОперации = Новый Структура;
		ПараметрыОперации.Вставить("НомерСмены",    НомерСмены);
		ПараметрыОперации.Вставить("НомерЧека",     НомерЧека + 1000000);
		ПараметрыОперации.Вставить("АдресТорговогоОбъекта", ДополнительныеПараметры.АдресТорговогоОбъекта);
		ПараметрыОперации.Вставить("СерийныйНомер", "");
		Если ПараметрыВыполнения.Свойство("ЗаводскойНомерФН") И ЗначениеЗаполнено(ПараметрыВыполнения.ЗаводскойНомерФН) Тогда
			ПараметрыОперации.СерийныйНомер = ПараметрыВыполнения.ЗаводскойНомерФН;
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ПередатьНемедленно(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию"),
			ПараметрыОперации,
			Новый ОписаниеОповещения("ПослеПередачиЧекаЕГАИС", ЭтотОбъект, ПараметрыВыполнения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередачиЧекаЕГАИС(Изменения, ПараметрыВыполнения) Экспорт
	
	ЕстьОшибки = (Изменения.Количество() <> 1);
	
	Ошибки = Новый Массив;
	Для Каждого ЭлементДанных Из Изменения Цикл
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
			Ошибки.Добавить(ЭлементДанных.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Если Ошибки.Количество() > 0 Тогда
		Ошибки.Вставить(0, НСтр("ru = 'В процессе передачи данных в ЕГАИС возникли ошибки:'"));
	КонецЕсли;
	ОписаниеОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	ПараметрыВыполнения.ПродолжитьПечать = Не ЕстьОшибки;
	ПараметрыВыполнения.ОписаниеОшибки   = ОписаниеОшибки;
	
	ПараметрыВыполнения.Вставить("АдресЧека",   Изменения[0].ИдентификаторЗапроса);
	ПараметрыВыполнения.Вставить("ПодписьЧека", Изменения[0].Подпись);
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОборудованием

&НаКлиенте
Функция ЗаполнитьСписокОборудования(СообщениеОбОшибке = "")
	Если Объект.Организация.Пустая() ИЛИ ТолькоПросмотр Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не указана организация.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось определить рабочее место подключаемого оборудования.'");
		Возврат Ложь;
	КонецЕсли;
	
	РабочееМесто = МенеджерОборудованияКлиентПовтИсп.РабочееМестоКлиента();
	
	ПараметрыОбъекта = Новый Структура("Организация, Склад, СистемаНалогообложения");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	СписокОборудования = НастройкиПодключаемогоОборудования(РабочееМесто, ПараметрыОбъекта);
	
	СписокОборудованияПечатьЧека.ЗагрузитьЗначения(СписокОборудования.СписокОборудованияПечатьЧека);
	СписокОборудованияПлатежнаяКарта.ЗагрузитьЗначения(СписокОборудования.СписокОборудованияПлатежнаяКарта);
	ИспользуютсяСертификатыНСПК = СписокОборудования.ИспользуютсяСертификатыНСПК;
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиПодключаемогоОборудования(РабочееМесто, ПараметрыОбъекта)
	СписокОборудованияПечатьЧека     = Новый Массив;
	СписокОборудованияПлатежнаяКарта = Новый Массив;

	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор);
	МассивТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков);
	МассивТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ККТ);
	МассивТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал);
	
	СписокОборудованияПоТипу = СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто, ПараметрыОбъекта);
	
	ИспользуютсяСертификатыНСПК = Ложь;
	Для каждого ЭкземплярОборудования Из СписокОборудованияПоТипу Цикл
		Если ЭкземплярОборудования.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
			СписокОборудованияПлатежнаяКарта.Добавить(ЭкземплярОборудования.Ссылка);
			ИспользуютсяСертификатыНСПК = ЭкземплярОборудования.ЭлектронныеСертификатыНСПК;
		ИначеЕсли ЭкземплярОборудования.ТипОборудования <> Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			СписокОборудованияПечатьЧека.Добавить(ЭкземплярОборудования.Ссылка);
		Иначе
			НалоговыеРежимыРазрешенныеВНастройкахККТ = ПечатьФискальныхДокументов.НалоговыеРежимыРазрешенныеВНастройкахККТ(ЭкземплярОборудования.Ссылка);
			Если НалоговыеРежимыРазрешенныеВНастройкахККТ.Найти(ПараметрыОбъекта.СистемаНалогообложения) <> Неопределено Тогда
				СписокОборудованияПечатьЧека.Добавить(ЭкземплярОборудования.Ссылка);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Результат = Новый Структура;
	Результат.Вставить("СписокОборудованияПечатьЧека",     СписокОборудованияПечатьЧека);
	Результат.Вставить("СписокОборудованияПлатежнаяКарта", СписокОборудованияПлатежнаяКарта);
	Результат.Вставить("ИспользуютсяСертификатыНСПК",      ИспользуютсяСертификатыНСПК И СписокОборудованияПлатежнаяКарта.Количество() = 1);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СписокОборудованияПоТипу(МассивТиповОборудования, РабочееМесто, ПараметрыОбъекта)
	
	Если РабочееМесто = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования,
	|	ОборудованиеПоОрганизациям.ЭлектронныеСертификатыНСПК КАК ЭлектронныеСертификатыНСПК
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОборудованиеПоОрганизациям КАК ОборудованиеПоОрганизациям
	|		ПО ПодключаемоеОборудование.Ссылка = ОборудованиеПоОрганизациям.Оборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Организация = &Организация
	|	И (ОборудованиеПоОрганизациям.Склад В (&Склады)
	|			ИЛИ ОборудованиеПоОрганизациям.Склад ЕСТЬ NULL)
	|	И ПодключаемоеОборудование.ТипОборудования В(&ТипОборудования)
	|	И ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
	|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
	|	И ПодключаемоеОборудование.УстройствоИспользуется";
	
	МассивСкладов = Новый Массив;
	МассивСкладов.Добавить(ПараметрыОбъекта.Склад);
	МассивСкладов.Добавить(ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	
	Запрос.УстановитьПараметр("Организация",     ПараметрыОбъекта.Организация);
	Запрос.УстановитьПараметр("Склады",          МассивСкладов);
	Запрос.УстановитьПараметр("ТипОборудования", МассивТиповОборудования);
	Запрос.УстановитьПараметр("РабочееМесто",    РабочееМесто);

	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервереБезКонтекста
Функция ВидыОплатПлатежнойКартой(Организация)
	
	Возврат Справочники.ВидыОплатОрганизаций.ВидыОплатПлатежнойКартой(Организация);
	
КонецФункции

&НаКлиенте
Функция НовыйПараметрыОплаты()
	ПараметрыОплаты = Новый Структура;
	
	ПараметрыОплаты.Вставить("СсылочныйНомер",          Неопределено);
	ПараметрыОплаты.Вставить("НомерПлатежнойКарты",     Неопределено);
	ПараметрыОплаты.Вставить("НомерЧекаЭТ",             Неопределено);
	
	ПараметрыОплаты.Вставить("ИдентификаторКорзины",    "");
	
	ПараметрыОплаты.Вставить("ПечататьТоварныйЧек",     Ложь);
	ПараметрыОплаты.Вставить("ПечататьЧек",             Ложь);
	
	ПараметрыОплаты.Вставить("ПокупательEmail",         "");
	ПараметрыОплаты.Вставить("ПокупательНомер",         "");
	
	ПараметрыОплаты.Вставить("ОснованиеКоррекции",      Неопределено);
	
	ПараметрыОплаты.Вставить("АдресТаблицыОплаты",       "");
		
	Возврат ПараметрыОплаты;
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуОплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		ПараметрыОповещения = Новый Структура;
		
		ПараметрыОповещения.Вставить("ОплатаКарта",          Результат.ОплатаКарта);
		ПараметрыОповещения.Вставить("ОплатаНаличные",       Результат.ОплатаНаличные);
		ПараметрыОповещения.Вставить("ОплатаСертификатНСПК", Результат.ОплатаСертификатНСПК);
		ПараметрыОповещения.Вставить("ОплатаСБП",            Результат.ОплатаСБП);
		
		ПараметрыОповещения.Вставить("ИдентификаторУстройства", ДополнительныеПараметры.ИдентификаторУстройства);
		ПараметрыОповещения.Вставить("ТипУстройства",           ДополнительныеПараметры.ТипУстройства);
		
		Если ДополнительныеПараметры.Свойство("СписокТоваровОплатаСертификатом") Тогда
			ПараметрыОповещения.Вставить("СписокТоваровОплатаСертификатом", ДополнительныеПараметры.СписокТоваровОплатаСертификатом);
		КонецЕсли;
		
		ПараметрыОплаты = НовыйПараметрыОплаты();
		
		ЗаполнитьЗначенияСвойств(ПараметрыОплаты,Результат); 
		
		ПараметрыОплаты.ИдентификаторКорзины    = ДополнительныеПараметры.ИдентификаторКорзины;
		
		ПараметрыОповещения.Вставить("ПараметрыОплаты", ПараметрыОплаты);
		
		// Оплата сертификатом, даже с доплатой наличными требует применения ЭТ
		Если Результат.ОплатаКарта <> 0 
			Или Результат.ОплатаСертификатНСПК > 0 Тогда
			
			ДанныеПоВидамОплат = ВидыОплатПлатежнойКартой(Объект.Организация);
			Если ЗначениеЗаполнено(ДанныеПоВидамОплат.ВидОплатыПоУмолчанию) И Не ДанныеПоВидамОплат.ТребуетсяВыбратьВидОплаты Тогда
				ВыборВидОплатыЗавершение(ДанныеПоВидамОплат.ВидОплатыПоУмолчанию, ПараметрыОповещения);
			ИначеЕсли Результат.ОплатаСертификатНСПК > 0 Тогда
				// По НСПК платеж должен пройти по тому терминалу, где получали одобрение
				ВыборВидОплатыЗавершение(ВидОплатыПоОборудованию(СписокОборудованияПлатежнаяКарта[0].Значение, Объект.Организация), ПараметрыОповещения);
			Иначе
				ОтборВидыОплат = Новый Структура("Организация, ТипОплаты, ПометкаУдаления", Объект.Организация, ПредопределенноеЗначение("Перечисление.ТипыОплат.ПлатежнаяКарта"), Ложь);
				ЗаголовокФормыВыбора = НСтр("ru = 'Выберите вид оплаты'");
				
				ОповещениеПриЗавершенииВыбора = Новый ОписаниеОповещения("ВыборВидОплатыЗавершение", ЭтотОбъект, ПараметрыОповещения);
				
				ПараметрыОткрытияФормы = Новый Структура("Отбор, Заголовок", ОтборВидыОплат, ЗаголовокФормыВыбора);
				ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаВыбора", ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор, , ,ОповещениеПриЗавершенииВыбора);
			КонецЕсли;
		ИначеЕсли Результат.ОплатаСБП > 0 Тогда
			ПараметрыОплатыСБП = ДополнительныеПараметры.ПараметрыОплатыСБП;
			Если ЭтоВозврат Тогда 
				НачатьВозвратОплатыСБП(ПараметрыОплатыСБП, ПараметрыОповещения);
			ИначеЕсли ПараметрыОплатыСБП.ЭтоКассоваяСсылка Тогда
				НачатьОплатуПоКассовойСсылке(ПараметрыОплатыСБП, ПараметрыОповещения);
			Иначе
				НачатьОплатуПоПлатежнойСсылке(ПараметрыОплатыСБП, ПараметрыОповещения);
			КонецЕсли; 
		Иначе
			// Оплата наличными не требует предварительной подготовки
			НачатьОперациюНаФискальномУстройстве(ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторУстройстваЭТ(ВидОплатыОрганизации)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОплатыОрганизации, "ПодключаемоеОборудование");
КонецФункции

&НаКлиенте
Процедура ВыборВидОплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено  Тогда
		ВызватьИсключение НСтр("ru = 'Не задан вид оплаты для оплаты картой.'");
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ВидОплаты", Результат);
	
	// При печати чека коррекции ЭТ не задействуется, таблица оплаты картами не перезаполняется
	Если НЕ ЭтоЧекКоррекции Тогда
		ИдентификаторУстройстваЭТ = ИдентификаторУстройстваЭТ(Результат);
		
		Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ) Тогда
			ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", ИдентификаторУстройстваЭТ);
		ИначеЕсли ДополнительныеПараметры.ОплатаСертификатНСПК > 0 И СписокОборудованияПлатежнаяКарта.Количество() = 1 Тогда
			ДополнительныеПараметры.Вставить("ИдентификаторУстройстваЭТ", СписокОборудованияПлатежнаяКарта[0].Значение);
		КонецЕсли;
		
	КонецЕсли; 
	
	НачатьОперациюНаФискальномУстройстве(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСертификатаЗавершение(РезультатПроверки, ПараметрыФормыОплаты) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "ИдентификаторКорзины") <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормыОплаты, РезультатПроверки, "ИдентификаторКорзины, СуммаСертификатамиНСПК");
	КонецЕсли; 
	
	ВыбратьФискальноеУстройство(ПараметрыФормыОплаты);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПараметрыФискальногоУстройстваЗавершение(ПараметрыФискальногоУстройства, ДополнительныеПараметры) Экспорт
	Перем ОписаниеОшибки;
	
	ВерсияФормата = Новый Структура;
	ВерсияФормата.Вставить("ВерсияККТ", "1.0.0.0");
	ВерсияФормата.Вставить("ВерсияФН",  "1.0.0.0");
	ВерсияФормата.Вставить("ВерсияФД",  "1.0.0.0");
	
	ДополнительныеПараметры.Вставить("АдресУстановкиККТ");
	ДополнительныеПараметры.Вставить("ВерсияФормата",   ВерсияФормата);
	
	Если ПараметрыФискальногоУстройства =  Неопределено Тогда
		// Принтер чеков эмулирует все атрибуты ФФД 1.1
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры,"ТипУстройства") = "ПринтерЧеков" Тогда
			ДополнительныеПараметры.ВерсияФормата.ВерсияФД = "1.1.0.0";
		Иначе
			ДополнительныеПараметры.ВерсияФормата.ВерсияФД = "1.0.0.0";
		КонецЕсли; 
	ИначеЕсли НЕ ПараметрыФискальногоУстройства.Результат Тогда 
		ОписаниеОшибки = ПараметрыФискальногоУстройства.ОписаниеОшибки;
	Иначе
		ДополнительныеПараметры.ВерсияФормата = ПечатьФискальныхДокументовКлиент.ВерсииФорматовФД(ПараметрыФискальногоУстройства.ПараметрыККТ.ВерсияФФДФН, ПараметрыФискальногоУстройства.ПараметрыККТ.ВерсияФФДККТ);
		
		ПараметрыФискальногоУстройства.ПараметрыККТ.Свойство("АдресПроведенияРасчетов", ДополнительныеПараметры.АдресУстановкиККТ);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаГотовностиККТЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОписаниеОповещения, УникальныйИдентификатор, ДополнительныеПараметры.ИдентификаторУстройства);
		
		Возврат;
	КонецЕсли;
	
	ПроверкаГотовностиККТЗавершение(
		Новый Структура("Результат, ВыходныеПараметры, ОписаниеОшибки", НЕ ЗначениеЗаполнено(ОписаниеОшибки), Неопределено, ОписаниеОшибки), 
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаГотовностиККТЗавершение(РезультатПроверкиГотовности, ДополнительныеПараметры) Экспорт
	Перем ОписаниеОшибки, НомерЧекаККМ;
	
	ЭтоОнлайнККТ = ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено 
		И ДополнительныеПараметры.ТипУстройства = "ККТ";
		
	ДополнительныеПараметры.Вставить("ЭтоОнлайнККТ", ЭтоОнлайнККТ);

	Если РезультатПроверкиГотовности.Результат Тогда
		
		Если РезультатПроверкиГотовности.Свойство("НомерЧекаККТ", НомерЧекаККМ) Тогда
			ДополнительныеПараметры.Вставить("НомерЧекаККМ", НомерЧекаККМ+1);
		Иначе
			ДополнительныеПараметры.Вставить("НомерЧекаККМ", НомерЧекаККМ(Объект.Организация, Объект.Склад, ДополнительныеПараметры.ИдентификаторУстройства, Объект.Дата));
		КонецЕсли; 
		
		Если ЭтоОнлайнККТ Тогда
			СтатусПоследнейСмены = КассовыеСменыВызовСервера.СтатусПоследнейСмены(ДополнительныеПараметры.ИдентификаторУстройства);
		Иначе
			СтатусПоследнейСмены = Неопределено;
		КонецЕсли; 
		
		Если СтатусПоследнейСмены = Неопределено 
			ИЛИ (СтатусПоследнейСмены.Активна И СтатусПоследнейСмены.Открыта) Тогда 
			

			Если ВестиУчетМаркируемойПродукцииИСМП Тогда
				РезультатРаспределенияКодовМаркировки = РезультатРаспределенияКодовМаркировки(ОписаниеОшибки);
				ДополнительныеПараметры.Вставить("РезультатРаспределенияКодовМаркировки", РезультатРаспределенияКодовМаркировки);
				
				ДанныеДляПроверки = Новый Массив;
				Для каждого РезультатРаспределения Из РезультатРаспределенияКодовМаркировки Цикл
					ДанныеДляПроверки.Добавить(ШтрихкодированиеИСМПКлиент.НовыйЭлементПроверкиСредствамиККТПоДаннымРаспределения(РезультатРаспределения.Значение));
				КонецЦикла; 
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					ТекстСообщения = НСтр("ru = 'При проверки кодов маркировки произошла ошибка.
						|Чек не напечатан на фискальном устройстве.
						|Дополнительное описание:
						|%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат;
				КонецЕсли; 
				
				// проверка марок
				ПараметрыНачалаПроверки = ШтрихкодированиеИСМПКлиент.ПараметрыНачалаПроверкиКодовМаркировкиСредствамиККТ();
				ПараметрыНачалаПроверки.ОповещениеОЗавершении       = Новый ОписаниеОповещения("ПроверкаКодовМаркировкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПараметрыНачалаПроверки.ДанныеДляПроверки           = ДанныеДляПроверки;
				ПараметрыНачалаПроверки.ФормаОсновногоОбъекта       = ЭтотОбъект;
				ПараметрыНачалаПроверки.ФормаВспомогательная        = ЭтотОбъект;
				ПараметрыНачалаПроверки.ЗаголовокКнопкиИгнорировать = НСтр("ru = 'Пробить чек'");
				
				ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
				Если НЕ ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ 
					ИЛИ ПараметрыСканирования.ККТФФД12ИСМП <> ДополнительныеПараметры.ИдентификаторУстройства Тогда
					
					ИдентификаторУстройства = ДополнительныеПараметры.ИдентификаторУстройства;
					
					Если ОборудованиеЧекопечатающиеУстройстваВызовСервера.ФискальноеУстройствоПоддерживаетПроверкуКодовМаркировки(ИдентификаторУстройства) Тогда
						ПараметрыСканирования.ТребуетсяПроверкаСредствамиККТ   = Истина;
						ПараметрыСканирования.ККТФФД12ИСМП                     = ИдентификаторУстройства;
					КонецЕсли;
					
				КонецЕсли; 
				
				ПараметрыНачалаПроверки.ПараметрыСканирования = ПараметрыСканирования;
				
				ШтрихкодированиеИСМПКлиент.НачатьПроверкуКодовМаркировкиСредствамиККТ(ПараметрыНачалаПроверки);
			Иначе
				ДополнительныеПараметры.Вставить("РезультатРаспределенияКодовМаркировки", НОвый Соответствие);
				ПроверкаКодовМаркировкиЗавершение(Неопределено, ДополнительныеПараметры);
			КонецЕсли; 
			
		Иначе
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Кассовая смена %1.'"), ?(СтатусПоследнейСмены.Открыта, "истекла", "не открыта"));
		КонецЕсли;
	Иначе
		РезультатПроверкиГотовности.Свойство("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоВозвратТекущейСмены(ДокументОснование, Дата)
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата")) = НачалоДня(Дата);
КонецФункции 

&НаКлиенте
Процедура ПроверкаКодовМаркировкиЗавершение(РезультатПроверки, ДополнительныеПараметры) Экспорт
	Перем ОписаниеОшибки;
	
	Если РезультатПроверки <> Неопределено 
		И НЕ РезультатПроверки.ВыполнитьФискализацию Тогда
		
		Для каждого ЭлементПроверки Из РезультатПроверки.ЭлементыПроверки Цикл
			
			РезультатПроверкиПозиции = РезультатПроверки.ДанныеПроверки[ЭлементПроверки.ИдентификаторЭлемента];
		
			Если РезультатПроверкиПозиции <> Неопределено 
				И НЕ РезультатПроверкиПозиции.РезультатПроверки Тогда
				
				НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("АкцизнаяМарка", ЭлементПроверки.ШтрихкодУпаковки));
				
				Если НайденныеСтроки.Количество() = 1 Тогда
					СтрокаТовары = НайденныеСтроки[0];
				
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовары.НомерСтроки, "ИндексАкцизнойМарки");
					
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
						НСтр("ru = 'Код маркировки'"), СтрокаТовары.НомерСтроки, "Товары", РезультатПроверкиПозиции.ТекстОшибки);
							
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект");
				
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
		ШтрихкодированиеИСМПВызовСервера.ОчиститьРезультатыПроверкиСредствамиККТ(Объект.Ссылка);
		
		Возврат;
	КонецЕсли; 
	
	// ТЧ Оплата будет заполнена по факту проведения операции на ЭТ
	Объект.Оплата.Очистить();
	
	ЭтотОбъект.Доступность = Ложь; // Блокируем интерфейс пользователя.
	
	// Если это оплата по платежной карте, то проводим авторизацию до печати чека
	Если ДополнительныеПараметры.Свойство("ИдентификаторУстройстваЭТ") Тогда
		ДополнительныеПараметры.Вставить("ИдентификаторУстройства", ДополнительныеПараметры.ИдентификаторУстройства);
		
		ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОперацияПоПлатежнойКартеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ДокументОснование = РозничнаяПродажаСсылка;
		
		ПараметрыОперации.ТипТранзакции  = "AuthorizeSales";
		Если ДополнительныеПараметры.ОплатаСертификатНСПК > 0 Тогда
			ПараметрыОперации.ТипТранзакции  = "PayElectronicCertificate";
			
			ПараметрыОперации.ИдентификаторКорзины         = ДополнительныеПараметры.ПараметрыОплаты.ИдентификаторКорзины;
			ПараметрыОперации.СуммаЭлектронногоСертификата = ДополнительныеПараметры.ОплатаСертификатНСПК;
			ПараметрыОперации.СуммаСобственныхСредств      = ДополнительныеПараметры.ОплатаКарта;
		КонецЕсли;
		
		Если ЭтоВозврат Тогда
			ПараметрыОперации.ТипТранзакции  = "AuthorizeRefund";
			Если ДополнительныеПараметры.ОплатаСертификатНСПК > 0 Тогда
				ПараметрыОперации.ТипТранзакции  = "ReturnElectronicCertificate";
			ИначеЕсли ЭтоВозвратТекущейСмены(Объект.Основание, Объект.Дата) Тогда
				ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
			КонецЕсли;
			
			ПараметрыОперации.СсылочныйНомер = ДополнительныеПараметры.ПараметрыОплаты.СсылочныйНомер;
			ПараметрыОперации.НомерКарты     = ДополнительныеПараметры.ПараметрыОплаты.НомерПлатежнойКарты;
			ПараметрыОперации.НомерЧекаЭТ    = ДополнительныеПараметры.ПараметрыОплаты.НомерЧекаЭТ;
		КонецЕсли;
		
		ПараметрыОперации.СуммаОперации  = ДополнительныеПараметры.ОплатаКарта + ДополнительныеПараметры.ОплатаСертификатНСПК;
		ПараметрыОперации.НомерЧека      = Формат(ДополнительныеПараметры.НомерЧекаККМ, "ЧГ=0");
		
		ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, УникальныйИдентификатор, 
			ДополнительныеПараметры.ИдентификаторУстройстваЭТ, ПараметрыОперации, , ДополнительныеПараметры.ИдентификаторУстройства);
		
	Иначе
		// при оплате без терминала, просто запишем сумму в ТЧ "Оплаты"
		Если ДополнительныеПараметры.ОплатаКарта > 0 Тогда
			СтрокаОплата           = Объект.Оплата.Добавить();
			СтрокаОплата.ВидОплаты = ДополнительныеПараметры.ВидОплаты;
			СтрокаОплата.Сумма     = ДополнительныеПараметры.ОплатаКарта; 
		ИначеЕсли ДополнительныеПараметры.ОплатаСБП > 0 Тогда
			СтрокаОплата           = Объект.Оплата.Добавить();
			СтрокаОплата.ВидОплаты = ДополнительныеПараметры.ВидОплаты;
			СтрокаОплата.Сумма     = ДополнительныеПараметры.ОплатаСБП;
		КонецЕсли;
		
		ПечатьЧекаНаФискальномУстройстве(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоПлатежнойКартеЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатВыполнения.Результат Тогда
		ЭтотОбъект.Доступность = Истина; // Разблокировка интерфейса пользователя.
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		СтрокаОплата           = Объект.Оплата.Добавить();
		
		СтрокаОплата.ВидОплаты = ДополнительныеПараметры.ВидОплаты;
		
		Если РезультатВыполнения.Свойство("СуммаОперации") Тогда
		 	СтрокаОплата.Сумма = РезультатВыполнения.СуммаОперации;
		Иначе
			СтрокаОплата.Сумма                  = ДополнительныеПараметры.ОплатаКарта 
				+ ДополнительныеПараметры.ОплатаСертификатНСПК;
				
			СтрокаОплата.СуммаСертификатамиНСПК = РезультатВыполнения.СуммаЭлектронногоСертификата;
			СтрокаОплата.ИдентификаторКорзины   = РезультатВыполнения.ИдентификаторКорзины;
		КонецЕсли; 
		
		// Требуется для возврата
		СтрокаОплата.СсылочныйНомер       = РезультатВыполнения.СсылочныйНомер;
		СтрокаОплата.НомерПлатежнойКарты  = РезультатВыполнения.НомерКарты;
		СтрокаОплата.НомерЧекаЭТ          = РезультатВыполнения.НомерЧекаЭТ;
		
		РезультатыОплатыКартой = Новый Структура();
		РезультатыОплатыКартой.Вставить("СсылочныйНомер",  РезультатВыполнения.СсылочныйНомер);
		РезультатыОплатыКартой.Вставить("НомерКарты",      РезультатВыполнения.НомерКарты);
		РезультатыОплатыКартой.Вставить("НомерЧекаЭТ",     РезультатВыполнения.НомерЧекаЭТ);
		
		ДополнительныеПараметры.Вставить("РезультатыОплатыКартой", РезультатыОплатыКартой);
		
		ПечатьЧекаНаФискальномУстройстве(ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧекаНаФискальномУстройстве(ДополнительныеПараметры)
	Перем ОписаниеОшибки;
	
	ПараметрыОплаты = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДополнительныеПараметры.ПараметрыОплаты);
	
	ПараметрыОплаты.Вставить("ОплатаКарта",          ДополнительныеПараметры.ОплатаКарта);
	ПараметрыОплаты.Вставить("ОплатаНаличные",       ДополнительныеПараметры.ОплатаНаличные);
	ПараметрыОплаты.Вставить("ОплатаСертификатНСПК", ДополнительныеПараметры.ОплатаСертификатНСПК);
	
	Если НЕ ЭтоАдресВременногоХранилища(ПараметрыОплаты.АдресТаблицыОплаты) Тогда
		ПараметрыПечатиЧека = ПараметрыПечатиЧекаНаличныеКарта(
			ПараметрыОплаты, ДополнительныеПараметры.ИдентификаторУстройства, 
			ДополнительныеПараметры.ВерсияФормата, ДополнительныеПараметры.АдресУстановкиККТ, 
			ДополнительныеПараметры.РезультатРаспределенияКодовМаркировки,
			ОписаниеОшибки);
	Иначе
		ПараметрыПечатиЧека = ПараметрыПечатиЧекаСложнаяОплата(
			ПараметрыОплаты, ДополнительныеПараметры.ИдентификаторУстройства, 
			ДополнительныеПараметры.ВерсияФормата, ДополнительныеПараметры.АдресУстановкиККТ, 
			ДополнительныеПараметры.РезультатРаспределенияКодовМаркировки,
			ОписаниеОшибки);
	КонецЕсли;
		
	ДополнительныеПараметры.Вставить("ПараметрыПечатиЧека", ПараметрыПечатиЧека);
			
	Если ДополнительныеПараметры.ЭтоОнлайнККТ Тогда
		ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыПечатиЧека, ДополнительныеПараметры.ИдентификаторУстройства);
	КонецЕсли;
	
	// Печатаем фискальный чек
	Если ДополнительныеПараметры.ИдентификаторУстройства <> Неопределено Тогда
		ОповещениеПриЗавершенииПечатиЧека = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ЕстьАлкогольнаяПродукция = Ложь;
		Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
			Для Каждого СтрокаТЧ Из Объект.Товары Цикл
				Если СтрокаТЧ.ЭтоАлкогольнаяПродукция И ЗначениеЗаполнено(СтрокаТЧ.АкцизнаяМарка) Тогда
					ЕстьАлкогольнаяПродукция = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДополнительныеПараметрыОповещения = Новый Структура;
		ДополнительныеПараметрыОповещения.Вставить("ОписаниеОповещения",       ОповещениеПриЗавершенииПечатиЧека);
		ДополнительныеПараметрыОповещения.Вставить("ЕстьАлкогольнаяПродукция", ЕстьАлкогольнаяПродукция);
		ДополнительныеПараметрыОповещения.Вставить("АдресТорговогоОбъекта",    ДополнительныеПараметры.ПараметрыПечатиЧека.АдресМагазина);
		
		ОповещениеПослеОткрытииЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека",     ЭтотОбъект, ДополнительныеПараметрыОповещения);
		ОповещениеПриОшибкеПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПриОшибкеПечатиЧека", ЭтотОбъект, ДополнительныеПараметрыОповещения);
		
		ДополнительныеПараметрыПечатиЧека = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации();
		
		ДополнительныеПараметрыПечатиЧека.ОповещениеПослеОткрытииЧека   = ОповещениеПослеОткрытииЧека;
		ДополнительныеПараметрыПечатиЧека.ОповещениеПриОшибкеПечатиЧека = ОповещениеПриОшибкеПечатиЧека;
		
		Если ЭтоЧекКоррекции Тогда
			ДанныеКоррекции = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыДанныеКоррекции();
			
			ДанныеКоррекции.ТипКоррекции      = 0;
			ДанныеКоррекции.НомерПредписания  = "0";
			ДанныеКоррекции.ОписаниеКоррекции = ДополнительныеПараметры.ПараметрыОплаты.ОснованиеКоррекции;
			ДанныеКоррекции.ДатаКоррекции     = Объект.Дата;
			
			ПараметрыЧекаКоррекции = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыОперацииЧекаКоррекции();
			
			ПараметрыЧекаКоррекции.КорректируемыйДокумент = Объект.Ссылка;
			ПараметрыЧекаКоррекции.НеприменениеККТ        = Ложь;
			
			ЗаполнитьЗначенияСвойств(ПараметрыЧекаКоррекции.ДанныеКоррекции, ДанныеКоррекции);
			ЗаполнитьЗначенияСвойств(ПараметрыЧекаКоррекции, ДополнительныеПараметры.ПараметрыПечатиЧека);
			
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(
				ОповещениеПриЗавершенииПечатиЧека, 
				УникальныйИдентификатор, 
				ДополнительныеПараметры.ИдентификаторУстройства,
				ПараметрыЧекаКоррекции, 
				ДополнительныеПараметрыПечатиЧека);
		Иначе
				
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
				ОповещениеПриЗавершенииПечатиЧека, 
				УникальныйИдентификатор, 
				ДополнительныеПараметры.ИдентификаторУстройства,
				ДополнительныеПараметры.ПараметрыПечатиЧека, 
				ДополнительныеПараметрыПечатиЧека);
				
		КонецЕсли; 
	Иначе
		ПечатьЧекаЗавершение(Новый Структура("Результат", Истина), ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерЧекаККМ(Организация, Склад, ИдентификаторУстройства, ДатаДокумента)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("Склад",                   Склад);
	Запрос.УстановитьПараметр("ИдентификаторУстройства", 
		?(ЗначениеЗаполнено(ИдентификаторУстройства), ИдентификаторУстройства, Справочники.ПодключаемоеОборудование.ПустаяСсылка()));
		
	Запрос.УстановитьПараметр("НачалоГода",             НачалоГода(ДатаДокумента));
	Запрос.УстановитьПараметр("КонецГода",              КонецГода(ДатаДокумента));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РозничнаяПродажа.НомерЧекаККМ КАК НомерЧекаККМ
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|ГДЕ
	|	РозничнаяПродажа.Организация = &Организация
	|	И РозничнаяПродажа.ИдентификаторУстройства = &ИдентификаторУстройства
	|	И РозничнаяПродажа.Склад = &Склад
	|	И РозничнаяПродажа.Дата МЕЖДУ &НачалоГода И &КонецГода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЧекаККМ УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат ?(РезультатЗапроса.Следующий(), РезультатЗапроса.НомерЧекаККМ + 1, 1);
КонецФункции 

&НаКлиенте
Процедура ОтменаАвторизацииЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции отмены авторизации произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПечатьЧекаЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	Перем ВыходныеПараметры, ИдентификаторУстройства;
	
	ЭтотОбъект.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		
		// Отменяем авторизацию по карте если не удалось напечать чек
		Если ДополнительныеПараметры.Свойство("ИдентификаторУстройстваЭТ") 
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторУстройстваЭТ) 
			И ДополнительныеПараметры.Свойство("РезультатыОплатыКартой") Тогда
			
			ОповещениеПриЗавершенииОперации = Новый ОписаниеОповещения("ОтменаАвторизацииЗавершение", ЭтотОбъект);
			
			ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
			ПараметрыОперации.ДокументОснование = РозничнаяПродажаСсылка;
			
			ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
			
			ПараметрыОперации.СсылочныйНомер = ДополнительныеПараметры.РезультатыОплатыКартой.СсылочныйНомер;
			ПараметрыОперации.НомерКарты     = ДополнительныеПараметры.РезультатыОплатыКартой.НомерКарты;
			ПараметрыОперации.НомерЧекаЭТ    = ДополнительныеПараметры.РезультатыОплатыКартой.НомерЧекаЭТ;
			ПараметрыОперации.СуммаОперации  = ДополнительныеПараметры.ОплатаКарта;
			
			ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОповещениеПриЗавершенииОперации, УникальныйИдентификатор, 
				ДополнительныеПараметры.ИдентификаторУстройстваЭТ, ПараметрыОперации,, ДополнительныеПараметры.ИдентификаторУстройства);
		КонецЕсли; 
	Иначе
		// Получить номер чека, если номер чека не задан - записываем текущий номер документа
		Если НЕ ЭтоЧекКоррекции Тогда
			Объект.НомерЧекаККМ = ?(РезультатВыполнения.Свойство("ВыходныеПараметры", ВыходныеПараметры), 
				ВыходныеПараметры[1], 
				НомерЧекаККМ(Объект.Организация, Объект.Склад, Объект.ИдентификаторУстройства, Объект.Дата));
		КонецЕсли; 
			
		Объект.ИдентификаторУстройства = ?(РезультатВыполнения.Свойство("ИдентификаторУстройства", ИдентификаторУстройства), ИдентификаторУстройства, Неопределено);
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
		Записать(ПараметрыЗаписи);
		
		Если ВестиУчетМаркируемойПродукцииИСМП Тогда
			ШтрихкодированиеИСМПВызовСервера.ОчиститьРезультатыПроверкиСредствамиККТ(Объект.Ссылка);
		КонецЕсли; 
		
		Если ДополнительныеПараметры.ПараметрыОплаты.ПечататьТоварныйЧек Тогда
			ОбъектыПечати = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.РозничнаяПродажа", "ТоварныйЧек", ОбъектыПечати, ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(ОбъектыПечати));
		КонецЕсли;
		
		Если ДополнительныеПараметры.ОплатаСертификатНСПК > 0 Тогда
			ПараметрыОплатыЭС = Новый Структура;
			ПараметрыОплатыЭС.Вставить("ИдентификаторУстройстваЭТ", ДополнительныеПараметры.ИдентификаторУстройстваЭТ);
			ПараметрыОплатыЭС.Вставить("ОплатаВсего",               ДополнительныеПараметры.ОплатаСертификатНСПК + ДополнительныеПараметры.ОплатаКарта);
			ПараметрыОплатыЭС.Вставить("ОплатаСертификатНСПК",      ДополнительныеПараметры.ОплатаСертификатНСПК);
			ПараметрыОплатыЭС.Вставить("ИдентификаторКорзины",      ДополнительныеПараметры.ПараметрыОплаты.ИдентификаторКорзины); 
			
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПередачаДанныхФискальногоЧекаЗавершение", ЭтотОбъект, ПараметрыОплатыЭС);
			
			ПечатьФискальныхДокументовКлиент.НачатьПередачуДанныхФискальногоЧека(
				РозничнаяПродажаСсылка, ПараметрыОплатыЭС.ИдентификаторУстройстваЭТ,
				ПараметрыОплатыЭС.ИдентификаторКорзины, ОповещениеПриЗавершении);
				
			Возврат;
		КонецЕсли; 
		
		ПередачаДанныхФискальногоЧекаЗавершение(Новый Структура("Результат", Истина), Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидОплатыПоОборудованию(ПодключаемоеОборудование, Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодключаемоеОборудование", ПодключаемоеОборудование);
	Запрос.УстановитьПараметр("Организация",              Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОплатОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.ПодключаемоеОборудование = &ПодключаемоеОборудование
	|	И ВидыОплатОрганизаций.Организация = &Организация
	|	И НЕ ВидыОплатОрганизаций.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат Выборка.Ссылка;
КонецФункции

&НаКлиенте
Процедура ПередачаДанныхФискальногоЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
		ПоказатьОповещениеПользователя(ТекстСообщения);
		
		Закрыть();
		Возврат;
	КонецЕсли; 
	
	ОповещениеПриЗавершении = НОвый ОписаниеОповещения("ПовторнаяПередачаЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОповещениеПриЗавершении, Результат.ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Повторить отправку?'"), РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПередачаЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОповещениеПриЗавершении = НОвый ОписаниеОповещения("ПередачаДанныхФискальногоЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПечатьФискальныхДокументовКлиент.НачатьПередачуДанныхФискальногоЧека(
			Объект.Ссылка, ДополнительныеПараметры.ИдентификаторУстройстваЭТ, 
			ДополнительныеПараметры.ИдентификаторКорзины,ОповещениеПриЗавершении);
	Иначе
		Закрыть();
	КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Процедура НачатьОперациюНаФискальномУстройстве(ДополнительныеПараметры) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ТипУстройства") = "ККТ" Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПолучитьПараметрыФискальногоУстройстваЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		// Добавим ККТ в массив типов оборудования, чтобы оно отключилось при закрытии формы
		ОборудованиеМассив = СтрРазделить(ПоддерживаемыеТипыПодключаемогоОборудования, ",", Ложь);
		ОборудованиеМассив.Добавить("ККТ");
		ПоддерживаемыеТипыПодключаемогоОборудования = СтрСоединить(ОборудованиеМассив, ",");
		
		// ККТ должен быть подключен в единой сессии на протяжении всех этапов пробития чека для корректной работы маркировки
		ДополнительныеПараметрыОперации = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации(Истина);
		ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПолучениеПараметровФискальногоУстройства(
			ОповещениеПриЗавершении, УникальныйИдентификатор , ДополнительныеПараметры.ИдентификаторУстройства,,ДополнительныеПараметрыОперации);
	Иначе
		ПолучитьПараметрыФискальногоУстройстваЗавершение(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФискальноеУстройство(ПараметрыОбъекта)
	
	Если СписокОборудованияПечатьЧека.Количество() = 1 Тогда
		
		ВыбратьФискальноеУстройствоЗавершение(СписокОборудованияПечатьЧека[0].Значение, ПараметрыОбъекта);
		
	ИначеЕсли СписокОборудованияПечатьЧека.Количество() > 0 Тогда
		СтруктураОтбора = Новый Структура("Ссылка", СписокОборудованияПечатьЧека.ВыгрузитьЗначения());
		
		ПараметрыФормыВыбора = Новый Структура("Отбор, Заголовок", СтруктураОтбора, НСтр("ru='Выберите ККТ (принтер чеков)'", "ru") );
		
		ОповещениеПриЗавершенииВыбора = Новый ОписаниеОповещения("ВыбратьФискальноеУстройствоЗавершение", ЭтотОбъект, ПараметрыОбъекта);
		
		ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораИзСписка", ПараметрыФормыВыбора,ЭтотОбъект,УникальныйИдентификатор,,,ОповещениеПриЗавершенииВыбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыбратьФискальноеУстройствоЗавершение(Неопределено, ПараметрыОбъекта);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаССертификатами491ФЗ

&НаКлиенте
Процедура ПринятьОплатуСертификатыНСПК(СписокТоваровОплатаСертификатом, ПараметрыФормыОплаты)
	ПараметрыПроверки = Новый Структура;
	
	ПараметрыПроверки.Вставить("ТоварныеПозиции", СписокТоваровОплатаСертификатом);
	ПараметрыПроверки.Вставить("ЭтоВозврат",      ЭтоВозврат);
	ПараметрыПроверки.Вставить("Форма",           ЭтотОбъект);
	// Для записи в регистр платежных операций
	ПараметрыПроверки.Вставить("Ссылка",          РозничнаяПродажаСсылка);
	
	// Флаг ИспользуютсяСертификатыНСПК гарантирует что в списке оборудования только один терминал и на нем включена поддержка НСПК
	ПараметрыПроверки.Вставить("ИдентификаторУстройстваЭТ", СписокОборудованияПлатежнаяКарта[0].Значение);
	
	ПараметрыПроверки.Вставить("ОповещениеПриЗавершении", 
		Новый ОписаниеОповещения("ПроверкаСертификатаЗавершение", ЭтотОбъект, ПараметрыФормыОплаты));
	
	Если НЕ ЭтоВозврат Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПроверкаСертификатаНСПКЗавершение",
			ПечатьФискальныхДокументовКлиент, ПараметрыПроверки);
		
		ТекстВопроса =
			НСтр("ru = 'Документ содержит социально значимые товары, которые можно оплатить электронным сертификатом на карте МИР.'")
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru = 'Для проверки возможности использования сертификата используйте карту МИР.'");
		
		СписокВариантов = Новый СписокЗначений;
		СписокВариантов.Добавить("ПроверитьСертификат", "Проверить сертификат");
		СписокВариантов.Добавить("БезСертификата",      "Продолжить без сертификата");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокВариантов);
		Возврат;
	КонецЕсли;
	
	// Для возврата - поищем идентификатор корзины в исходном чеке
	ИдентификаторКорзины = Неопределено;
	Для каждого СтрокаОплаты Из Объект.Оплата Цикл
		Если ЗначениеЗаполнено(СтрокаОплаты.ИдентификаторКорзины) Тогда
			ИдентификаторКорзины = СтрокаОплаты.ИдентификаторКорзины;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторКорзины) Тогда
		// Получим состав корзины и сумму доступную к возврату (с учетом возможных предыдущих частичных возвратов)
		ПечатьФискальныхДокументовКлиент.ПолучитьСоставКорзины(ИдентификаторКорзины, ПараметрыПроверки);
	Иначе
		// не нашли идентификатор корзины в исходном чеке (либо продажа из другой программы, либо оплачено не сертификатом)
		// в этом случае предложим пользователю либо явно ввести идентификатор либо подтвержить что продажа была без сертификата
		ПечатьФискальныхДокументовКлиент.ПолучитьИдентификаторКорзины(ПараметрыПроверки);
	КонецЕсли

КонецПроцедуры // ПринятьОплатуСертификатыНСПК()


&НаСервереБезКонтекста 
Функция СписокТоваровОплатаСертификатом(Знач ТаблицаТовары, СуммаВключаетНДС)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары.Выгрузить());
	Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РозничнаяПродажаТовары.Номенклатура КАК Номенклатура,
	|	РозничнаяПродажаТовары.Количество КАК Количество,
	|	РозничнаяПродажаТовары.Цена КАК Цена,
	|	РозничнаяПродажаТовары.Сумма КАК Сумма,
	|	РозничнаяПродажаТовары.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&ТаблицаТовары КАК РозничнаяПродажаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.КодВидаТРУ КАК КодТовараТРУ,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.Артикул <> """"
	|			ТОГДА СправочникНоменклатура.Артикул
	|		ИНАЧЕ СправочникНоменклатура.Код
	|	КОНЕЦ КАК Артикул,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|			ТОГДА ВТ_Товары.Цена
	|		КОГДА ВТ_Товары.Количество <> 0
	|			ТОГДА (ВТ_Товары.Сумма + ВТ_Товары.СуммаНДС) / ВТ_Товары.Количество
	|		ИНАЧЕ ВТ_Товары.Сумма + ВТ_Товары.СуммаНДС
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.КодВидаТРУ <> """"";
	
	ТоварныеПозиции = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТоварнаяПозиция = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыТоварнойПозиции();
		
		ТоварнаяПозиция.НомерПозиции         = ТоварныеПозиции.Количество() + 1;
		ТоварнаяПозиция.НомерПозицииВозврата = "";
		ТоварнаяПозиция.Артикул              = Выборка.Артикул;
		ТоварнаяПозиция.КодТовараТРУ         = Выборка.КодТовараТРУ;
		ТоварнаяПозиция.Количество           = Выборка.Количество;
		ТоварнаяПозиция.Цена                 = Окр(Выборка.Цена, 2);
		
		ТоварныеПозиции.Добавить(ТоварнаяПозиция);
	КонецЦикла; 
	
	Возврат ТоварныеПозиции;
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОплатыЭС(ДокументСсылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РозничнаяПродажаОплата.СуммаСертификатамиНСПК КАК ОплатаСертификатНСПК,
	|	РозничнаяПродажаОплата.ИдентификаторКорзины КАК ИдентификаторКорзины,
	|	РозничнаяПродажаОплата.ВидОплаты.ПодключаемоеОборудование КАК ИдентификаторУстройстваЭТ,
	|	РозничнаяПродажаОплата.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ОплатаСертификаты
	|ИЗ
	|	Документ.РозничнаяПродажа.Оплата КАК РозничнаяПродажаОплата
	|ГДЕ
	|	РозничнаяПродажаОплата.Ссылка = &ДокументСсылка
	|	И РозничнаяПродажаОплата.СуммаСертификатамиНСПК > 0
	|	И РозничнаяПродажаОплата.ИдентификаторКорзины <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОплатаСертификаты.ОплатаСертификатНСПК КАК ОплатаСертификатНСПК,
	|	ВТ_ОплатаСертификаты.ИдентификаторКорзины КАК ИдентификаторКорзины,
	|	ВТ_ОплатаСертификаты.ИдентификаторУстройстваЭТ КАК ИдентификаторУстройстваЭТ,
	|	ЕСТЬNULL(РозничнаяПродажа.СуммаДокумента, ВТ_ОплатаСертификаты.ОплатаСертификатНСПК) КАК ОплатаВсего
	|ИЗ
	|	ВТ_ОплатаСертификаты КАК ВТ_ОплатаСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО ВТ_ОплатаСертификаты.Ссылка = РозничнаяПродажа.Ссылка";
	
	Результат  = Новый Структура;
	Результат.Вставить("ОплатаВсего", 0);
	Результат.Вставить("ОплатаСертификатНСПК", 0);
	Результат.Вставить("ИдентификаторКорзины", "");
	Результат.Вставить("ИдентификаторУстройстваЭТ");
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультата.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаРезультата);
	КонецЕсли; 

	Возврат Результат;
КонецФункции


#КонецОбласти

#Область ГосИС

// Возвращает соотвествие данные кодов маркировки в разрезе штрихкодов упаковок
&НаСервере
Функция РезультатРаспределенияКодовМаркировки(СообщениеОбОшибке) 
	Результат = Новый Соответствие;
	
	ТаблицаТовары = Новый ТаблицаЗначений();
	ТаблицаТовары.Колонки.Добавить("Номенклатура",       Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика",     Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Серия",              Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Упаковка",           Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаТовары.Колонки.Добавить("Склад",              Метаданные.ОпределяемыеТипы.Склад.Тип);
	ТаблицаТовары.Колонки.Добавить("Количество",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаТовары.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	МассивУпаковок = Новый Массив;
	Для каждого СтрокаТаблицыДокумента  Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыДокумента.АкцизнаяМарка) Тогда 
			НоваяСтрокаТаблицаТовары = ТаблицаТовары.Добавить();
			
			НоваяСтрокаТаблицаТовары.Номенклатура       = СтрокаТаблицыДокумента.Номенклатура;
			НоваяСтрокаТаблицаТовары.Склад              = Объект.Склад;
			НоваяСтрокаТаблицаТовары.Количество         = СтрокаТаблицыДокумента.Количество;
			НоваяСтрокаТаблицаТовары.КоличествоУпаковок = СтрокаТаблицыДокумента.Количество;
			
			ЭлементКоллекцииУпаковок = ШтрихкодированиеИСМП.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам();
			
			ЭлементКоллекцииУпаковок.ШтрихкодУпаковки                             = СтрокаТаблицыДокумента.АкцизнаяМарка;
			ЭлементКоллекцииУпаковок.ЧастичноеВыбытиеКоличество                   = СтрокаТаблицыДокумента.ЧастичноеВыбытиеКоличество;
			ЭлементКоллекцииУпаковок.ЧастичноеВыбытиеВариантУчета                 = СтрокаТаблицыДокумента.ЧастичноеВыбытиеВариантУчета;
			ЭлементКоллекцииУпаковок.ЧастичноеВыбытиеНоменклатура                 = СтрокаТаблицыДокумента.ЧастичноеВыбытиеНоменклатура;
			ЭлементКоллекцииУпаковок.РазрешительныйРежимИдентификаторЗапросаГИСМТ = СтрокаТаблицыДокумента.РазрешительныйРежимИдентификаторЗапросаГИСМТ;
			ЭлементКоллекцииУпаковок.РазрешительныйРежимДатаЗапросаГИСМТ          = СтрокаТаблицыДокумента.РазрешительныйРежимДатаЗапросаГИСМТ;
			
			МассивУпаковок.Добавить(ЭлементКоллекцииУпаковок);
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаТовары.Свернуть("Номенклатура, Характеристика, Серия, Упаковка, Склад", "Количество, КоличествоУпаковок");
	
	Если МассивУпаковок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ПараметрыРаспределения = ШтрихкодированиеИСМП.НовыеПараметрыРаспределенияШтрихкодовУпаковок();
	
	ПараметрыРаспределения.ПараметрыУказанияСерий = Новый Структура;
	ПараметрыРаспределения.ДокументСсылка         = Объект;

	РезультатРаспределения = 
		ШтрихкодированиеИСМП.РаспределениеШтрихкодовУпаковокПоТоварам(ПараметрыРаспределения, ТаблицаТовары, МассивУпаковок);
		
	Если РезультатРаспределения.ЕстьОшибки Тогда
			
		СообщениеОбОшибке = СтрСоединить(РезультатРаспределения.Ошибки, Символы.ПС);
		
	ИначеЕсли РезультатРаспределения.СтрокиБезШтрихкодов.Количество() > 0 Тогда
		
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Не удалось определить штрихкоды для %1 позиций номенклатуры'"), 
			РезультатРаспределения.СтрокиБезШтрихкодов.Количество());
			
	Иначе
		Для каждого КлючИЗначение Из РезультатРаспределения.РаспределенныеСтроки Цикл
			Для каждого РезультатРаспределения Из КлючИЗначение.Значение Цикл
				Результат.Вставить(РезультатРаспределения.ШтрихкодУпаковки, РезультатРаспределения);
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Результат
КонецФункции

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ДанныеШтрихкодов = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ИсходныеДанные, Ложь);
	Если Не ДанныеШтрихкодов.Свойство("ФорматBase64") Или Не ДанныеШтрихкодов.ФорматBase64 Тогда
		ДанныеШтрихкодов.Вставить("ФорматBase64", Истина);
		ДанныеШтрихкодов.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ИсходныеДанные.Штрихкод);
	КонецЕсли;
	
	РезультатОбработки = ОбработатьВводШтрихкода(ДанныеШтрихкодов, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода(
		"ОбработкаКодаМаркировкиВыполнитьДействие",
		"ОбработатьКодМаркировки",
		"Подключаемый_ПослеОбработкиШтрихкодов");
	
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
		
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецФункции

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода,КэшированныеЗначения) Экспорт
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		Если ТипЗнч(РезультатОбработкиШтрихкода.ИсходныеДанные) = Тип("Структура") Тогда
			ДанныеШтрихкодов = Новый Массив;
			ДанныеШтрихкодов.Добавить(РезультатОбработкиШтрихкода.ИсходныеДанные);
		Иначе
			ДанныеШтрихкодов = РезультатОбработкиШтрихкода.ИсходныеДанные;
		КонецЕсли;
		
		ВидыПродукцииИС = Новый Массив(ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции());
		
		Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
			ВидыПродукцииИС.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
		КонецЕсли;
		
		ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(ВидыПродукцииИС);
		
		
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц   = Истина;
		ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ       = Истина;
		
		//ШтрихкодированиеИС
		ДанныеДляОбработки = Неопределено;
		ШтрихкодированиеИСПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
			ЭтотОбъект, ДанныеШтрихкодов, ПараметрыЗаполнения, ДанныеДляОбработки);
		
		//ШтрихкодированиеИС
		ШтрихкодированиеИСПереопределяемый.ОбработатьШтрихкоды(
			ЭтотОбъект, ДанныеДляОбработки, КэшированныеЗначения);
		
		// Если это не алкогольная продукция, и номенклатура по штрихкоду найдена - добавим ее
		Если ДанныеДляОбработки.МассивСтрокСАкцизнымиМарками.Количество() = 0
				И ДанныеДляОбработки.ТекущаяСтрока <> Неопределено Тогда
			
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДанныеДляОбработки.ТекущаяСтрока);
			
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтавкаНДС) Тогда
				РезультатОбработкиШтрихкода.ДобавленныеСтроки.Добавить(ТекущаяСтрока);
			Иначе
				РезультатОбработкиШтрихкода.ИзмененныеСтроки.Добавить(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработатьСтрокиТЧ(
		РезультатОбработкиШтрихкода.ДобавленныеСтроки,
		РезультатОбработкиШтрихкода.ИзмененныеСтроки,
		КэшированныеЗначения);
		
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования) Экспорт
	
	//ШтрихкодированиеИС
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//ШтрихкодированиеИС
&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодов(
		РезультатОбработкиШтрихкода,
		КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//ШтрихкодированиеИС
&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов(РезультатОбработкиШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		ШтрихкодированиеИСКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
			ЭтотОбъект,
			ДанныеДляОбработки,
			КэшированныеЗначения);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормой

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения)
	Перем СведенияОСпискеНоменклатуры;
	
	МассивНоменклатуры = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивНоменклатуры, 
	 	ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина),
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивНоменклатуры, 
		ОбщегоНазначения.ВыгрузитьКолонку(ИзмененныеСтроки, "Номенклатура", Истина), 
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(МассивНоменклатуры, Справочники.Номенклатура.ПустаяСсылка());
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ТипЦен, СуммаВключаетНДС, ДокументБезНДС");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Реализация",       Истина);
	ДанныеОбъекта.Вставить("РозничнаяПродажа", Истина);
	
	Если МассивНоменклатуры.Количество() > 0 Тогда
		СведенияОСпискеНоменклатуры = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(МассивНоменклатуры, ДанныеОбъекта, Ложь, Истина);
	Иначе
		СведенияОСпискеНоменклатуры = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[СтрокаТабличнойЧасти.Номенклатура];
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
			ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
		Иначе
			ЦенаВключаетНДС = ДанныеОбъекта.СуммаВключаетНДС;
		КонецЕсли;
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СведенияОНоменклатуре.Цена, ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
		КонецЕсли;
		
		Если ЦенаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИзмененныеСтроки, ДобавленныеСтроки);
	
	Для каждого СтрокаТабличнойЧасти Из ИзмененныеСтроки Цикл
		СведенияОНоменклатуре = СведенияОСпискеНоменклатуры[СтрокаТабличнойЧасти.Номенклатура];
		
		РассчитатьСуммыПоСтроке(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
		
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
	КонецЦикла; 
КонецПроцедуры 

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыФормаОплата()
	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("СписокОборудованияПечатьЧека",     СписокОборудованияПечатьЧека.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("СписокОборудованияПлатежнаяКарта", СписокОборудованияПлатежнаяКарта.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("АдресТаблицаОплата",               ПоместитьВоВременноеХранилище(Объект.Оплата.Выгрузить(), УникальныйИдентификатор));
	ПараметрыФормы.Вставить("СуммаСертификатамиНСПК",           0);
	ПараметрыФормы.Вставить("ИдентификаторКорзины",             Неопределено);
	
	Возврат ПараметрыФормы;
КонецФункции 

&НаСервере
Функция ПолучитьСведенияОСпискеНоменклатуры(ТаблицаТоваров)
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад, ДокументБезНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("Реализация",       Истина);
	ДанныеОбъекта.Вставить("РозничнаяПродажа", Истина);
	
	СписокНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина);
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ДанныеОбъекта, Ложь, Ложь);
КонецФункции 

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("ТипЦен, СуммаВключаетНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = ПолучитьСведенияОСпискеНоменклатуры(ТаблицаТоваров);
		
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		ДанныеСтроки = НовыйСтрокаТовары();
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТовара);
		
		ДобавитьНоменклатуруНаСервере(
			ДанныеСтроки, 
			СоответствиеСведенийОНоменклатуре[ДанныеСтроки.Номенклатура], 
			ДанныеОбъекта, 
			ИмяТаблицы);
			
	КонецЦикла;
	
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуруНаСервере(СтрокаТовара, СведенияОНоменклатуре, ДанныеОбъекта, ИмяТаблицы)
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = ДанныеОбъекта.СуммаВключаетНДС;
	КонецЕсли;
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Цена = СтрокаТовара.Цена;
	Иначе
		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			СтрокаТовара.Цена, ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Номенклатура, КиЗ_ГИСМ, АкцизнаяМарка, Цена", 
		СтрокаТовара.Номенклатура, 
		?(ЗначениеЗаполнено(СтрокаТовара.КиЗ_ГИСМ),СтрокаТовара.КиЗ_ГИСМ, Справочники.КонтрольныеЗнакиГИСМ.ПустаяСсылка()), 
		СтрокаТовара.АкцизнаяМарка,
		Окр(Цена,2,1));
		
	СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти("Товары", СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли - увеличиваем количество.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	Иначе
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
				
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		КонецЕсли;
		
		Если ЦенаВключаетНДС <> ДанныеОбъекта.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, ДанныеОбъекта.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЕсли;
	
	// Рассчитываем реквизиты табличной части
	ДанныеСтроки = Новый Структура("Сумма, СуммаСкидки, ПроцентСкидки", 0, 0, 0);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	
	ДанныеСтроки.СуммаСкидки = Окр(ДанныеСтроки.Сумма * ДанныеСтроки.ПроцентСкидки / 100, 2);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки,,"Сумма");
	
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
										ДанныеСтроки.Сумма - ДанныеСтроки.СуммаСкидки,
										ДанныеОбъекта.СуммаВключаетНДС,
										УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
										
	
	Если Объект.СуммаСкидки > 0  Тогда
		РаспределитьСуммуСкидки(ЭтотОбъект);
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТабличнойЧасти(ИмяТабличнойЧасти, СтруктураОтбора)

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	Если ДанныеОбъекта.ЭтоВозврат 
		И ЗначениеЗаполнено(ДанныеОбъекта.Основание) Тогда
		
		ДанныеОбъекта.Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Основание, "Дата");
	КонецЕсли;
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЭтоУслуга  = СведенияОНоменклатуре.Услуга;
	СтрокаТабличнойЧасти.ЭтоАлкогольнаяПродукция = СведенияОНоменклатуре.АлкогольнаяПродукция;
	Если СведенияОНоменклатуре.Цена <> 0 Тогда
		СтрокаТабличнойЧасти.Цена   = СведенияОНоменклатуре.Цена;
	КонецЕсли;
	СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
	Если СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ 
		ИЛИ СведенияОНоменклатуре.АлкогольнаяПродукция
		ИЛИ СведенияОНоменклатуре.МаркируемаяПродукция Тогда
		
		СтрокаТабличнойЧасти.Количество  = 1;
	КонецЕсли;
	
	РассчитатьСуммыПоСтроке(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ?(СтрокаТабличнойЧасти.ЭтоУслуга, 1, 0));
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, СведенияОНоменклатуре);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыПоСтроке(СтрокаТабличнойЧасти, СуммаВключаетНДС, ЗначениеПустогоКоличества = 0)
	ДанныеСтроки = Новый Структура("Количество, Цена, Сумма, СуммаСкидки, ПроцентСкидки, СтавкаНДС, СуммаНДС", 0, 0, 0, 0,0);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(ДанныеСтроки, ЗначениеПустогоКоличества);
	Если ДанныеСтроки.ПроцентСкидки <> 0 Тогда
		ДанныеСтроки.СуммаСкидки = Окр(ДанныеСтроки.Сумма * ДанныеСтроки.ПроцентСкидки / 100, 2);
	Иначе
		ДанныеСтроки.СуммаСкидки = 0;
	КонецЕсли;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтроки, СуммаВключаетНДС);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, СуммаВключаетНДС, СведенияОНоменклатуре)
	РассчитатьВсегоПоСтроке(СтрокаТаблицы, СуммаВключаетНДС);
	
	Если СведенияОНоменклатуре <> Неопределено Тогда
		СтрокаТаблицы.ЭтоУслуга                   = СведенияОНоменклатуре.Услуга;
		СтрокаТаблицы.ЭтоАлкогольнаяПродукция     = СведенияОНоменклатуре.АлкогольнаяПродукция;
		СтрокаТаблицы.ПродукцияМаркируемаяДляГИСМ = СведенияОНоменклатуре.ПродукцияМаркируемаяДляГИСМ;
		
		СтрокаТаблицы.ЭтоМаркируемаяПродукция     = СведенияОНоменклатуре.МаркируемаяПродукция; 
		СтрокаТаблицы.ВидПродукцииИС         = СведенияОНоменклатуре.ВидПродукцииИС; 
	КонецЕсли;
	
	СтрокаТаблицы.ИндексАкцизнойМарки = ?(ЗначениеЗаполнено(СтрокаТаблицы.АкцизнаяМарка), 1, 0);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АгентскиеУслугиНоменклатураПриИзмененииНаСервере(СтрокаТаблицы, Знач ДанныеОбъекта)
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
	
	Если ДанныеОбъекта.ЭтоВозврат И ЗначениеЗаполнено(ДанныеОбъекта.Основание) Тогда
		ДанныеОбъекта.Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Основание, "Дата");
	КонецЕсли;

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТаблицы.Номенклатура, ДанныеОбъекта, Ложь);
		
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТаблицы.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТаблицы.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, 1);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, ДанныеОбъекта.СуммаВключаетНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, СуммаВключаетНДС)
	
	СтрокаТаблицы.Всего = ?(СуммаВключаетНДС, СтрокаТаблицы.Сумма, СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	СоответствиеСведенийОНоменклатуре = ПолучитьСведенияОСпискеНоменклатуры(Объект.Товары);
		
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыТовары(СтрокаТаблицы, Объект.СуммаВключаетНДС, СведенияОНоменклатуре);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиТаблицыАгентскиеУслуги(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	РеквизитыСклад   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "ТипЦенРозничнойТорговли, ТипЦенРозничнойТорговли.ЦенаВключаетНДС");
	
	ПересчитатьНДС  = Ложь;
	ПересчитатьЦены = (Объект.ТипЦен <> РеквизитыСклад.ТипЦенРозничнойТорговли);
	
	Объект.ТипЦен           = РеквизитыСклад.ТипЦенРозничнойТорговли;
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПересчитатьНДС  = (Объект.СуммаВключаетНДС <> РеквизитыСклад.ТипЦенРозничнойТорговлиЦенаВключаетНДС);
		Объект.СуммаВключаетНДС = РеквизитыСклад.ТипЦенРозничнойТорговлиЦенаВключаетНДС;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		ОрганизацияЕГАИС = ИнтеграцияЕГАИСБПВызовСервера.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(Объект.Организация, Объект.Склад);
	Иначе
		ОрганизацияЕГАИС = Неопределено;
	КонецЕсли;
	
	ЗаполнитьРассчитатьСуммы(ПересчитатьЦены, ПересчитатьНДС);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьСписокНалоговыхРежимов();
	
	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры 

&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ЭтоУслуга = ИмяТабЧасти = "АгентскиеУслуги" ИЛИ СтрокаТаблицы.ЭтоУслуга;
	ЗначениеПустогоКоличества = ?(ЭтоУслуга, 1, 0);
	
	РассчитатьСуммыПоСтроке(СтрокаТаблицы, Объект.СуммаВключаетНДС, ЗначениеПустогоКоличества);

	РассчитатьВсегоПоСтроке(СтрокаТаблицы, Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСумма(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтрокаТаблицы.Количество = 0 Тогда
		ЭтоУслуга = ИмяТабЧасти = "АгентскиеУслуги" ИЛИ (ИмяТабЧасти = "Товары" И СтрокаТаблицы.ЭтоУслуга);
		Если ЭтоУслуга Тогда
			СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.Цена = 0;
		КонецЕсли;
	Иначе
		СтрокаТаблицы.Цена = СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество;
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура("Сумма, СуммаСкидки, ПроцентСкидки, СтавкаНДС, СуммаНДС", 0, 0, 0);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);

	Если ДанныеСтроки.ПроцентСкидки <> 0 Тогда
		ДанныеСтроки.СуммаСкидки = Окр(ДанныеСтроки.Сумма * ДанныеСтроки.ПроцентСкидки / 100, 2);
	Иначе
		ДанныеСтроки.СуммаСкидки = 0;
	КонецЕсли;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтроки, Объект.СуммаВключаетНДС);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтроки);
	
	РассчитатьВсегоПоСтроке(СтрокаТаблицы, Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтавкаНДС(ИмяТабЧасти)

	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ДанныеСтроки = Новый Структура("Сумма, СуммаСкидки", 0, 0);
	
	СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
										ДанныеСтроки.Сумма - ДанныеСтроки.СуммаСкидки,
										Объект.СуммаВключаетНДС,
										УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

	РассчитатьВсегоПоСтроке(СтрокаТаблицы, Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммаНДС(ИмяТабЧасти)
	СтрокаТаблицы = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Новый Структура("Сумма, СуммаСкидки", 0, 0);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
	
	СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
										ДанныеСтроки.Сумма - ДанныеСтроки.СуммаСкидки,
										Объект.СуммаВключаетНДС,
										УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

	
	РассчитатьВсегоПоСтроке(СтрокаТаблицы, Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АгентскиеУслугиКонтрагентПриИзмененииНаСервере(ДанныеСтрокаТаблицы, Знач ПараметрыОбъекта)

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДанныеСтрокаТаблицы.ДоговорКонтрагента, ДанныеСтрокаТаблицы.Контрагент, 
		ПараметрыОбъекта.Организация, Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораНоменклатура(Текст, ПараметрыПолученияДанных)
	ДанныеВыбора = Справочники.Номенклатура.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ТаблицаНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(Текст);
		Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
			ДанныеВыбора.Добавить(СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеВыбора;
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	Если ИспользуетсяФискальныйРегистратор И ИспользуетсяПростойИнтерфейс Тогда
		УправлениеКассовойСменойДоступно = КассовыеСменыВызовСервераБП.ДоступноУправлениеКассовойСменой();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		РозничнаяПродажаСсылка = Документы.РозничнаяПродажа.ПолучитьСсылку();
	Иначе
		РозничнаяПродажаСсылка = Объект.Ссылка;
	КонецЕсли;
	
	ЭтоВозврат = (Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат);
	
	// В возврате скидок нет
	Элементы.ГруппаСкидка.Видимость = НЕ ЭтоВозврат;
	Элементы.ТоварыГруппаСкидка.Видимость = НЕ ЭтоВозврат;
	
	СуммаСкидки = Объект.СуммаСкидки;
	
	Если СуммаСкидки > 0 Тогда
		ВидСкидки = 2;
	ИНачеЕсли Объект.Товары.Итог("СуммаСкидки") > 0 Тогда
		ВидСкидки = 1;
	Иначе
		ВидСкидки = 0;
	КонецЕсли;
	
	Если НЕ Объект.ОтчетОРозничныхПродажах.Пустая() Тогда
		ОтчетОРозничныхПродажах = Объект.ОтчетОРозничныхПродажах;
		ОтчетОРозничныхПродажахНаименование = ОтчетОРозничныхПродажах.Метаданные().Синоним;
		
		НадписьОтчетОРозничныхПродажах = СтрШаблон("%1 № %2 от %3 г.", ОтчетОРозничныхПродажахНаименование, ОтчетОРозничныхПродажах.Номер, Формат(ОтчетОРозничныхПродажах.Дата, "ДФ='дд ММММ гггг'"));
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(); 
	
	Если ИспользоватьПредоплатыВРознице Тогда
		ВидОперацииПредоплата = Перечисления.ВидыОперацийРозничнаяПродажа.Предоплата;
		
		ЭтоПредоплата = Объект.ВидОперации = ВидОперацииПредоплата;
		ЭтоВозвратПредоплаты = ЭтоВозврат 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Основание, "ВидОперации") = ВидОперацииПредоплата;
	КонецЕсли;
	
	Элементы.СчетПокупателю.Видимость = ЗначениеЗаполнено(Объект.СчетНаОплатуПокупателю);
	Элементы.ВидПредоплаты.Видимость = ЭтоПредоплата; 
	
	// Группу "Сумма к оплате" показываем только при продажах, предоплатах и возвратах предоплат
	Элементы.ГруппаКОплате.Видимость = ИспользоватьПредоплатыВРознице 
		И НЕ(ЭтоВозврат И НЕ ЭтоВозвратПредоплаты);
	
	Если ЭтоПредоплата Тогда
		ИтогВсего = Объект.Товары.Итог("Всего") 
			+ Объект.АгентскиеУслуги.Итог("Всего") 
			+ Объект.ПодарочныеСертификаты.Итог("Сумма");
		
		ПолнаяПредоплата = (Объект.СуммаПредоплаты = ИтогВсего);
		Элементы.СуммаПредоплаты.Заголовок = НСтр("ru = 'на сумму'");
	ИначеЕсли ЭтоВозврат Тогда
		Элементы.СуммаПредоплаты.Заголовок = НСтр("ru = 'Сумма оплат по сделке'");
		Элементы.СуммаПредоплаты.Подсказка = НСтр("ru = 
		|'Укажите сумму оплат, внесенных по сделке ранее. 
		|Сумма предоплат будет напечатана в кассовом чеке.'")
	Иначе
		Элементы.СуммаПредоплаты.Заголовок = НСтр("ru = 'Оплачено ранее'");
		Элементы.СуммаПредоплаты.Подсказка = НСтр("ru = 
		|'Укажите сумму оплат, внесенных по сделке ранее. 
		|Если оплат не было - оставьте поле пустым.
		|Сумма предоплат будет напечатана в кассовом чеке.'")
	КонецЕсли;
	
	ОбновитьСписокНалоговыхРежимов();
	
	УстановитьПараметрыВыбораВидаОплаты();
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	УстановитьЗаголовокКнопкиОплата();
КонецПроцедуры

&НаСервере
Функция УстановитьЗаголовокКнопкиОплата()
	Если ЭтоЧекКоррекции Тогда
		ТекстЗаголовка = НСтр("ru = 'Чек коррекции'");
	ИначеЕсли ЭтоВозврат Тогда
		ТекстЗаголовка = НСтр("ru = 'Вернуть средства'");
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Принять оплату'");
	КонецЕсли;
	
	Элементы.ФормаПринятьОплату.Заголовок = ТекстЗаголовка;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	ТекстЗаголовка = НСтр("ru = 'Чек'");
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2'"), Объект.Номер, Формат(Объект.Дата, "ДЛФ=D"));
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = ' (создание)'");
	КонецЕсли;
	
	Если НЕ Форма.ЭтоВозврат 
		И Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента") Тогда
		ВидОперации = НСтр("ru = 'Прием платежей'");
	Иначе
		ВидОперации = Строка(Объект.ВидОперации);
	КонецЕсли; 
	
	Форма.Заголовок = ТекстЗаголовка + " (" + ВидОперации + ")";
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаОплаты()
	ТипыОплатБезналичныеОплаты = Новый Массив;
	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПлатежнаяКарта);
	ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.БанковскийКредит);
	
	Если ИспользуютсяПодарочныеСертификаты Тогда
		
		ТипыОплатПодарочныеСертификаты = Новый Массив;
	
		ТипыОплатПодарочныеСертификаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
		ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
		
		Если ПрименяютсяДоговораСКомитентамиНаПродажу Тогда
			ТипыОплатПодарочныеСертификаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСторонний);
			ТипыОплатБезналичныеОплаты.Добавить(Перечисления.ТипыОплат.ПодарочныйСертификатСторонний);
		КонецЕсли;
		
		ПараметрыСертификатов = Новый Массив;
		ПараметрыСертификатов.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Новый ФиксированныйМассив(ТипыОплатПодарочныеСертификаты)));
		ПараметрыСертификатов.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));

		Элементы.ПодарочныеСертификатыВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыСертификатов);
		
	КонецЕсли;
	
	ПараметрыБезналичныхОплат = Новый Массив;
	
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.ТипОплаты", Новый ФиксированныйМассив(ТипыОплатБезналичныеОплаты)));
	ПараметрыБезналичныхОплат.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	
	Элементы.ОплатаВидОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыБезналичныхОплат);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоДоговорПлатежногоАгента = (Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента"));
	
	Элементы.СтраницаТовары.Видимость       = НЕ ЭтоДоговорПлатежногоАгента;
	Элементы.ПродажаСертификатов.Видимость = НЕ ЭтоДоговорПлатежногоАгента И НЕ Форма.ЭтоПредоплата;
	Элементы.ТоварыКиЗ_ГИСМ.Видимость       = Форма.ИспользоватьКонтрольныеЗнакиГИСМ;
	
	Элементы.ГруппаБаннерПробитЧек.Видимость    = ЗначениеЗаполнено(Объект.НомерЧекаККМ) 
		И НЕ Форма.ЭтоВозврат 
		И Форма.ЕстьПравоВводаЧекаКоррекции 
		И НЕ Форма.ЭтоЧекКоррекции
		И ПечатьФискальныхДокументовВызовСервера.ЕстьФискальныеОперацииПоДокументу(Объект.Ссылка, Истина);
		
	Форма.ТолькоПросмотр                    = Форма.ТолькоПросмотр ИЛИ (ЗначениеЗаполнено(Объект.НомерЧекаККМ) И НЕ Форма.ЭтоЧекКоррекции);
	Элементы.ФормаПринятьОплату.Видимость = НЕ Форма.ТолькоПросмотр;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ФормаЧекНаВозврат", 
		"Видимость", 
		ЗначениеЗаполнено(Объект.НомерЧекаККМ) И НЕ Форма.ЭтоВозврат И НЕ Форма.ЭтоЧекКоррекции);
		
	Элементы.Основание.Видимость            = Форма.ЭтоВозврат;
	
	Элементы.СистемаНалогообложения.Доступность = НЕ Объект.Организация.Пустая();
	
	Если (Форма.СписокНалоговыхРежимовДляПечатиЧека.Количество() = 1) И НЕ Объект.СистемаНалогообложения.Пустая() Тогда
		Элементы.СистемаНалогообложения.Вид                 = ВидПоляФормы.ПолеНадписи;
	Иначе
		Элементы.СистемаНалогообложения.Вид = ВидПоляФормы.ПолеВвода;
		Элементы.СистемаНалогообложения.РежимВыбораИзСписка = Истина;
		
		Элементы.СистемаНалогообложения.СписокВыбора.Очистить();
		Для каждого НалоговыйРежим Из Форма.СписокНалоговыхРежимовДляПечатиЧека Цикл
			Элементы.СистемаНалогообложения.СписокВыбора.Добавить(НалоговыйРежим.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	Элементы.СистемаНалогообложения.Видимость = Форма.ИспользуетсяСовмещениеНалоговыхРежимов ИЛИ Объект.СистемаНалогообложения.Пустая();
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	Элементы.СуммаСкидки.Видимость        = Форма.ВидСкидки = 2;
	
	Элементы.ИтогВсего.Заголовок = НСтр("ru = 'Всего'");
	Если Форма.ВидСкидки <> 0 Тогда
		Элементы.ИтогВсего.Заголовок = НСтр("ru = 'Всего со скидкой'");
	КонецЕсли; 
	
	Элементы.ИтогСкидка.Видимость    = Форма.ВидСкидки = 1;
	Элементы.СуммаПредоплаты.Доступность = НЕ Форма.ЭтоПредоплата ИЛИ НЕ Форма.ПолнаяПредоплата;
	
	ОбновитьИтоги(Форма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура(
		"СуммаВключаетНДС, ДокументБезНДС, ВалютаРегламентированногоУчета",
		Объект.СуммаВключаетНДС,
		Объект.ДокументБезНДС,
		Форма.ВалютаРегламентированногоУчета);
	Если Форма.ИспользоватьТипыЦенНоменклатуры Тогда
		СтруктураНадписи.Вставить("ТипЦен", Объект.ТипЦен);
	КонецЕсли;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтотОбъект);
	
	ВестиУчетМаркируемойПродукцииИСМП = ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	
	ИспользоватьПредоплатыВРознице = ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатыВРознице");
	
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры") 
		И ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры);

	ИспользуютсяПодарочныеСертификаты = ПолучитьФункциональнуюОпцию("ИспользуютсяПодарочныеСертификаты");
	
	// Флаги использования подключаемого оборудования
	ИспользоватьПодключаемоеОборудование =  МенеджерОборудованияБПВызовСервера.ИспользоватьПодключаемоеОборудование();
	
	ИспользуетсяФискальныйРегистратор = ИспользоватьПодключаемоеОборудование
		И ПолучитьФункциональнуюОпцию("ИспользоватьФискальныйРегистратор")
		И МенеджерОборудованияБП.ИспользуетсяОборудование("ККТ");
		
	ИспользуетсяСканерШтрихкодов      = ИспользоватьПодключаемоеОборудование 
		И МенеджерОборудованияБП.ИспользуетсяОборудование("СканерШтрихкода");
		
	ИспользуютсяДисплеиПокупателя = ИспользоватьПодключаемоеОборудование
		И МенеджерОборудованияБП.ИспользуетсяОборудование("ДисплейПокупателя");
		
	ПрименяютсяДоговораСКомитентамиНаПродажу = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	ПрименяетсяОсвобождениеОтУплатыНДС = УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Объект.Организация, Объект.Дата);
	
	// Взводим флаг если пользователь совмещает патент с какой либо СНО
	ИспользуетсяСовмещениеНалоговыхРежимов = 
		УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата) 
		И НЕ УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата);
	
	ИспользоватьКонтрольныеЗнакиГИСМ = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеЗнакиГИСМ")
									 И ИнтеграцияГИСМКлиентСерверБП.МожноИспользоватьКонтрольныеЗнакиГИСМ(Объект.Дата);
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = ПравоДоступа("Чтение", Метаданные.Справочники.КлассификаторОрганизацийЕГАИС) 
		И ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Объект.Организация, Объект.Склад, Объект.Дата);
		
	ИспользуетсяПростойИнтерфейс = ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой");
	
КонецПроцедуры
 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	Объект = Форма.Объект;
	
	Форма.ИтогВсего = Объект.Товары.Итог("Всего") + Объект.АгентскиеУслуги.Итог("Всего") + Объект.ПодарочныеСертификаты.Итог("Сумма");
	Форма.ИтогСкидка= Объект.Товары.Итог("СуммаСкидки");
	
	Если Форма.ПолнаяПредоплата 
		И Форма.ЭтоПредоплата 
		И Объект.СуммаПредоплаты <> Форма.ИтогВсего Тогда
		
		Объект.СуммаПредоплаты = Форма.ИтогВсего;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
	
	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Параметрыформы.Вставить("ПоказыватьЦены", Истина);
	КонецЕсли;
	
	Если ИмяТаблицы = "Товары" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"    , Истина);
		ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Истина);
	ИначеЕсли ИмяТаблицы = "АгентскиеУслуги" Тогда
		ПредставлениеТаблицы = НСтр("ru = 'Агентские услуги'");
		
		ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Ложь);
	КонецЕсли;
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ЕстьЦена"		, Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"	, ДатаРасчетов);
	ПараметрыФормы.Вставить("ТипЦен"		, Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"		, ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация"	, Объект.Организация);
	ПараметрыФормы.Вставить("Склад"			, Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"		, ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"	, ИмяТаблицы);
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ПараметрыФормы.Вставить("ЗаполнятьЦеныПоПродаже"	, Истина);
		ПараметрыФормы.Вставить("СуммаВключаетНДС"			, Объект.СуммаВключаетНДС);
		ПараметрыФормы.Вставить("Реализация"				, Истина);
	КонецЕсли;

	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда

		Форма.УстановитьУсловноеОформлениеТовары();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("АгентскиеУслугиПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаАгентскиеУслуги Тогда

		Форма.УстановитьУсловноеОформлениеАгентскиеУслуги();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ТоварыСтавкаНДС, ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСтавкаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДокументБезНДС", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВидСкидки", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыПроцентСкидки
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПроцентСкидки");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВидСкидки", ВидСравненияКомпоновкиДанных.НеРавно, 1);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыСуммаСкидки
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаСкидки");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВидСкидки", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//  ТоварыСуммаСкидки
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаСкидки");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВидСкидки", ВидСравненияКомпоновкиДанных.НеРавно, 1);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	//  СуммаПредоплаты
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммаПредоплаты");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЭтоПредоплата", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СуммаПредоплаты", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммаПредоплаты");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ЭтоПредоплата", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СуммаПредоплаты", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	НастройкиУсловногоОформления.Вставить("ТоварыПроинициализировано", Истина);


	// ТоварыКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЭтоУслуга", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// ТоварыКиЗ_ГИСМ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКиЗ_ГИСМ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ПродукцияМаркируемаяДляГИСМ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАгентскиеУслуги() Экспорт

	НастройкиУсловногоОформления.Вставить("АгентскиеУслугиПроинициализировано", Истина);


	// АгентскиеУслугиСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АгентскиеУслугиСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.АгентскиеУслуги.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если ПлательщикНДС Тогда 
		Объект.ДокументБезНДС = Ложь;
	КонецЕсли;
	
	Если ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		ОрганизацияЕГАИС = ИнтеграцияЕГАИСБПВызовСервера.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(Объект.Организация, Объект.Склад);
	Иначе
		ОрганизацияЕГАИС = Неопределено;
	КонецЕсли; 
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьСписокНалоговыхРежимов();
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	РаботаСНоменклатуройБП.ОбновитьСодержаниеУслуг(Объект.АгентскиеУслуги, Объект.Дата, ТекущаяДатаДокумента);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьФункциональныеОпцииФормы();
КонецПроцедуры

&НаСервере
Функция НовыйСтрокаТовары()
	СтрокаТовары = Новый Структура;
	
	СтрокаТовары.Вставить("Номенклатура",         Справочники.Номенклатура.ПустаяСсылка());
	СтрокаТовары.Вставить("Количество",           0);
	СтрокаТовары.Вставить("Цена",                 0);
	СтрокаТовары.Вставить("Сумма",                0);
	СтрокаТовары.Вставить("КиЗ_ГИСМ",             Неопределено);
	СтрокаТовары.Вставить("АкцизнаяМарка",        Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
	СтрокаТовары.Вставить("Справка2",             Справочники.Справки2ЕГАИС.ПустаяСсылка());
	СтрокаТовары.Вставить("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
	СтрокаТовары.Вставить("Штрихкод",             "");
	
	Возврат СтрокаТовары
КонецФункции

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда 
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.ДокументБезНДС 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.ДокументБезНДС <> СтруктураЦеныИВалюта.ДокументБезНДС);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда

		Объект.ТипЦен             = СтруктураЦеныИВалюта.ТипЦен;
		Объект.СуммаВключаетНДС   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.ДокументБезНДС	  = СтруктураЦеныИВалюта.ДокументБезНДС;
		
		Модифицированность = Истина;

		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены  ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда
			ЗаполнитьРассчитатьСуммы(
				СтруктураЦеныИВалюта.ПерезаполнитьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
				
		СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммы(ПерезаполнитьЦены = Ложь, ПересчитатьНДС = Ложь);
	ТаблицаЦенНоменклатуры = Неопределено;
	
	Если ПерезаполнитьЦены Тогда
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.АгентскиеУслуги, "Номенклатура"), Истина);
		
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
			ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТабличнойЧасти, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены, ПересчитатьНДС, ?(СтрокаТабличнойЧасти.ЭтоУслуга, 1, 0));
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из Объект.АгентскиеУслуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТабличнойЧасти, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены, ПересчитатьНДС, 1);
	КонецЦикла;
	
	УправлениеФормой(ЭтотОбъект);
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРассчитатьСуммыВСтроке(СтрокаТабличнойЧасти, ТаблицаЦенНоменклатуры, ПерезаполнитьЦены,  ПересчитатьНДС, ЗначениеПустогоКоличества)
	
	ДанныеСтроки = Новый Структура("Номенклатура,Количество,Цена,Сумма,ПроцентСкидки,СуммаСкидки,СтавкаНДС,СуммаНДС,Всего");
	
	// Сумма и процент скидки есть не во всех ТЧ, поэтому заполним их значениями по умолчанию
	ДанныеСтроки.Вставить("ПроцентСкидки", 0);
	ДанныеСтроки.Вставить("СуммаСкидки",   0);
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);

	Если ПерезаполнитьЦены И ТаблицаЦенНоменклатуры <> Неопределено Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(ДанныеСтроки.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, ВалютаРегламентированногоУчета, НайденнаяСтрока.Курс,
				1, НайденнаяСтрока.Кратность, 1);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
		Иначе
			Цена = 0;
			// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
			Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
				ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ЦенаВключаетНДС = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Цена = ДанныеСтроки.Цена;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если Объект.ДокументБезНДС Тогда
		ДанныеСтроки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	ДанныеСтроки.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
		ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеСтроки.СтавкаНДС));
		
	ДанныеСтроки.Сумма       = ДанныеСтроки.Цена * ?(ДанныеСтроки.Количество =0, ЗначениеПустогоКоличества, ДанныеСтроки.Количество);
	ДанныеСтроки.СуммаСкидки = Окр(ДанныеСтроки.Сумма * ДанныеСтроки.ПроцентСкидки/100, 2);
	
	ДанныеСтроки.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ДанныеСтроки.Сумма - ДанныеСтроки.СуммаСкидки, Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеСтроки.СтавкаНДС));
		
	РассчитатьВсегоПоСтроке(ДанныеСтроки, Объект.СуммаВключаетНДС);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
КонецПроцедуры

&НаСервере
Процедура ОснованиеПриИзмененииНаСервере()
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Основание, "СуммаВключаетНДС, ТипЦен, ДокументБезНДС, СистемаНалогообложения");

	ЗаполнитьЗначенияСвойств(
		Объект, 
		РеквизитыОснования);
		
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.СкопироватьТабличныеЧасти(Объект.Основание);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ОбновитьСписокНалоговыхРежимов();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
КонецПроцедуры 

&НаСервере
Процедура НастройкаОтображенияФормыВПростомИнтерфейсе()
	
	Если Не ИспользуетсяПростойИнтерфейс Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьОтображениеВкладок();
	
	Элементы.ГруппаБаннерОткрытьСмену.Видимость
		= ОтображатьБаннерОткрытияСмены(Объект.Ссылка, ИспользуетсяФискальныйРегистратор);
		
	Элементы.Основание.Заголовок = НСтр("ru='Возврат по чеку'");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеВкладок()
	
	ОпцииОтображенияТабличныхЧастей = ИменаОпцийСвязанныхСТабличнымиЧастями();
	ОтображаетсяТолькоОсновнаяТабличнаяЧасть = Истина;
	Для Каждого ИмяОпции Из ОпцииОтображенияТабличныхЧастей Цикл
		Если ПолучитьФункциональнуюОпцию(ИмяОпции) Тогда
			ОтображаетсяТолькоОсновнаяТабличнаяЧасть = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОтображаетсяТолькоОсновнаяТабличнаяЧасть Тогда
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтображатьБаннерОткрытияСмены(Ссылка, ИспользуетсяФискальныйРегистратор)
	
	Если Не ИспользуетсяФискальныйРегистратор Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		СписокОборудованияОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
		СписокОборудованияОтбор.ТипыПО = МенеджерОборудованияКлиентСерверБП.ТипыКонтрольноКассовойТехники();
		
		СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОборудованияОтбор);
		Если СписокДоступныхУстройств.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого Устройство Из СписокДоступныхУстройств Цикл
			ОписаниеПоследнейСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Устройство.Ссылка);
			Если ОписаниеПоследнейСмены <> Неопределено
				И ОписаниеПоследнейСмены.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаОпцийСвязанныхСТабличнымиЧастями()
	
	ИменаФункциональныхОпций = Новый Массив;
	ИменаФункциональныхОпций.Добавить("ИспользоватьОплатуПоПлатежнымКартам");
	Возврат ИменаФункциональныхОпций;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьУстановитьСчетКассы(ДоговорКонтрагента)
	ЭтоДоговорПлатежногоАгента = ЭтоДоговорПлатежногоАгента(ДоговорКонтрагента);
	Если ЭтоДоговорПлатежногоАгента <> (Объект.СчетКасса = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента")) Тогда
	
		Объект.СчетКасса = ?(ЭтоДоговорПлатежногоАгента, ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаПлатежногоАгента"), ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.КассаОрганизации")); 
		
		УправлениеФормой(ЭтотОбъект);
		УстановитьЗаголовокФормы(ЭтотОбъект);
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоДоговорПлатежногоАгента(ДоговорКонтрагента)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ПлатежныйАгент");

КонецФункции

&НаКлиенте
Процедура ПробитьЧекКоррекцииЗавершение(Значение, Параметры) Экспорт

	Если Значение = КодВозвратаДиалога.ОК Тогда
	
		ПереключитьЧекКоррекции();
	
	КонецЕсли; 

КонецПроцедуры 

&НаКлиенте
Процедура ПереключитьЧекКоррекции()

	ЭтоЧекКоррекции = Истина;
	ТолькоПросмотр = Ложь;
	
	ОбновитьСписокНалоговыхРежимов();
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьЧек" Тогда
		СтандартнаяОбработка =Ложь;
		
		КлючЗаписи = ДанныеФискальнойОперации(Объект.Ссылка);
		Если КлючЗаписи <> Неопределено Тогда
		
			ПараметрыОткрытия = Новый Структура("Ключ", КлючЗаписи);
			
			ОткрытьФорму("РегистрСведений.ФискальныеОперации.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект);
		
		КонецЕсли; 
	
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФискальнойОперации(Ссылка)

	ДанныеФискальнойОперации = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(Ссылка,,,Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
	Если ДанныеФискальнойОперации <> Неопределено Тогда
		ЗначенияКлюча = Новый Структура("ДокументОснование, ИдентификаторЗаписи");
		ЗаполнитьЗначенияСвойств(ЗначенияКлюча, ДанныеФискальнойОперации);
		
		Возврат РегистрыСведений.ФискальныеОперации.СоздатьКлючЗаписи(ЗначенияКлюча);
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции 

&НаСервере
Процедура ОбновитьСписокНалоговыхРежимов()
	СписокНалоговыхРежимовДляПечатиЧека.Очистить();
	
	// Если чек уже пробит - то налоговый режим фиксируем тот, который был на момент пробития
	Если ЗначениеЗаполнено(Объект.НомерЧекаККМ) 
		И ЗначениеЗаполнено(Объект.СистемаНалогообложения) Тогда
		
		СписокНалоговыхРежимовДляПечатиЧека.Добавить(Объект.СистемаНалогообложения);
	КонецЕсли; 
	
	Если ТолькоПросмотр 
		ИЛИ (ЗначениеЗаполнено(Объект.НомерЧекаККМ) И НЕ ЭтоЧекКоррекции) Тогда
		
		Возврат;
	КонецЕсли; 
	
	СписокНалоговыхРежимов = СписокНалоговыхРежимовДляПечатиЧека.ВыгрузитьЗначения();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНалоговыхРежимов, 
		Документы.РозничнаяПродажа.СписокНалоговыхРежимовДляПечатиЧека(Объект.Организация, Объект.Склад, Объект.Дата), Истина);
		
	Если СписокНалоговыхРежимов.Количество() = 1 Тогда
		Объект.СистемаНалогообложения = СписокНалоговыхРежимов[0];
	ИначеЕсли СписокНалоговыхРежимов.Найти(Объект.СистемаНалогообложения) = Неопределено Тогда
		Объект.СистемаНалогообложения = Неопределено;
	КонецЕсли; 
	
	СписокНалоговыхРежимовДляПечатиЧека.ЗагрузитьЗначения(СписокНалоговыхРежимов);
КонецПроцедуры 

// Пересчет табличной части документа после изменений в форме "Цены и валюта".
// Выполняется пересчет колонок: цена, скидка, сумма, сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()
	
	ЭтоПатент = (Объект.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.Патент"));

	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СуммаВключаетНДС",                   Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",                     Объект.ДокументБезНДС);
	СтруктураПараметров.Вставить("Организация",                        Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",                      Объект.Дата);
	СтруктураПараметров.Вставить("ПрименяетсяОсвобождениеОтУплатыНДС", ПрименяетсяОсвобождениеОтУплатыНДС ИЛИ ЭтоПатент);
	СтруктураПараметров.Вставить("ТипЦен",                             Объект.ТипЦен);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                     ТолькоПросмотр);
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ИспользоватьТипыЦенНоменклатуры Тогда 
		ОткрыватьИзМеню = Ложь;
	Иначе
		ОткрыватьИзМеню = Истина;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		
		Если Не ПлательщикНДС ИЛИ ПрименяетсяОсвобождениеОтУплатыНДС ИЛИ ЭтоПатент Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		
		Если НЕ ТолькоПросмотр Тогда
			ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
		Иначе
			ОповещениеОЗакрытии = Неопределено;
		КонецЕсли; 
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументБезНДС",               Объект.ДокументБезНДС);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);
	
	ИменаТаблицИсточников = Новый СписокЗначений();
	ИменаТаблицИсточников.Добавить("Товары");
	ИменаТаблицИсточников.Добавить("Услуги");
	
	ПараметрыОбработки.Вставить("ИмяТаблицы", 					"Товары");
	ПараметрыОбработки.Вставить("РазрешитьУслуги", 				Истина);
	ПараметрыОбработки.Вставить("ПоказыватьСкидку",				ВидСкидки = 1);
	ПараметрыОбработки.Вставить("ИменаТаблицИсточников",		ИменаТаблицИсточников);
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)
	
	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	Объект.Товары.Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РаспределитьСуммуСкидкуПриИзмененииДокумента(Форма)
	Если Форма.ВидСкидки <> 2 Тогда
		Возврат;
	КонецЕсли; 
	
	РаспределитьСуммуСкидки(Форма);
	
	ОбновитьИтоги(Форма);
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура РаспределитьСуммуСкидки(Форма)
	Объект = Форма.Объект;
	
	МассивСтарыхСумм = Новый Массив;
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		МассивСтарыхСумм.Добавить(СтрокаТовары.Сумма);
	КонецЦикла;
	
	МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(Объект.СуммаСкидки, МассивСтарыхСумм);
	
	Для Поз = 0 По Объект.Товары.Количество() - 1 Цикл
		ДанныеСтроки = Объект.Товары[Поз];
		
		ДанныеСтроки.СуммаСкидки   = ?(МассивНовыхСумм = Неопределено, 0, МассивНовыхСумм[Поз]);
		ДанныеСтроки.ПроцентСкидки = 0;
		
		ДанныеСтроки.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			Макс(ДанныеСтроки.Сумма - ДанныеСтроки.СуммаСкидки, 0), 
			Объект.СуммаВключаетНДС, 
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеСтроки.СтавкаНДС));
			
		РассчитатьВсегоПоСтроке(ДанныеСтроки, Объект.СуммаВключаетНДС);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВсегоПоСтроке(СтрокаТабличнойЧасти, СуммаВключаетНДС)
	ДанныеСтроки = Новый Структура("Сумма, СуммаНДС, СуммаСкидки, Всего", 0, 0, 0);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	
	ДанныеСтроки.Всего = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС) - ДанныеСтроки.СуммаСкидки;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
КонецПроцедуры 

#КонецОбласти

#Область РаботаССБП

&НаКлиенте
Процедура НачатьОплатуПоКассовойСсылке(ПараметрыОплатыСБП, ДополнительныеПараметры)
	Перем СообщениеОбОшибке;
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("Ссылка",         РозничнаяПродажаСсылка);
	ПараметрыОбъекта.Вставить("СуммаДокумента", ДополнительныеПараметры.ОплатаСБП);
	
	АктивироватьКассовуюСсылкуНаСервере(ПараметрыОбъекта, ПараметрыОплатыСБП, УникальныйИдентификатор, СообщениеОбОшибке);
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПараметрыОплатыСБП", ПараметрыОплатыСБП);
	ДополнительныеПараметры.Вставить("ВидОплаты",          ПараметрыОплатыСБП.ВидОплаты);
	
	// Если подключен дисплей - выведем ссылку еще и на него
	Если МенеджерОборудованияКлиент.ПолучитьПодключенныеУстройства("ДисплейПокупателя").Количество() > 0 Тогда
		НачатьВыводQRКодаНаДисплейПокупателя(ПараметрыОплатыСБП.ДанныеСсылки.КассоваяСсылка, ДополнительныеПараметры);
	Иначе
		ПроверкаОплатыСБПЗавершение = Новый ОписаниеОповещения("ПроверкаОплатыСБПЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтеграцияССБПБПКлиент.ПроверитьОплату(РозничнаяПродажаСсылка, ПараметрыОплатыСБП, ЭтотОбъект, ПроверкаОплатыСБПЗавершение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОплатыСБПЗавершение(Результат, ПараметрыОповещения) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОперации = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если РезультатОперации.СтатусОперации = "Ошибка" Тогда
		
		ВызватьИсключение РезультатОперации.СообщениеОбОшибке;
	КонецЕсли;
	
	Если НЕ ПараметрыОповещения.ПараметрыОплатыСБП.ЭтоКассоваяСсылка 
		ИЛИ МенеджерОборудованияКлиент.ПолучитьПодключенныеУстройства("ДисплейПокупателя").Количество() > 0 Тогда
		
		ОповещениеОчисткаДисплеяПокупателя = Новый ОписаниеОповещения("ОчисткаДисплеяПокупателяЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ОборудованиеДисплеиПокупателяКлиент.НачатьОчисткуДисплеяПокупателя(ОповещениеОчисткаДисплеяПокупателя, УникальныйИдентификатор);
	КонецЕсли;
	
	Если РезультатОперации.СтатусОперации <> "Выполнена" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Оплата не выполнена'"));
		Возврат;
	КонецЕсли;
	
	НачатьОперациюНаФискальномУстройстве(ПараметрыОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаДисплеяПокупателяЗавершение(Результат, ПараметрыОповещения) Экспорт
	Если НЕ ПараметрыОповещения.ПараметрыОплатыСБП.ЭтоКассоваяСсылка Тогда
		Возврат;
	КонецЕсли;
	
	РезультатДеактивации = ДеактивироватьКассовуюСсылкуНаСервере(ПараметрыОповещения.ПараметрыОплатыСБП);
	
	Если НЕ РезультатДеактивации.Результат Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось деактивировать ссылку по причине: %1'"),
			РезультатДеактивации.ОписаниеОшибки);
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачатьВозвратОплатыСБП(ПараметрыОплатыСБП, ДополнительныеПараметры)
	ПараметрыОплатыСБП.Вставить("Сумма", ДополнительныеПараметры.ОплатаСБП);
	ПараметрыОплатыСБП.Вставить("Дата",  Объект.Дата);
	
	ДополнительныеПараметры.Вставить("ВидОплаты", ПараметрыОплатыСБП.ВидОплаты);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВозвратОплатыСБПЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИнтеграцияССБПБПКлиент.ВозвратОплаты(РозничнаяПродажаСсылка, Объект.Основание, ПараметрыОплатыСБП, ЭтотОбъект, ОповещениеОЗавершении);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратОплатыСБПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат.Результат Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'При регистрации возврата произошла ошибка: %1'"), Результат.СообщениеОбОшибке);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НачатьОперациюНаФискальномУстройстве(ДополнительныеПараметры);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПлатежнаяСсылкаСБП(ПараметрыОбъекта, ПараметрыОплатыСБП, УникальныйИдентификатор, СообщениеОбОшибке);
	РезультатОперации = ПереводыСБПc2b.ДинамическаяСсылка(ПараметрыОбъекта.Ссылка, ПараметрыОплатыСБП.НастройкаИнтеграции, ПараметрыОбъекта);
	Если ЗначениеЗаполнено(РезультатОперации.СообщениеОбОшибке) Тогда
		СообщениеОбОшибке = РезультатОперации.СообщениеОбОшибке;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатОперации.ПлатежнаяСсылка;
КонецФункции

&НаКлиенте
Процедура НачатьОплатуПоПлатежнойСсылке(ПараметрыОплатыСБП, ДополнительныеПараметры)
	
	Перем СообщениеОбОшибке;
	
	ПараметрыОбъекта = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("Ссылка",         РозничнаяПродажаСсылка);
	ПараметрыОбъекта.Вставить("СуммаДокумента", ДополнительныеПараметры.ОплатаСБП);
	
	ПлатежнаяСсылка = ПлатежнаяСсылкаСБП(ПараметрыОбъекта, ПараметрыОплатыСБП, УникальныйИдентификатор, СообщениеОбОшибке);
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПараметрыОплатыСБП", ПараметрыОплатыСБП);
	ДополнительныеПараметры.Вставить("ВидОплаты",          ПараметрыОплатыСБП.ВидОплаты);
	
	НачатьВыводQRКодаНаДисплейПокупателя(ПлатежнаяСсылка, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыводQRКодаНаДисплейПокупателя(ПлатежнаяСсылка, ДополнительныеПараметры)
	ПараметрыОперации = ОборудованиеДисплеиПокупателяКлиент.ПараметрыОперацииДисплейПокупателя();
	ПараметрыОперации.СтрокиТекста   = НСтр("ru = 'Отсканируйте для оплаты'");
	ПараметрыОперации.ЗначениеQRКода = ПлатежнаяСсылка;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыводQRКодаНаДисплейПокупателяЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОборудованиеДисплеиПокупателяКлиент.НачатьВыводQRКодаНаДисплейПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, , ПараметрыОперации);
КонецПроцедуры

&НаКлиенте
Процедура ВыводQRКодаНаДисплейПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ Результат.Результат 
		И НЕ ДополнительныеПараметры.ПараметрыОплатыСБП.ЭтоКассоваяСсылка Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось отобразить код для оплаты по причине: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Результат.ОписаниеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПроверкаОплатыСБПЗавершение = Новый ОписаниеОповещения("ПроверкаОплатыСБПЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИнтеграцияССБПБПКлиент.ПроверитьОплату(РозничнаяПродажаСсылка, ДополнительныеПараметры.ПараметрыОплатыСБП, ЭтотОбъект, ПроверкаОплатыСБПЗавершение);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АктивироватьКассовуюСсылкуНаСервере(ПараметрыОбъекта, ПараметрыОплатыСБП, УникальныйИдентификатор, СообщениеОбОшибке)
	РезультатАктивации = ПереводыСБПc2b.АктивироватьКассовуюСсылку(
		ПараметрыОбъекта.Ссылка, ПараметрыОплатыСБП.ДанныеСсылки, ПараметрыОплатыСБП.НастройкаИнтеграции, ПараметрыОбъекта);
	
	Если ЗначениеЗаполнено(РезультатАктивации.СообщениеОбОшибке) Тогда
		СообщениеОбОшибке = РезультатАктивации.СообщениеОбОшибке;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДеактивироватьКассовуюСсылкуНаСервере(ПараметрыОплатыСБП)
	РезультатОперации = ПереводыСБПc2b.ДеактивироватьКассовуюСсылку(
		ПараметрыОплатыСБП.ДанныеСсылки, ПараметрыОплатыСБП.НастройкаИнтеграции);
		
	Результат = Новый Структура;
	Результат.Вставить("Результат",      НЕ ЗначениеЗаполнено(РезультатОперации.СообщениеОбОшибке));
	Результат.Вставить("ОписаниеОшибки", РезультатОперации.СообщениеОбОшибке);
	Возврат Результат
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыОплатыСБП(Организация, Склад, ПодключенныеДисплеиПокупателяВыводятQRКод)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПодключенныеДисплеиПокупателяВыводятQRКод",
		ПодключенныеДисплеиПокупателяВыводятQRКод);
	
	СписокСкладов = Новый Массив;
	СписокСкладов.Добавить(Склад);
	СписокСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеНастроекИнтеграции.ТорговаяТочка КАК НастройкаИнтеграции,
	|	СоответствиеНастроекИнтеграции.ВидОплаты КАК ВидОплаты,
	|	НЕ КассовыеСсылки.КассоваяСсылка ЕСТЬ NULL КАК ЭтоКассоваяСсылка,
	|	КассовыеСсылки.КассоваяСсылка КАК КассоваяСсылка,
	|	ВЫБОР
	|		КОГДА НЕ КассовыеСсылки.КассоваяСсылка ЕСТЬ NULL
	|				И КассовыеСсылки.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.пустаяСсылка)
	|			ТОГДА 1 // создана кассовая ссылка для конкретного склада
	|		КОГДА НЕ КассовыеСсылки.КассоваяСсылка ЕСТЬ NULL
	|			ТОГДА 2 // создана кассовая ссылка для любого складов
	|		ИНАЧЕ 3 // доступны только платежные ссылки
	|	КОНЕЦ КАК Порядок,
	|	КассовыеСсылки.ИдентификаторОплаты КАК ИдентификаторОплаты
	|ИЗ
	|	РегистрСведений.СоответствиеНастроекИнтеграции КАК СоответствиеНастроекИнтеграции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КассовыеСсылки КАК КассовыеСсылки
	|		ПО СоответствиеНастроекИнтеграции.ТорговаяТочка = КассовыеСсылки.НастройкаИнтеграции
	|			И (КассовыеСсылки.Склад В (&СписокСкладов))
	|ГДЕ
	|	СоответствиеНастроекИнтеграции.Организация = &Организация
	|	И (&ПодключенныеДисплеиПокупателяВыводятQRКод
	|			ИЛИ НЕ КассовыеСсылки.КассоваяСсылка ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если НЕ Результат.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиИнтеграции = СистемаБыстрыхПлатежей.НастройкиПодключения(Результат.НастройкаИнтеграции);
	Если НЕ НастройкиИнтеграции.Используется Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура("НастройкаИнтеграции, ВидОплаты, ЭтоКассоваяСсылка, УчастникСБПВозврата");
	СтруктураРезультата.УчастникСБПВозврата = НастройкиИнтеграции.НастройкиСБПc2b.УчастникСБПВозврата;
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Результат);
	
	Если НастройкиИнтеграции.НастройкиСБПc2b.КассовыеСсылки И СтруктураРезультата.ЭтоКассоваяСсылка Тогда
		ДанныеСсылки = Новый Структура("КассоваяСсылка, ИдентификаторОплаты");
		ЗаполнитьЗначенияСвойств(ДанныеСсылки, Результат);
		СтруктураРезультата.Вставить("ДанныеСсылки", ДанныеСсылки);
	КонецЕсли;
	
	Возврат СтруктураРезультата
КонецФункции

&НаСервереБезКонтекста
Функция ДокументОснованиеОплаченСБП(ДокументОснование, НастройкаИнтеграции)
	НастройкиИнтеграцииОснования = ПереводыСБПc2b.НастройкиПодключенияОперации(ДокументОснование);
	Возврат НастройкиИнтеграцииОснования.Найти(НастройкаИнтеграции) <> Неопределено;
КонецФункции

&НаКлиенте
Процедура КОплатеПриИзменении(Элемент)
	Элементы.СуммаПредоплаты.Доступность = НЕ ПолнаяПредоплата;
	ОбновитьИтоги(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СуммаПредоплатыПриИзменении(Элемент)
	ПолнаяПредоплата = (Объект.СуммаПредоплаты = ИтогВсего);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
