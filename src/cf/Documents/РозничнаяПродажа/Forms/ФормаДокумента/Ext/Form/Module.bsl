////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	СтрокаТаблицы = Элементы.СписокВидовОпераций.ТекущиеДанные;
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		
		ОткрытьДокументВида(СтрокаТаблицы.Значение);
		
	КонецЕсли; 
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Параметры.Свойство("ЗначениеКопирования") Тогда
		ЗначениеКопирования = Параметры.ЗначениеКопирования;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ЗначенияЗаполнения  = Параметры.ЗначенияЗаполнения;
	КонецЕсли;
	Если Параметры.Свойство("Основание") Тогда
		Основание           = Параметры.Основание;
	КонецЕсли;
	Если Параметры.Свойство("Ключ") Тогда
		Ключ				= Параметры.Ключ;
	КонецЕсли;
	
	ФормыДокумента = Новый ФиксированноеСоответствие(
		Документы.РозничнаяПродажа.ПолучитьСоответствиеВидовОперацийФормам());
		
	Если Параметры.Свойство("ВидОперации") Тогда
		ВидОперацииПриОткрытии = Параметры.ВидОперации;
	КонецЕсли;
	
	ОтборПоВидуОперации = Неопределено;
	Если Параметры.Свойство("ЗначенияЗаполнения") И ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
		ОтборПоВидуОперации = ЗначенияЗаполнения.ВидОперации;
	КонецЕсли;
	
	ИсключаемыеВидыОпераций = Новый Массив;
	
	ВидОперацииОснование = Неопределено;
	Если ЗначениеЗаполнено(Основание) 
		И ТипЗнч(Основание) = Тип("ДокументСсылка.РозничнаяПродажа") Тогда
		
		ВидОперацииОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
		ИсключаемыеВидыОпераций.Добавить(ВидОперацииОснование);
	ИначеЕсли ЗначениеЗаполнено(Основание) 
		И ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ИсключаемыеВидыОпераций.Добавить(Перечисления.ВидыОперацийРозничнаяПродажа.Возврат);
	КонецЕсли;
	
	Если ВидОперацииОснование = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
		ИсключаемыеВидыОпераций.Добавить(Перечисления.ВидыОперацийРозничнаяПродажа.Предоплата);
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатыВРознице") Тогда
		ИсключаемыеВидыОпераций.Добавить(Перечисления.ВидыОперацийРозничнаяПродажа.Предоплата);
	КонецЕсли;
	
	ВидыОпераций = ПолучитьСписокВидовОпераций(ЗначенияЗаполнения, ОтборПоВидуОперации, ИсключаемыеВидыОпераций);
	Для Каждого ВидОперации Из ВидыОпераций Цикл
		НоваяОперация = СписокВидовОпераций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяОперация, ВидОперации);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтборПоВидуОперации) Тогда
		Элементы.СписокВидовОпераций.Заголовок = НСтр("ru = 'Выберите систему налогообложения документа'");
	ИначеЕсли СписокВидовОпераций.Количество() < 3 Тогда
		Элементы.СписокВидовОпераций.Заголовок = НСтр("ru = 'Выберите вид операции документа'");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ВидОперацииПриОткрытии) Тогда
		ВыделенныйЭлементСписка = СписокВидовОпераций.НайтиПоЗначению(ВидОперацииПриОткрытии);
		Если ВыделенныйЭлементСписка <> Неопределено Тогда
			Элементы.СписокВидовОпераций.ТекущаяСтрока = ВыделенныйЭлементСписка.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПолучитьСписокВидовОпераций(ЗначенияЗаполнения, ВидОперацииОтбор,ИсключаемыеВидыОпераций = Неопределено)
	Перем Организация, Склад;
	
	СписокВидовОпераций = Новый СписокЗначений;
	
	Если ТипЗнч(ЗначенияЗаполнения) <> Тип("Структура") 
		ИЛИ НЕ ЗначенияЗаполнения.Свойство("Организация", Организация) Тогда
		
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли; 
	
	Если ТипЗнч(ЗначенияЗаполнения) <> Тип("Структура") 
		ИЛИ НЕ ЗначенияЗаполнения.Свойство("Склад", Склад)  Тогда
		Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли; 
	
	СписокНалоговыхРежимовДляПечатиЧека = Документы.РозничнаяПродажа.СписокНалоговыхРежимовДляПечатиЧека(Организация, Склад);
	
	НалоговыйРежимПоУмолчанию = Неопределено;
	Если СписокНалоговыхРежимовДляПечатиЧека <> Неопределено Тогда
		НалоговыйРежимПоУмолчанию = ПоследнийИспользованныйНалоговыйРежим(Организация, Склад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОперацииОтбор) Тогда
		ДобавитьВидОперации(СписокВидовОпераций, 
			ВидОперацииОтбор, СписокНалоговыхРежимовДляПечатиЧека, НалоговыйРежимПоУмолчанию, Ложь)
	Иначе
		ЗначенияПеречисления = Метаданные.Перечисления.ВидыОперацийРозничнаяПродажа.ЗначенияПеречисления;
		Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
			ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа[ЗначениеПеречисления.Имя];
			Если ИсключаемыеВидыОпераций.Найти(ВидОперации) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьВидОперации(СписокВидовОпераций, 
				ВидОперации, 
				СписокНалоговыхРежимовДляПечатиЧека, НалоговыйРежимПоУмолчанию, Истина)
		КонецЦикла;
	КонецЕсли; 
	
	Возврат СписокВидовОпераций;
КонецФункции

&НаСервереБезКонтекста
Функция ПоследнийИспользованныйНалоговыйРежим(Организация, Склад)
	СоответствиеСистемНалогообложения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РозничнаяПродажа", "СистемаНалогообложения", Новый Соответствие);
	
	СоответствиеСистемНалогообложенияПоОрганизации = СоответствиеСистемНалогообложения[Организация];
	
	Если СоответствиеСистемНалогообложенияПоОрганизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Возврат СоответствиеСистемНалогообложенияПоОрганизации[Склад];
	ИначеЕсли СоответствиеСистемНалогообложенияПоОрганизации.Количество() = 1 Тогда
		Для каждого СистемаНалогообложения Из СоответствиеСистемНалогообложенияПоОрганизации Цикл
			Возврат СистемаНалогообложения.Значение;
		КонецЦикла; 
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции 

&НаСервереБезКонтекста
Процедура ДобавитьВидОперации(СписокВидовОпераций, ТекущийВидОперации, СписокНалоговыхРежимовДляПечатиЧека, НалоговыйРежимПоУмолчанию, ОтображатьВидОперацииВСпискеВыбора)
	
	// Возврат всегда определяется налоговым режимом продажи
	Если ТекущийВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат
		ИЛИ СписокНалоговыхРежимовДляПечатиЧека = Неопределено
		ИЛИ СписокНалоговыхРежимовДляПечатиЧека.Количество() < 2 Тогда
		
		ДобавитьСтрокуВСписокОпераций(СписокВидовОпераций, ТекущийВидОперации);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НалоговыйРежимПоУмолчанию) 
		И СписокНалоговыхРежимовДляПечатиЧека.Найти(НалоговыйРежимПоУмолчанию) <> Неопределено Тогда
	
		ДобавитьСтрокуВСписокОпераций(СписокВидовОпераций, ТекущийВидОперации, НалоговыйРежимПоУмолчанию, ОтображатьВидОперацииВСпискеВыбора);
		СписокНалоговыхРежимовДляПечатиЧека.Удалить(СписокНалоговыхРежимовДляПечатиЧека.Найти(НалоговыйРежимПоУмолчанию));
	КонецЕсли;
	
	Для каждого НалоговыйРежим Из СписокНалоговыхРежимовДляПечатиЧека Цикл
		ДобавитьСтрокуВСписокОпераций(СписокВидовОпераций, ТекущийВидОперации, НалоговыйРежим, ОтображатьВидОперацииВСпискеВыбора);
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВСписокОпераций(СписокВидовОперации, ВидОперации, СистемаНалогообложения = Неопределено, ОтображатьВидОперацииВСпискеВыбора = Истина)

	СтруктураВидаОперации = Новый Структура;
	СтруктураВидаОперации.Вставить("ВидОперации",             ВидОперации);
	СтруктураВидаОперации.Вставить("СистемаНалогообложения",  СистемаНалогообложения);
	
	Если СистемаНалогообложения = Неопределено Тогда
		ПредставлениеВидаОперации = Строка(ВидОперации);
	ИначеЕсли НЕ ОтображатьВидОперацииВСпискеВыбора Тогда
		ПредставлениеВидаОперации = Строка(СистемаНалогообложения);
	Иначе
		ПредставлениеВидаОперации = СтрШаблон("%1 - %2", ВидОперации, СистемаНалогообложения);
	КонецЕсли; 
	
	СписокВидовОперации.Добавить(СтруктураВидаОперации, ПредставлениеВидаОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВидовОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = СписокВидовОпераций.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ОткрытьДокументВида(СтрокаТаблицы.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументВида(ВыбранныйВидОперации)
	
	Если ТипЗнч(ЗначенияЗаполнения) <> Тип("Структура") Тогда
		ЗначенияЗаполнения = Новый Структура();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранныйВидОперации.СистемаНалогообложения) Тогда
		СохранитьСистемуНалогообложенияПоУмолчанию(ВыбранныйВидОперации.СистемаНалогообложения, ЗначенияЗаполнения);
	КонецЕсли; 

	ЗначенияЗаполнения.Вставить("ВидОперации",                ВыбранныйВидОперации.ВидОперации);
	ЗначенияЗаполнения.Вставить("СистемаНалогообложения",     ВыбранныйВидОперации.СистемаНалогообложения);
	Если ЗначениеЗаполнено(Основание) Тогда
		ЗначенияЗаполнения.Вставить("Основание", Основание);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", Ключ);
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		СтруктураПараметров.Вставить("ЗначениеКопирования", ЗначениеКопирования);
	КонецЕсли;
	СтруктураПараметров.Вставить("ЗначенияЗаполнения",  ЗначенияЗаполнения);
	Если ЗначениеЗаполнено(ВидОперацииПриОткрытии) И ВыбранныйВидОперации.ВидОперации <> ВидОперацииПриОткрытии Тогда
		СтруктураПараметров.Вставить("ИзменитьВидОперации", Истина);
	КонецЕсли;
	
	Если Открыта() Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыРозничнаяПродажа");
	
	ОткрытьФорму("Документ.РозничнаяПродажа.Форма.ФормаДокументаОбщая", СтруктураПараметров, ВладелецФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСистемуНалогообложенияПоУмолчанию(СистемаНалогообложения, ЗначенияЗаполнения)
	Перем Организация, Склад;
	
	Если НЕ ЗначенияЗаполнения.Свойство("Организация", Организация) Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли; 
	
	Если НЕ ЗначенияЗаполнения.свойство("Склад", Склад)  Тогда
		Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Организация) 
		ИЛИ НЕ ЗначениеЗаполнено(Склад) Тогда
	
		Возврат;
	КонецЕсли; 
	
	СоответствиеСистемНалогообложения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РозничнаяПродажа", "СистемаНалогообложения", Новый Соответствие);
	
	Если СоответствиеСистемНалогообложения[Организация] = Неопределено Тогда
		СоответствиеСистемНалогообложения.Вставить(Организация, Новый Соответствие);
	КонецЕсли; 
	
	СоответствиеСистемНалогообложения[Организация].Вставить(Склад, СистемаНалогообложения);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РозничнаяПродажа", "СистемаНалогообложения", СоответствиеСистемНалогообложения, Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если СписокВидовОпераций.Количество() = 1 Тогда
		
		Отказ = Истина;
		ОткрытьДокументВида(СписокВидовОпераций[0].Значение);
	
	КонецЕсли;
КонецПроцедуры
