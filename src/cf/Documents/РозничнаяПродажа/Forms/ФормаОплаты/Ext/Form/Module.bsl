&НаКлиенте
Перем СуммаПолученоНаличными;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "СуммаДокумента, СуммаСкидки, СуммаПредоплаты, СуммаОплатыСертификат, ИспользоватьОплатуСБП, Организация, ЭтоЧекКоррекции");
	
	ЭтоВозврат = Параметры.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат;
	
	ЭтоККТСПередачейДанных = Параметры.Свойство("ЭкземплярОборудования");
	Если ЭтоККТСПередачейДанных Тогда
		ПараметрыОборудования = МенеджерОборудованияБП.ПараметрыПодключаемогоОборудования(Параметры.ЭкземплярОборудования);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыОборудования, "ПечататьЧек, ОтправлятьEmail, ОтправлятьSMS");
		Если Параметры.Свойство("СчетНаОплату") Тогда
			ЗаполнитьКонтактнуюИнформациюПоСчетуНаОплату(Параметры.СчетНаОплату);
		КонецЕсли; 
		
		СброситьРазмерыИПоложениеОкна();
	КонецЕсли; 
	
	Элементы.ФормаВыполнитьОперацию.Заголовок = Параметры.ЗаголовокКнопкиВыполнить;
	
	ПодготовитьФормуНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
КонецПроцедуры  

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ИспользоватьПодключаемоеОборудование Тогда
		// Попробуем подключить сканер штрихкода
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНаличные Тогда
		Если ПолученоНаличными < СуммаКОплате Тогда
			ТекстСообщения = НСтр("ru = 'Сумма введенной оплаты меньше суммы чека'");

			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "КОРРЕКТНОСТЬ", НСтр("ru = 'Наличными'"),,,ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПолученоНаличными", , Отказ);
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДругое Тогда
		ИмяСписка = "Оплата";
		
		Если Оплата.Итог("Сумма") > СуммаКОплате  Тогда
			
			ТекстОписаниеОшибки = НСтр("ru = 'Сумма безналичных оплат превышает сумму выручки от реализации!'");
			ТекстСообщения      = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",,, НСтр("ru = 'Безналичные оплаты'"), ТекстОписаниеОшибки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяСписка, "Объект", Отказ);
			
		КонецЕсли;
		
		НомерСтроки = 0;
		Для каждого СтрокаОплата Из Оплата Цикл
			НомерСтроки = НомерСтроки + 1;
		
			Если НЕ ЗначениеЗаполнено(СтрокаОплата.ВидОплаты) Тогда
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, НомерСтроки, "ВидОплаты");
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", 
					НСтр("ru = 'Вид оплаты'"), НомерСтроки, ИмяСписка);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);

			КонецЕсли; 
			
			Если СтрокаОплата.Сумма = 0 Тогда
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, НомерСтроки, "Сумма");
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", 
					НСтр("ru = 'Сумма'"), НомерСтроки, ИмяСписка);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоККТСПередачейДанных Тогда
		ПараметрыПроверкиЗаполнения = МенеджерОборудованияБП.НовыйПараметрыПроверкиЗаполнения();
		ЗаполнитьЗначенияСвойств(ПараметрыПроверкиЗаполнения, ЭтотОбъект);
		МенеджерОборудованияБП.ОбработкаПроверкиЗаполненияПечатьЧека(ПараметрыПроверкиЗаполнения, Истина, Отказ);
		
		Если Отказ Тогда
			Высота = 30;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекущийКод = Параметр[0];
			Иначе
				ТекущийКод = Параметр[1][1];
			КонецЕсли;
			
			ДанныеОбъекта = Новый Структура("АдресЭлектроннойПочты, ОтправлятьEmail, НомерТелефона, ОтправлятьSMS");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ЭтотОбъект);
			ПечатьФискальныхДокументовКлиент.ЗаполнитьКонтактнуюИнформациюПоШтрихкоду(ДанныеОбъекта, ТекущийКод);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъекта);
			
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект);
		
		ТекстПредупреждения = НСтр("ru = 'Вы уверены, что хотите выйти без печати чека?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет, 60);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОплатыПриИзменении(Элемент)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница"+ВидОплаты];
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученоНаличнымиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СуммаПолученоНаличными = Число(Текст);
	РассчитатьСдачу();

КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураРезультата = СтруктураРезультата();
	
	Закрыть(СтруктураРезультата);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ЭтоОплатаСертификатНСПК = СуммаОплатыСертификат > 0;
	ЕстьСкидки              = СуммаСкидки > 0;
	ЕстьПредоплаты          = СуммаПредоплаты > 0;
	
	ИспользоватьПодключаемоеОборудование = МенеджерОборудованияБП.ИспользуетсяОборудование("СканерШтрихкода");
	
	СуммаКОплате      = Макс(СуммаДокумента - СуммаОплатыСертификат - СуммаСкидки - СуммаПредоплаты, 0);
	// Для возврата и чека коррекции сразу установим сумму оплаты
	Если ЭтоВозврат ИЛИ ЭтоЧекКоррекции Тогда
		ПолученоНаличными = СуммаКОплате;
	КонецЕсли; 
	
	Если ЭтоВозврат Тогда
		Заголовок = НСтр("ru = 'Возврат'");
		Элементы.СуммаОплатыСБП.Заголовок = НСтр("ru = 'К возврату СБП'");
		Элементы.СуммаОплатыКартой.Заголовок = НСтр("ru = 'К возврату на карту'");
		Элементы.КОплате.Заголовок = НСтр("ru = 'К возврату наличными:'");
	ИначеЕсли СуммаКОплате = 0 Тогда
		ВидОплаты = "Наличные";
	
		Элементы.ВидОплаты.Видимость = Ложь;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНаличные;
		Элементы.ГруппаДоплата.Видимость = Ложь;
		Элементы.ДекорацияРазделительСертификатНаличные.Видимость = ЛОжь;
	КонецЕсли; 
	
	УстановитьВидОплаты();
КонецПроцедуры 

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить(
			"Документ.РозничнаяПродажа.Форма.ФормаОплаты", "", ИмяПользователя);
	КонецЕсли;
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформациюПоСчетуНаОплату(СчетНаОплату)
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетНаОплату, "Контрагент");
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		АдресЭлектроннойПочты = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
		НомерТелефона = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
	Иначе
		АдресЭлектроннойПочты = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
		НомерТелефона = ОбщегоНазначенияБПКлиентСервер.ОставитьВСтрокеТолькоЦифры(
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица));
	КонецЕсли;
		
	Если СтрДлина(НомерТелефона) = 11 Тогда
		// Номер покупателя передается в формате +{Ц}
		НомерТелефона = "+"+НомерТелефона;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АдресЭлектроннойПочты");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтправлятьEmail", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"АдресЭлектроннойПочты", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// НомерТелефона
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерТелефона");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтправлятьSMS", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"НомерТелефона", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);


КонецПроцедуры 

&НаСервере
Процедура УстановитьВидОплаты()
	Если СуммаКОплате = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ВидОплаты.СписокВыбора.Очистить();
	
	ЭтоВозвратСБП = ЭтоВозврат И ИспользоватьОплатуСБП;
	
	// Для оплаты сертификатом, в случае если нет доплат - наличные не показываем
	Если НЕ (СуммаКОплате = 0 И ЭтоОплатаСертификатНСПК) И НЕ ЭтоВозвратСБП Тогда
		Элементы.ВидОплаты.СписокВыбора.Добавить("Наличные");
	КонецЕсли;
	
	ИспользоватьОплатуПоПлатежнымКартам = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПоПлатежнымКартам");
	ИспользуютсяПодарочныеСертификаты = ПолучитьФункциональнуюОпцию("ИспользуютсяПодарочныеСертификаты");
	
	Если ИспользоватьОплатуПоПлатежнымКартам 
		И НЕ ЭтоВозвратСБП Тогда
		Элементы.ВидОплаты.СписокВыбора.Добавить("Карта");
	КонецЕсли; 
	
	Если ИспользоватьОплатуСБП
		И НЕ ЭтоОплатаСертификатНСПК Тогда
		Элементы.ВидОплаты.СписокВыбора.Добавить("СБП");
	КонецЕсли; 
	
	Если (ИспользуютсяПодарочныеСертификаты 
		ИЛИ ИспользоватьОплатуПоПлатежнымКартам) 
		И НЕ ЭтоОплатаСертификатНСПК
		И НЕ ЭтоВозвратСБП Тогда
		
		Элементы.ВидОплаты.СписокВыбора.Добавить("Другое");
	КонецЕсли; 
	
	ЗагрузитьТаблицуОплат(Параметры.АдресТаблицаОплата, ИспользоватьОплатуПоПлатежнымКартам, ИспользуютсяПодарочныеСертификаты);
	
	// Если уже была попытка оплаты картой в этом документе
	// Которая не прошла с прошлого раза по причине неготовности ККТ
	ЭтоОплатаКартой = (Оплата.Количество() = 1)
			И Оплата[0].ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта 
			И Оплата[0].Сумма = СуммаКОплате;
			
	// Если уже была попытка оплаты СБП в этом документе
	// Которая не прошла с прошлого раза по причине неготовности ККТ
	ЭтоОплатаСБП = (Оплата.Количество() = 1)
			И Оплата[0].ВидОплаты.ТипОплаты = Перечисления.ТипыОплат.СБП
			И Оплата[0].Сумма = СуммаКОплате;
	
	Если ИспользоватьОплатуПоПлатежнымКартам 
			И (ЭтоОплатаКартой ИЛИ ЭтоОплатаСертификатНСПК) Тогда 
		ВидОплаты = "Карта";
	ИначеЕсли (ИспользоватьОплатуСБП И ЭтоОплатаСБП) ИЛИ ЭтоВозвратСБП Тогда
		ВидОплаты = "СБП";
	ИначеЕсли (ИспользоватьОплатуПоПлатежнымКартам ИЛИ ИспользуютсяПодарочныеСертификаты)
		И Оплата.Количество() > 0 Тогда 
		ВидОплаты = "Другое";
	Иначе
		ВидОплаты = "Наличные";
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница"+ВидОплаты];
	
	Элементы.ВидОплаты.Видимость = Элементы.ВидОплаты.СписокВыбора.Количество() > 1;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуОплат(АдресТаблицаОплата, ИспользоватьПлатежныеКарты, ИспользоватьПодарочныеСертификатры)
	Если НЕ ИспользоватьПлатежныеКарты И НЕ ИспользоватьПодарочныеСертификатры Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОплат = ПолучитьИзВременногоХранилища(АдресТаблицаОплата);

	КоличествоСтрок = ТаблицаОплат.Количество();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		СтрокаОплаты = ТаблицаОплат[КоличествоСтрок-НомерСтроки];
		
		ТипОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОплаты.ВидОплаты, "ТипОплаты");
		Если ((ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта ИЛИ ТипОплаты = Перечисления.ТипыОплат.СБП) И НЕ ИспользоватьПлатежныеКарты) 
			ИЛИ ((ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный ИЛИ ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный) И НЕ ИспользоватьПодарочныеСертификатры)  Тогда
			ТаблицаОплат.Удалить(СтрокаОплаты);
		КонецЕсли; 
	КонецЦикла;
	
	Оплата.Загрузить(ТаблицаОплат);
КонецПроцедуры 

&НаСервере
Функция СтруктураРезультата()
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("ОплатаНаличные",       0);
	СтруктураРезультата.Вставить("ОплатаКарта",          0);
	СтруктураРезультата.Вставить("ОплатаСБП",          0);
	
	// Для возврата по карте
	СтруктураРезультата.Вставить("СсылочныйНомер",       Неопределено);
	СтруктураРезультата.Вставить("НомерПлатежнойКарты",  Неопределено);
	СтруктураРезультата.Вставить("НомерЧекаЭТ",          Неопределено);
	
	СтруктураРезультата.Вставить("ОплатаСертификатНСПК", СуммаОплатыСертификат);
	
	СтруктураРезультата.Вставить("АдресТаблицыОплаты",   Неопределено);
	
	СтруктураРезультата.Вставить("ПечататьТоварныйЧек",  ПечататьТоварныйЧек);
	
	Если ОтправлятьEmail Тогда
		СтруктураРезультата.Вставить("ПокупательEmail",    АдресЭлектроннойПочты);
	КонецЕсли; 
	Если ОтправлятьSMS Тогда
		СтруктураРезультата.Вставить("ПокупательНомер",    НомерТелефона);
	КонецЕсли; 
	СтруктураРезультата.Вставить("ПечататьЧек",        ПечататьЧек);
	
	СтруктураРезультата.Вставить("ОснованиеКоррекции",   ОснованиеКоррекции);
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНаличные Тогда
		СтруктураРезультата.ОплатаНаличные = ПолученоНаличными;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКарта Тогда
		СтруктураРезультата.ОплатаКарта = СуммаКОплате;
		Если Оплата.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРезультата, Оплата[0], "СсылочныйНомер, НомерПлатежнойКарты, НомерЧекаЭТ");
		КонецЕсли; 
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСБП Тогда
		СтруктураРезультата.ОплатаСБП = СуммаКОплате;
	Иначе
		СтруктураРезультата.ОплатаНаличные     = Макс(СуммаКОплате - Оплата.Итог("Сумма"), 0);
		СтруктураРезультата.АдресТаблицыОплаты = ПоместитьВоВременноеХранилище(Оплата.Выгрузить(), Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СтруктураРезультата;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	Элементы = Форма.Элементы;
	
	Элементы.ДекорацияРазделитель.Видимость               = НЕ (Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДругое);
	Элементы.ГруппаСдача.Видимость                         = НЕ Форма.ЭтоВозврат И НЕ Форма.ЭтоЧекКоррекции;
	Элементы.ГруппаПолученоНаличными.Видимость            = НЕ Форма.ЭтоВозврат И НЕ Форма.ЭтоЧекКоррекции;
	Элементы.ПечататьТоварныйЧек.Видимость                = НЕ Форма.ЭтоЧекКоррекции И НЕ Форма.ЭтоККТСПередачейДанных;
	Элементы.ГруппаПечатьИОтправка.Видимость              = Форма.ЭтоККТСПередачейДанных;
	
	Элементы.ГруппаСуммаЧекаНаличные.Видимость            = Форма.ЭтоОплатаСертификатНСПК ИЛИ Форма.ЕстьСкидки ИЛИ Форма.ЕстьПредоплаты;
	Элементы.СуммаОплатыСертификатНаличные.Видимость      = Форма.ЭтоОплатаСертификатНСПК;
	Элементы.СуммаСкидкиПоДокументуНаличные.Видимость     = Форма.ЕстьСкидки;
	Элементы.СуммаПредоплатыПоДокументуНаличные.Видимость = Форма.ЕстьПредоплаты;
	
	Элементы.ГруппаСуммаЧекаКарта.Видимость                = Форма.ЭтоОплатаСертификатНСПК ИЛИ Форма.ЕстьСкидки ИЛИ Форма.ЕстьПредоплаты;
	Элементы.СуммаОплатыСертификатКарта.Видимость          = Форма.ЭтоОплатаСертификатНСПК;
	Элементы.СуммаСкидкиПоДокументуКарта.Видимость         = Форма.ЕстьСкидки;
	Элементы.СуммаПредоплатыПоДокументуКарта.Видимость       = Форма.ЕстьПредоплаты;
	
	Элементы.ГруппаСуммаЧекаСБП.Видимость                  = Форма.ЕстьСкидки ИЛИ Форма.ЕстьПредоплаты;
	Элементы.СуммаСкидкиПоДокументуСБП.Видимость           = Форма.ЕстьСкидки;
	Элементы.СуммаПредоплатыПоДокументуСБП.Видимость       = Форма.ЕстьПредоплаты;
	
	
	Элементы.ОснованиеКоррекции.Видимость                  = Форма.ЭтоЧекКоррекции;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСдачу()
	СуммаСдача = Макс(СуммаПолученоНаличными - СуммаКОплате, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПечататьЧекПриИзменении(Элемент)
	УстановитьПредупреждениеПечатьЧека();
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьEmailПриИзменении(Элемент)
	УстановитьПредупреждениеПечатьЧека();
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьSMSПриИзменении(Элемент)
	УстановитьПредупреждениеПечатьЧека();
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	ОтправлятьEmail = ЗначениеЗаполнено(АдресЭлектроннойПочты);
	УстановитьПредупреждениеПечатьЧека();
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриИзменении(Элемент)
	ОтправлятьSMS = ЗначениеЗаполнено(НомерТелефона);
	УстановитьПредупреждениеПечатьЧека();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредупреждениеПечатьЧека()
	Элементы.ДекорацияПредупреждение.Видимость = НЕ (ПечататьЧек ИЛИ ОтправлятьSMS ИЛИ ОтправлятьEmail);
КонецПроцедуры

&НаКлиенте
Процедура БезСдачи(Команда)
	ПолученоНаличными = СуммаКОплате;
	СуммаСдача = 0;
КонецПроцедуры
 

#КонецОбласти
