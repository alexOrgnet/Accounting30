#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	ЗаполняетсяИзСтруктуры = ТипДанныхЗаполнения = Тип("Структура");
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ЗаполняетсяИзСтруктуры И ДанныеЗаполнения.Свойство("Основание") Тогда
			ДокументОснование = ДанныеЗаполнения.Основание;
		ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ДокументОснование = ДанныеЗаполнения;
		КонецЕсли;
		
		Если ЗаполняетсяИзСтруктуры И ДанныеЗаполнения.Свойство("ВидОперации") Тогда
			ВидОперации = ДанныеЗаполнения.ВидОперации;
		КонецЕсли;
	
		Если ДокументОснование <> Неопределено Тогда
			ЗаполнитьПоДокументуОснованию(ДокументОснование);
		ИначеЕсли ЗаполняетсяИзСтруктуры И ДанныеЗаполнения.Свойство("СуммаВключаетНДС") Тогда
			СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		Иначе
			СуммаВключаетНДС = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(
				"ОсновнойВариантРасчетаИсходящегоНДС") = Перечисления.ВариантыРасчетаНДС.НДСВСумме;
		КонецЕсли;
	Иначе
		СуммаВключаетНДС = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(
			"ОсновнойВариантРасчетаИсходящегоНДС") = Перечисления.ВариантыРасчетаНДС.НДСВСумме;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации)
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатыВРознице") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа;
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ЗаполняетсяИзСтруктуры И ДанныеЗаполнения.Свойство("АдресТаблицыНоменклатуры") Тогда
		ПараметрыОбъекта = РаботаСНоменклатуройБП.НовыеПараметрыОбъекта();
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
		Если Не ЗначениеЗаполнено(ПараметрыОбъекта.ТипЦен) Тогда
			ПараметрыОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
		КонецЕсли;
		ПараметрыОбъекта.Реализация = Истина;
		ОбработкаТабличныхЧастей.ЗаполнитьИзТаблицыНоменклатуры(
			Товары, ДанныеЗаполнения.АдресТаблицыНоменклатуры, ПараметрыОбъекта);
	КонецЕсли;
	
	// Склад может заполниться по умолчанию значением, которое не должно выбираться
	Если ЗначениеЗаполнено(Склад) Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			Склад = Справочники.Склады.ПустаяСсылка();
		Иначе
			ТипЦен = РеквизитыСклада.ТипЦенРозничнойТорговли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	НомерЧекаККМ = "";
	ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	ИдентификаторУстройства = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	
	СписокРеквизитов = "КодАкцизнойМарки,ШтрихкодУпаковки,АкцизнаяМарка,Справка2";
	Если ОбъектКопирования.ЕстьМаркируемаяПродукцияГИСМ Тогда
		СписокРеквизитов = СписокРеквизитов + ",КиЗ_ГИСМ";
	КонецЕсли; 
	
	ОчиститьРеквизитыТабличнойЧасти("Товары", СписокРеквизитов);
	
	РаботаСНоменклатуройБП.ОбновитьСодержаниеУслуг(АгентскиеУслуги, Дата);
	
	ЗаполнениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	
	ИнтеграцияГИСМБП.УстановитьПризнакЕстьМаркируемаяПродукцияГИСМ(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ВидОперацииОснование = Неопределено;
	Если ВидОперации <> Перечисления.ВидыОперацийРозничнаяПродажа.Возврат Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Основание");
	Иначе
		ВидОперацииОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
	
	// Проверка: сумма безналичных оплат не должна превышать сумму по реализации товаров и услуг
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатыВРознице") 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа
		ИЛИ ВидОперацииОснование = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("СуммаПредоплаты");
		
		СуммаВыручки = Товары.Итог("Сумма") + ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДС"))
			+ АгентскиеУслуги.Итог("Сумма") + ?(СуммаВключаетНДС, 0, АгентскиеУслуги.Итог("СуммаНДС"))
			+ ПодарочныеСертификаты.Итог("Сумма") - Товары.Итог("СуммаСкидки");
	Иначе
			
		СуммаВыручки = СуммаПредоплаты;
	КонецЕсли;
		
	Если СуммаВыручки <= 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сумма по чеку должна быть больше нуля'"), ЭтотОбъект, ,"Объект",Отказ);
	ИначеЕсли Оплата.Итог("Сумма") > СуммаВыручки  Тогда
		
		ТекстОписаниеОшибки = НСтр("ru = 'Сумма безналичных оплат превышает сумму выручки от реализации!'");
		ТекстСообщения      = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Корректность",,, НСтр("ru = 'Безналичные оплаты'"), ТекстОписаниеОшибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Оплата", "Объект", Отказ);
		
	КонецЕсли;
	
	НужноПроверятьОстаткиТоваров = ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат
		И НЕ Проведен // Есть смысл проверять остатки пока не пробит чек (документ не проведен)
		И НЕ Основание.Пустая();
	
	Если НужноПроверятьОстаткиТоваров Тогда
		
		ОстаткиТоваровКВозврату = Документы.РозничнаяПродажа.ОстаткиТовараКВозвратуПоДокументу(Основание);
		ОстаткиТоваровКВозврату.Индексы.Добавить("Номенклатура");
		
	КонецЕсли;
	
	МассивНоменклатуры    = ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина);
	
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры, "Услуга");
	
	ИмяСписка = "Товары";
	Для каждого СтрокаТовары Из Товары Цикл
		
		Всего = СтрокаТовары.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТовары.СуммаНДС);
		Если СуммаСкидки > 0 
			ИЛИ СтрокаТовары.СуммаСкидки = 0 
			ИЛИ СтрокаТовары.СуммаСкидки < Всего Тогда
			
		Иначе
			Если СтрокаТовары.СуммаСкидки = Всего Тогда
				ТекстСообщения = НСтр("ru = 'Сумма скидки равна стоимости товара'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Сумма скидки превышает стоимость товара'");
			КонецЕсли;
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","КОРРЕКТНОСТЬ", НСтр("ru = 'Скидка'"),
					СтрокаТовары.НомерСтроки, ИмяСписка, ТекстСообщения);
					
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "СуммаСкидки");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		// Следующие проверки касаются только товаров (без услуг)
		СвойстваНоменклатуры = РеквизитыНоменклатуры[СтрокаТовары.Номенклатура];
		Если  СвойстваНоменклатуры <> Неопределено 
			И СвойстваНоменклатуры.Услуга Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТовары.Количество = 0 Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "Количество");
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", , 
				НСтр("ru = 'Количество'"), СтрокаТовары.НомерСтроки, ИмяСписка);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			// Не допускается ставка 0% по реализации товаров в рознице.
			Пояснение = НСтр("ru='Ставка 0% не применяется при реализации товаров в рознице'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "СтавкаНДС");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","Корректность",
				НСтр("ru = '% НДС'"), СтрокаТовары.НомерСтроки, ИмяСписка, Пояснение);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
		КонецЕсли; 
		
		Если НужноПроверятьОстаткиТоваров Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Цена", СтрокаТовары.Номенклатура, СтрокаТовары.Цена);
			НайденыеСтроки = ОстаткиТоваровКВозврату.НайтиСтроки(СтруктураПоиска);
			
			Если НайденыеСтроки.Количество() = 0 Тогда
				КоличествоОснование = 0;
			Иначе
				КоличествоОснование = НайденыеСтроки[0].Количество;
			КонецЕсли;
			
			Если СтрокаТовары.Количество > КоличествоОснование Тогда 
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяСписка, СтрокаТовары.НомерСтроки, "Количество");
				
				ТекстСообщения = НСтр("ru = 'Документом ""%1"" было реализовано ""%2"" по цене %3 %4 на ""%5"" ед. меньше, чем возвращается.'");
				ТекстСообщения = СтрШаблон(
					ТекстСообщения,
					СокрЛП(Основание),
					СтрокаТовары.Номенклатура,
					СтрокаТовары.Цена,
					ВалютаДокумента,
					(СтрокаТовары.Количество - КоличествоОснование));
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", 
					НСтр("ru = 'Количество'"), СтрокаТовары.НомерСтроки, ИмяСписка, ТекстСообщения);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ);
			КонецЕсли;
			
			Если НайденыеСтроки.Количество() <> 0 Тогда
				НайденыеСтроки[0].Количество = Макс(НайденыеСтроки[0].Количество - СтрокаТовары.Количество, 0);
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОчиститьРеквизитыТабличнойЧасти(ИмяТабличнойЧасти, СписокРеквизитов)
	Если ЭтотОбъект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	МассивПустыхЗначений = Новый Массив(ЭтотОбъект[ИмяТабличнойЧасти].Количество());
	
	Для каждого ИмяРеквизита Из СтрРазделить(СписокРеквизитов, ",") Цикл
		ЭтотОбъект[ИмяТабличнойЧасти].ЗагрузитьКолонку(МассивПустыхЗначений, ИмяРеквизита);
	КонецЦикла; 
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(ДокументОснование)
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РозничнаяПродажа") Тогда
		СвойстваОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование, 
			"ВидОперации, Организация,Склад, СуммаВключаетНДС, ТипЦен, ДокументБезНДС, СистемаНалогообложения, СуммаПредоплаты, СчетНаОплатуПокупателю");
		Если СвойстваОснования.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Предоплата Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваОснования,,"ВидОперации");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваОснования,,"ВидОперации, СуммаПредоплаты, СчетНаОплатуПокупателю");
		КонецЕсли;
		
		Основание = ДокументОснование;
		
		СкопироватьТабличныеЧасти(ДокументОснование);
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		СчетНаОплатуПокупателю = ДокументОснование;
		
		ЗаполнитьПоСчетуНаОплатуПокупателю(СчетНаОплатуПокупателю);
	КонецЕсли;
	
	Если НЕ СчетНаОплатуПокупателю.Пустая() 
		И ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатыВРознице") Тогда
		
		ЗаполнитьСуммуОплатыПоСчету();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(ДокументОснование)
	// Заполнение шапки
	ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДокументОснование, "Организация, Склад, СуммаВключаетНДС, ТипЦен, ДокументБезНДС, СуммаСкидки");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОбъекта);
		
	ТоварыУслугиКРеализацииПоСчету = Документы.СчетНаОплатуПокупателю.ТоварыУслугиКРеализацииПоСчету(
		ДокументОснование, 
		Документы.СчетНаОплатуПокупателю.РеализацииПоСчету(ДокументОснование));
		
	// включим скидку обратно в сумму по строкам
	Для каждого СтрокаТабличнойЧасти Из ТоварыУслугиКРеализацииПоСчету Цикл
		Если СтрокаТабличнойЧасти.СуммаСкидки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаСкидки;
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, 
			?(СтрокаТабличнойЧасти.ЭтоУслуга, 1, 0));
	КонецЦикла;
		
	Товары.Загрузить(ТоварыУслугиКРеализацииПоСчету);
КонецПроцедуры

Функция ЭтоВозвратПредоплаты()
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатыВРознице") 
		ИЛИ ВидОперации <> Перечисления.ВидыОперацийРозничнаяПродажа.Возврат Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ВидОперацииОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
	Возврат ВидОперацииОснование = Перечисления.ВидыОперацийРозничнаяПродажа.Предоплата;
КонецФункции 

Процедура РассчитатьСуммуДокумента()
	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Предоплата 
		ИЛИ ЭтоВозвратПредоплаты() Тогда
		
		// Для предоплаты и возврата предоплаты пишем в журнал сумму предоплаты
		СуммаДокумента = СуммаПредоплаты;
	Иначе
		// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
		СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
			+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги")
			+ ПодарочныеСертификаты.Итог("Сумма");
	КонецЕсли;
КонецПроцедуры

Функция ТекстЗапросаДанныеТабличныхЧастей(СписокТабличныхЧастей, ВидОперации)
	
	СписокТабличныхЧастей.Вставить("Товары",                СписокТабличныхЧастей.Количество());
	СписокТабличныхЧастей.Вставить("АгентскиеУслуги",       СписокТабличныхЧастей.Количество());
	СписокТабличныхЧастей.Вставить("ПодарочныеСертификаты", СписокТабличныхЧастей.Количество());
	
	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Возврат Тогда
		СписокТабличныхЧастей.Вставить("Оплата",            СписокТабличныхЧастей.Количество());
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РозничнаяПродажаТовары.Ссылка КАК Ссылка,
	|	РозничнаяПродажаТовары.НомерСтроки КАК НомерСтроки,
	|	РозничнаяПродажаТовары.Номенклатура КАК Номенклатура,
	|	РозничнаяПродажаТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА РозничнаяПродажаТовары.СуммаСкидки = 0
	|			ТОГДА РозничнаяПродажаТовары.Цена
	|		КОГДА РозничнаяПродажаТовары.Количество = 0
	|				И НЕ РозничнаяПродажа.СуммаВключаетНДС
	|			ТОГДА РозничнаяПродажаТовары.Сумма - РозничнаяПродажаТовары.СуммаСкидки
	|		КОГДА РозничнаяПродажаТовары.Количество = 0
	|				И РозничнаяПродажа.СуммаВключаетНДС
	|			ТОГДА РозничнаяПродажаТовары.Сумма - РозничнаяПродажаТовары.СуммаСкидки - РозничнаяПродажаТовары.СуммаНДС
	|		КОГДА РозничнаяПродажаТовары.Количество = 0
	|				И РозничнаяПродажа.СуммаВключаетНДС
	|			ТОГДА ВЫРАЗИТЬ((РозничнаяПродажаТовары.Сумма - РозничнаяПродажаТовары.СуммаСкидки - РозничнаяПродажаТовары.СуммаНДС) / РозничнаяПродажаТовары.Количество КАК ЧИСЛО(19, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ((РозничнаяПродажаТовары.Сумма - РозничнаяПродажаТовары.СуммаСкидки) / РозничнаяПродажаТовары.Количество КАК ЧИСЛО(19, 2))
	|	КОНЕЦ КАК Цена,
	|	РозничнаяПродажаТовары.Сумма - РозничнаяПродажаТовары.СуммаСкидки КАК Сумма,
	|	РозничнаяПродажаТовары.СтавкаНДС КАК СтавкаНДС,
	|	РозничнаяПродажаТовары.СуммаНДС КАК СуммаНДС,
	|	РозничнаяПродажаТовары.КиЗ_ГИСМ КАК КиЗ_ГИСМ,
	|	РозничнаяПродажаТовары.АкцизнаяМарка КАК АкцизнаяМарка,
	|	РозничнаяПродажаТовары.Справка2 КАК Справка2,
	|	РозничнаяПродажаТовары.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	РозничнаяПродажаТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	РозничнаяПродажаТовары.Штрихкод КАК Штрихкод
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО РозничнаяПродажаТовары.Ссылка = РозничнаяПродажа.Ссылка
	|ГДЕ
	|	(РозничнаяПродажа.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Продажа)
	|			ИЛИ НЕ РозничнаяПродажаТовары.Номенклатура.Услуга
	|			ИЛИ РозничнаяПродажаТовары.Ссылка.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка))
	|	И РозничнаяПродажаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяПродажаАгентскиеУслуги.Ссылка КАК Ссылка,
	|	РозничнаяПродажаАгентскиеУслуги.НомерСтроки КАК НомерСтроки,
	|	РозничнаяПродажаАгентскиеУслуги.Номенклатура КАК Номенклатура,
	|	РозничнаяПродажаАгентскиеУслуги.Содержание КАК Содержание,
	|	РозничнаяПродажаАгентскиеУслуги.Количество КАК Количество,
	|	РозничнаяПродажаАгентскиеУслуги.Цена КАК Цена,
	|	РозничнаяПродажаАгентскиеУслуги.Сумма КАК Сумма,
	|	РозничнаяПродажаАгентскиеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	РозничнаяПродажаАгентскиеУслуги.СуммаНДС КАК СуммаНДС,
	|	РозничнаяПродажаАгентскиеУслуги.Контрагент КАК Контрагент,
	|	РозничнаяПродажаАгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.РозничнаяПродажа.АгентскиеУслуги КАК РозничнаяПродажаАгентскиеУслуги
	|ГДЕ
	|	РозничнаяПродажаАгентскиеУслуги.Ссылка = &Ссылка
	|	И РозничнаяПродажаАгентскиеУслуги.Ссылка.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяПродажаПодарочныеСертификаты.Ссылка КАК Ссылка,
	|	РозничнаяПродажаПодарочныеСертификаты.НомерСтроки КАК НомерСтроки,
	|	РозничнаяПродажаПодарочныеСертификаты.ВидОплаты КАК ВидОплаты,
	|	РозничнаяПродажаПодарочныеСертификаты.Сумма КАК Сумма
	|ИЗ
	|	Документ.РозничнаяПродажа.ПодарочныеСертификаты КАК РозничнаяПродажаПодарочныеСертификаты
	|ГДЕ
	|	РозничнаяПродажаПодарочныеСертификаты.Ссылка = &Ссылка
	|	И РозничнаяПродажаПодарочныеСертификаты.Ссылка.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяПродажаОплата.Ссылка КАК Ссылка,
	|	РозничнаяПродажаОплата.НомерСтроки КАК НомерСтроки,
	|	РозничнаяПродажаОплата.ВидОплаты КАК ВидОплаты,
	|	РозничнаяПродажаОплата.Сумма КАК Сумма,
	|	РозничнаяПродажаОплата.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	РозничнаяПродажаОплата.СсылочныйНомер КАК СсылочныйНомер,
	|	РозничнаяПродажаОплата.НомерЧекаЭТ КАК НомерЧекаЭТ,
	|	РозничнаяПродажаОплата.ИдентификаторКорзины КАК ИдентификаторКорзины,
	|	РозничнаяПродажаОплата.СуммаСертификатамиНСПК КАК СуммаСертификатамиНСПК
	|ИЗ
	|	Документ.РозничнаяПродажа.Оплата КАК РозничнаяПродажаОплата
	|ГДЕ
	|	РозничнаяПродажаОплата.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура СкопироватьТабличныеЧасти(Основание) Экспорт
	СписокТабличныхЧастей = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеТабличныхЧастей(СписокТабличныхЧастей, ВидОперации);
	
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатаЗапроса = Запрос.ВыполнитьПакет();
	
	Для каждого ТабличнаяЧасть Из СписокТабличныхЧастей Цикл
		ЭтотОбъект[ТабличнаяЧасть.Ключ].Загрузить(РезультатаЗапроса[ТабличнаяЧасть.Значение].Выгрузить());
	КонецЦикла;
	
	СуммаДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаДокумента");
	
	РассчитатьСуммуДокумента();
	
	Если Оплата.Количество() > 0 И СуммаДокумента <> СуммаДокументаОснования Тогда
		СуммаБезналичнойОплаты = Оплата.Итог("Сумма")*СуммаДокумента/СуммаДокументаОснования;
		Если СуммаБезналичнойОплаты = 0 Тогда
			Оплата.Очистить();
		Иначе
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаБезналичнойОплаты, Оплата, "Сумма");
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСуммуОплатыПоСчету()
	ОплатаПоСчету = РегистрыНакопления.ОплатаСчетов.ОплатаПоСчету(Организация, СчетНаОплатуПокупателю);
	
	СуммаОплатыПоСчету = 
		ОплатаПоСчету.СуммаОплаты // Предоплата принятая чеками закрытой смены
		+ СуммаОплатыПоСчету(СчетНаОплатуПокупателю) // Предоплата принятая чеками открытой смены
		- СуммаЗачетаОплатыПоСчету(СчетНаОплатуПокупателю); // Предоплата зачтенная чеками на продажу
		
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") 
		+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "АгентскиеУслуги")
		+ ПодарочныеСертификаты.Итог("Сумма");
	
	СуммаОплатыПоСчету = Мин(СуммаОплатыПоСчету, СуммаДокумента);
	Если ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Предоплата Тогда
		СуммаПредоплаты = СуммаДокумента - СуммаОплатыПоСчету;
	Иначе
		СуммаПредоплаты = СуммаОплатыПоСчету;
	КонецЕсли;
КонецПроцедуры

Функция СуммаЗачетаОплатыПоСчету(СчетНаОплатуПокупателю)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетНаОплатуПокупателю);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РозничнаяПродажа.СуммаДокумента), 0) КАК СуммаЗачета
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|ГДЕ
	|	РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Продажа)
	|	И РозничнаяПродажа.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И РозничнаяПродажа.Проведен";
	
	ВыборкаЗапрос = Запрос.Выполнить().Выбрать();
	
	СуммаЗачета = 0;
	Если ВыборкаЗапрос.Следующий() Тогда
		СуммаЗачета = ВыборкаЗапрос.СуммаЗачета;
	КонецЕсли;

	Возврат СуммаЗачета;
КонецФункции

Функция СуммаОплатыПоСчету(СчетНаОплатуПокупателю)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СчетНаОплатуПокупателю);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РозничнаяПродажа.СуммаПредоплаты), 0) КАК СуммаОплаты
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|ГДЕ
	|	РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Предоплата)
	|	И РозничнаяПродажа.СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю
	|	И РозничнаяПродажа.Проведен
	|	И РозничнаяПродажа.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)";
	
	ВыборкаЗапрос = Запрос.Выполнить().Выбрать();
	
	СуммаОплаты = 0;
	Если ВыборкаЗапрос.Следующий() Тогда
		СуммаОплаты = ВыборкаЗапрос.СуммаОплаты;
	КонецЕсли;

	Возврат СуммаОплаты;
КонецФункции 


#КонецОбласти

#КонецЕсли







