#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ОстаткиТовараКВозвратуПоДокументу(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РозничнаяПродажаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА РозничнаяПродажаТовары.СуммаСкидки = 0
	|			ТОГДА РозничнаяПродажаТовары.Цена
	|		КОГДА РозничнаяПродажаТовары.Количество = 0
	|				И НЕ РозничнаяПродажа.СуммаВключаетНДС
	|			ТОГДА РозничнаяПродажаТовары.Сумма - РозничнаяПродажаТовары.СуммаСкидки
	|		КОГДА РозничнаяПродажаТовары.Количество = 0
	|				И РозничнаяПродажа.СуммаВключаетНДС
	|			ТОГДА РозничнаяПродажаТовары.Сумма - РозничнаяПродажаТовары.СуммаСкидки - РозничнаяПродажаТовары.СуммаНДС
	|		КОГДА РозничнаяПродажаТовары.Количество = 0
	|				И РозничнаяПродажа.СуммаВключаетНДС
	|			ТОГДА ВЫРАЗИТЬ((РозничнаяПродажаТовары.Сумма - РозничнаяПродажаТовары.СуммаСкидки - РозничнаяПродажаТовары.СуммаНДС) / РозничнаяПродажаТовары.Количество КАК ЧИСЛО(19, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ((РозничнаяПродажаТовары.Сумма - РозничнаяПродажаТовары.СуммаСкидки) / РозничнаяПродажаТовары.Количество КАК ЧИСЛО(19, 2))
	|	КОНЕЦ КАК Цена,
	|	РозничнаяПродажаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаТовары
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО РозничнаяПродажаТовары.Ссылка = РозничнаяПродажа.Ссылка
	|ГДЕ
	|	РозничнаяПродажаТовары.Ссылка = &Ссылка
	|	И РозничнаяПродажаТовары.Номенклатура.Услуга = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РозничнаяПродажаТовары.Номенклатура,
	|	РозничнаяПродажаТовары.Цена,
	|	-РозничнаяПродажаТовары.Количество
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ПО РозничнаяПродажа.Ссылка = РозничнаяПродажаТовары.Ссылка
	|ГДЕ
	|	РозничнаяПродажа.Основание = &Ссылка
	|	И РозничнаяПродажа.Проведен
	|	И РозничнаяПродажаТовары.Номенклатура.Услуга = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВТ_ТаблицаТовары.Цена КАК Цена,
	|	СУММА(ВТ_ТаблицаТовары.Количество) КАК Количество
	|ИЗ
	|	ВТ_ТаблицаТовары КАК ВТ_ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаТовары.Номенклатура,
	|	ВТ_ТаблицаТовары.Цена";
	

	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры
 

#КонецОбласти

Функция СписокНалоговыхРежимовДляПечатиЧека(Организация, Склад = Неопределено, Дата = Неопределено) Экспорт
	
	СписокНалоговыхРежимовДляПечатиЧека = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьФискальныйРегистратор") И ЗначениеЗаполнено(Организация) Тогда
		СписокНалоговыхРежимовККТ = ПечатьФискальныхДокументов.НалоговыеРежимыДляПечатиЧека(Организация, Склад);
	Иначе
		СписокНалоговыхРежимовККТ = Неопределено;
	КонецЕсли; 
	
	Если СписокНалоговыхРежимовККТ = Неопределено Тогда
		СписокНалоговыхРежимовККТ = Новый Массив;
		
		Для Индекс = 0 По Перечисления.ТипыСистемНалогообложенияККТ.Количество()-1 Цикл
			СписокНалоговыхРежимовККТ.Добавить(Перечисления.ТипыСистемНалогообложенияККТ.Получить(Индекс));
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ДатаПолученияСведений = ОбщегоНазначения.РабочаяДатаПользователя();
	Иначе
		ДатаПолученияСведений = Дата;
	КонецЕсли; 
	
	Для каждого НалоговыйРежим Из СписокНалоговыхРежимовККТ Цикл
	
		Если НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход Тогда
			Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ДатаПолученияСведений)
				Или УчетнаяПолитика.ПрименяетсяАУСНДоходы(Организация, ДатаПолученияСведений) Тогда
				СписокНалоговыхРежимовДляПечатиЧека.Добавить(НалоговыйРежим);
			КонецЕсли;
		ИначеЕсли НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход Тогда
			Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаПолученияСведений)
				Или УчетнаяПолитика.ПрименяетсяАУСНДоходыМинусРасходы(Организация, ДатаПолученияСведений) Тогда
				СписокНалоговыхРежимовДляПечатиЧека.Добавить(НалоговыйРежим);
			КонецЕсли;
		ИначеЕсли НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.Патент Тогда
			Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ДатаПолученияСведений) Тогда
				СписокНалоговыхРежимовДляПечатиЧека.Добавить(НалоговыйРежим);
			КонецЕсли;
		ИначеЕсли НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ОСН Тогда
			Если (УчетнаяПолитика.ПлательщикНДФЛ(Организация, ДатаПолученияСведений) 
				Или УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаПолученияСведений)) Тогда
				СписокНалоговыхРежимовДляПечатиЧека.Добавить(НалоговыйРежим);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокНалоговыхРежимовДляПечатиЧека;
КонецФункции

Функция ТекстЗапросаРеализацииПоСчетам() Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РозничнаяПродажа.СчетНаОплатуПокупателю КАК СчетНаОплату,
	|	РозничнаяПродажа.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|ГДЕ
	|	РозничнаяПродажа.СчетНаОплатуПокупателю В(&СчетаНаОплату)
	|	И РозничнаяПродажа.Проведен
	|	И РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Продажа)";
	
	Возврат ТекстЗапроса;
КонецФункции 

Функция ТекстЗапросаРеализованнаяНоменклатураПоСчету() Экспорт
	
	ТекстЗапросаРеализованнаяНоменклатураПоСчету = 
	"ВЫБРАТЬ
	|	РозничнаяПродажаТовары.Номенклатура.Услуга КАК НоменклатураУслуга,
	|	РозничнаяПродажаТовары.Номенклатура КАК Номенклатура,
	|	"""" КАК Содержание,
	|	РозничнаяПродажаТовары.Цена КАК Цена,
	|	РозничнаяПродажаТовары.Количество КАК Количество
	|ИЗ
	|	ВТ_РеализацииПоСчету КАК ВТ_РеализацииПоСчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ПО ВТ_РеализацииПоСчету.РеализацияТоваров = РозничнаяПродажаТовары.Ссылка
	|ГДЕ
	|	НЕ РозничнаяПродажаТовары.Ссылка ЕСТЬ NULL";
	
	Возврат ТекстЗапросаРеализованнаяНоменклатураПоСчету;
КонецФункции 

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Документы.РозничнаяПродажа) Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаДокументаОбщая";
		
		Возврат;
	КонецЕсли;

	ВидОперацииОснование = Неопределено;
	
	ВидОперации = Неопределено;
	СистемаНалогообложения = Неопределено;
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Ключ, "ВидОперации, СистемаНалогообложения");
		
		ВидОперации            = ЗначенияРеквизитов.ВидОперации;
		СистемаНалогообложения = ЗначенияРеквизитов.СистемаНалогообложения;
	КонецЕсли;
	
	// Если документ копируется, то вид операции получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) 
		И Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Параметры.ЗначениеКопирования, "ВидОперации");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = СвойствоСтруктуры(Параметры, "ЗначенияЗаполнения.ВидОперации");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СистемаНалогообложения)
		И Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
		СистемаНалогообложения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Параметры.ЗначениеКопирования, "СистемаНалогообложения");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		СистемаНалогообложения = СвойствоСтруктуры(Параметры, "ЗначенияЗаполнения.СистемаНалогообложения");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации)
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатыВРознице")
		И Параметры.Свойство("Основание")
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СистемаНалогообложения) Тогда
		
		Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Организация")  Тогда
			Организация = Параметры.ЗначенияЗаполнения.Организация;
		ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Организация = Общегоназначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "Организация");
		ИначеЕсли Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
			Организация = Общегоназначения.ЗначениеРеквизитаОбъекта(Параметры.Основание, "Организация");
		Иначе
			Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли; 
		
		Склад = Неопределено;
		Если НЕ (Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Склад", Склад))  Тогда
			Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
		КонецЕсли; 
		
		// Если СНО только одна - то ее и подставляем
		СистемыНалогообложения = Документы.РозничнаяПродажа.СписокНалоговыхРежимовДляПечатиЧека(Организация, Склад);
		Если СистемыНалогообложения.Количество() = 1 Тогда
			СистемаНалогообложения = СистемыНалогообложения[0];
			Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
				Параметры.ЗначенияЗаполнения.Вставить("СистемаНалогообложения", СистемаНалогообложения);
			КонецЕсли; 
		ИначеЕсли СистемыНалогообложения.Количество() = 0 Тогда
			// Нет доступных систем - выбор показывать бесполезно
			СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка();
		КонецЕсли; 
	
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	ФормыДокумента = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыДокумента[ВидОперации];
	Если ВыбраннаяФорма = Неопределено ИЛИ СистемаНалогообложения = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтерфейсПечати

Функция ТекстЗапросаТоварныйЧек()
	Возврат
		"ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.ВидОперации КАК ВидОперации,
		|	РозничнаяПродажа.Организация КАК Организация,
		|	РозничнаяПродажа.Дата КАК Дата,
		|	РозничнаяПродажа.Номер КАК Номер,
		|	РозничнаяПродажа.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ВЫБОР СправочникНоменклатура.НаименованиеПолное
		|		КОГДА """"
		|			ТОГДА СправочникНоменклатура.Наименование
		|		ИНАЧЕ СправочникНоменклатура.НаименованиеПолное
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
		|			ТОГДА ТаблицаТовары.Номенклатура.Код
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
		|			ТОГДА ТаблицаТовары.Номенклатура.Артикул
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Код,
		|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.Количество КАК Количество,
		|	ТаблицаТовары.Цена КАК Цена,
		|	ТаблицаТовары.Сумма - ТаблицаТовары.СуммаСкидки КАК Сумма,
		|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.Номенклатура.ПериодичностьУслуги КАК ПериодичностьУслуги,
		|	1 КАК НомерТабличнойЧасти,
		|	ТаблицаТовары.СуммаСкидки КАК СуммаСкидки
		|ИЗ
		|	Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|		ПО ТаблицаТовары.Ссылка = РозничнаяПродажа.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	РозничнаяПродажа.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка,
		|	РозничнаяПродажа.ВидОперации,
		|	РозничнаяПродажа.Организация,
		|	РозничнаяПродажа.Дата,
		|	РозничнаяПродажа.Номер,
		|	РозничнаяПродажа.СуммаВключаетНДС,
		|	ВЫБОР ТаблицаАгентскиеУслуги.Содержание
		|		КОГДА """"
		|			ТОГДА ВЫБОР СправочникНоменклатура.НаименованиеПолное
		|					КОГДА """"
		|						ТОГДА СправочникНоменклатура.Наименование
		|					ИНАЧЕ СправочникНоменклатура.НаименованиеПолное
		|				КОНЕЦ
		|		ИНАЧЕ ТаблицаАгентскиеУслуги.Содержание
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
		|			ТОГДА ЕСТЬNULL(ТаблицаАгентскиеУслуги.Номенклатура.Код, НЕОПРЕДЕЛЕНО)
		|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
		|			ТОГДА ЕСТЬNULL(ТаблицаАгентскиеУслуги.Номенклатура.Артикул, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ЕСТЬNULL(ТаблицаАгентскиеУслуги.Номенклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО),
		|	ТаблицаАгентскиеУслуги.Количество,
		|	ТаблицаАгентскиеУслуги.Цена,
		|	ТаблицаАгентскиеУслуги.Сумма,
		|	ТаблицаАгентскиеУслуги.СуммаНДС,
		|	ТаблицаАгентскиеУслуги.НомерСтроки,
		|	NULL,
		|	2,
		|	0
		|ИЗ
		|	Документ.РозничнаяПродажа.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|		ПО ТаблицаАгентскиеУслуги.Ссылка = РозничнаяПродажа.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаАгентскиеУслуги.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	РозничнаяПродажа.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерТабличнойЧасти,
		|	НомерСтроки
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(СуммаНДС),
		|	СУММА(СуммаСкидки)
		|ПО
		|	Ссылка";
КонецФункции

Функция ПечатьТоварныйЧек(МассивОбъектов, ОбъектыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РозничнаяПродажа_ТоварныйЧек";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос.Текст = ТекстЗапросаТоварныйЧек();
	
	ДанныеЗаполнения = Новый Структура;
	
	ПервыйДокумент = Истина;
	
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РозничнаяПродажа.ПФ_MXL_ТоварныйЧек");
		
		ВыводитьСкидку = (Шапка.СуммаСкидки > 0);
		ЕстьОбластьСкидка = Макет.Области.Найти("Скидка") <> Неопределено;
		
		ОбластьКолонкаТовар = Макет.Область("Запас");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		Если НЕ ВыводитьСкидку И ЕстьОбластьСкидка Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + Макет.Область("Скидка").ШиринаКолонки;
		КонецЕсли; 
		
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ШапкаТаблицы        = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ШапкаТаблицыКоды    = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ШапкаТаблицыДанные  = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьПоставщик    = Макет.ПолучитьОбласть("Поставщик");
		ОбластьСтрока       = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьСтрокаКоды   = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьСтрокаДанные = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьИтого        = Макет.ПолучитьОбласть("Итого");
		ОбластьПодписи      = Макет.ПолучитьОбласть("Подписи");
		
		Если ЕстьОбластьСкидка Тогда
			ШапкаТаблицыСумма   = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
			ШапкаТаблицыСкидка  = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
			
			ОбластьСтрокаСкидка = Макет.ПолучитьОбласть("Строка|Скидка");
			ОбластьСтрокаСумма  = Макет.ПолучитьОбласть("Строка|Сумма");
		КонецЕсли;
		
		// Начало фиксации формата шапки документа
		НачалоНовогоФормата = ТабличныйДокумент.ВысотаТаблицы;
		
		ВидДокумента = ?(Шапка.ВидОперации <> Перечисления.ВидыОперацийРозничнаяПродажа.Возврат, НСтр("ru = 'Товарный чек'"), НСтр("ru = 'Возврат товаров'"));
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru ='%1 № %2 от %3'"), ВидДокумента, Шапка.Номер, Формат(Шапка.Дата, "ДЛФ=DD"));
		ОбластьЗаголовок.Параметры.Заполнить(Новый Структура("ТекстЗаголовка", ТекстЗаголовка));
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, 
				"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьПоставщик.Параметры.Заполнить(Новый Структура("ПредставлениеПоставщика", ПредставлениеПоставщика));
		
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		
		ТабличныйДокумент.Область(НачалоНовогоФормата+1,,ТабличныйДокумент.ВысотаТаблицы).СоздатьФорматСтрок();
		// Конец фиксации формата шапки документа
		
		// Начало фиксации формата таблицы документа
		НачалоНовогоФормата = ТабличныйДокумент.ВысотаТаблицы;
		
		ТабличныйДокумент.Вывести(ШапкаТаблицы);
		Если ВыводитьКоды Тогда
			ДанныеПечатиКолонкиКодов = Новый Структура;
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Артикул");
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ДанныеПечатиКолонкиКодов.Вставить("ИмяКолонкиКодов", "Код");
			КонецЕсли;
			ШапкаТаблицыКоды.Параметры.Заполнить(ДанныеПечатиКолонкиКодов);
			ТабличныйДокумент.Присоединить(ШапкаТаблицыКоды);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ШапкаТаблицыДанные);
		
		
		Если НЕ ЕстьОбластьСкидка Тогда
			// Измененный макет
		Иначе
			Если ВыводитьСкидку Тогда
				ТабличныйДокумент.Присоединить(ШапкаТаблицыСкидка);
			КонецЕсли; 
			ТабличныйДокумент.Присоединить(ШапкаТаблицыСумма);
		КонецЕсли; 
		
		НомерСтроки = 0;
		ВыборкаПоДокументу = Шапка.Выбрать();
		Пока ВыборкаПоДокументу.Следующий() Цикл
			НомерСтроки = НомерСтроки + 1;
			
			ДанныеЗаполнения = Новый Структура("НомерСтроки", НомерСтроки);
			ОбластьСтрока.Параметры.Заполнить(ДанныеЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаКоды.Параметры.Заполнить(ВыборкаПоДокументу);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаКоды);
			КонецЕсли;
			
			Номенклатура = РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(
				ВыборкаПоДокументу.Номенклатура, ВыборкаПоДокументу.ПериодичностьУслуги, Шапка.Дата);
				
			ДанныеЗаполнения = Новый Структура("Номенклатура", Номенклатура);
			
			ОбластьСтрокаДанные.Параметры.Заполнить(ВыборкаПоДокументу);
			ОбластьСтрокаДанные.Параметры.Заполнить(ДанныеЗаполнения);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаДанные);
			
			Если НЕ ЕстьОбластьСкидка Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ВыводитьСкидку Тогда
				ОбластьСтрокаСкидка.Параметры.Заполнить(ВыборкаПоДокументу);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаСкидка);
			КонецЕсли; 
			
			ОбластьСтрокаСумма.Параметры.Заполнить(ВыборкаПоДокументу);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаСумма);
			
		КонецЦикла;
		
		ТабличныйДокумент.Область(НачалоНовогоФормата+1,,ТабличныйДокумент.ВысотаТаблицы).СоздатьФорматСтрок();
		// Конец фиксации формата таблицы документа
		
		Всего = Шапка.Сумма + ?(Шапка.СуммаВключаетНДС, 0, Шапка.СуммаНДС);
		
		Если Шапка.СуммаНДС <> 0 Тогда
			ЗаголовокНДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = 'Сумма НДС'"));
		Иначе
			ЗаголовокНДС      = НСтр("ru='Без налога (НДС)'");
		КонецЕсли;
		
		ДанныеЗаполнения.Очистить();
		ДанныеЗаполнения.Вставить("Сумма",        ОбщегоНазначенияБПВызовСервера.ФорматСумм(Шапка.Сумма));
		ДанныеЗаполнения.Вставить("ЗаголовокНДС", ЗаголовокНДС);
		ДанныеЗаполнения.Вставить("СуммаНДС",     ОбщегоНазначенияБПВызовСервера.ФорматСумм(Шапка.СуммаНДС,,"-"));
		ДанныеЗаполнения.Вставить("Всего",        ОбщегоНазначенияБПВызовСервера.ФорматСумм(Всего));
		
		ОбластьИтого.Параметры.Заполнить(ДанныеЗаполнения);
		
		ДанныеПечатиСуммаПрописью = Новый Структура("ИтоговаяСтрока, СуммаПрописью");
		ДанныеПечатиСуммаПрописью.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Всего наименований %1, на сумму %2'"),
			НомерСтроки, ОбщегоНазначенияБПВызовСервера.ФорматСумм(Всего, Константы.ВалютаРегламентированногоУчета.Получить()));
		ДанныеПечатиСуммаПрописью.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(Всего, Константы.ВалютаРегламентированногоУчета.Получить());
		
		ОбластьИтого.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
		
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек", "Товарный чек", 
			ПечатьТоварныйЧек(МассивОбъектов, ОбъектыПечати), , "Документ.РозничнаяПродажа.ПФ_MXL_ТоварныйЧек");
		
	КонецЕсли;
		
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	//КомандаПечати.СписокФорм = "ФормаДокументаОбщая, ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	Если ПравоДоступа("Использование", Метаданные.Отчеты.РеестрДокументов) Тогда
		// Реестр документов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор  = "Реестр";
		КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
		КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Розничная продажа (чек)""'");
		КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
		КомандаПечати.СписокФорм     = "ФормаСписка";
		КомандаПечати.Порядок        = 100;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд отправки по электронной почте.
// 
// Параметры:
//   КомандыОтправки - ТаблицаЗначений - состав полей см. в функции ОтправкаПочтовыхСообщений.КомандыОтправки
//
Процедура ДобавитьКомандыОтправки(КомандыОтправки) Экспорт
	
	КомандаОтправки = КомандыОтправки.Добавить();
	КомандаОтправки.Идентификатор               = "ТоварныйЧек";
	КомандаОтправки.Представление               = НСтр("ru = 'Товарный чек'");
	КомандаОтправки.Порядок                     = 1;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
		
		Возврат ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

Функция ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРозничнаяПродажа.Ссылка КАК Ссылка,
	|	ДокументРозничнаяПродажа.Номер КАК Номер,
	|	ДокументРозничнаяПродажа.Дата КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	ДокументРозничнаяПродажа.Ссылка КАК ДокументОснование,
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
	|	КлассификаторОрганизацийЕГАИС.Код КАК ИдентификаторФСРАР,
	|	ВЫБОР
	|		КОГДА ДокументРозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Продажа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекаЕГАИС.РеализацияРозничномуПокупателю)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекаЕГАИСВозврат.ВозвратОтРозничногоПокупателя)
	|	КОНЕЦ КАК ВидОперации,
	|	КлассификаторОрганизацийЕГАИС.ФорматОбмена КАК ФорматОбмена,
	|	КлассификаторОрганизацийЕГАИС.ИНН КАК ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП КАК КПП,
	|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
	|	&АдресТорговогоОбъекта КАК АдресТорговогоОбъекта,
	|	&Кассир КАК Ответственный,
	|	&НомерСмены КАК НомерСмены,
	|	&НомерЧека КАК НомерЧекаККМ,
	|	&СерийныйНомер КАК СерийныйНомерККМ
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.РозничнаяПродажа КАК ДокументРозничнаяПродажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО ДокументРозничнаяПродажа.Ссылка = Версии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ДокументРозничнаяПродажа.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|ГДЕ
	|	ДокументРозничнаяПродажа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	Шапка.Номер КАК Номер,
	|	Шапка.Дата КАК Дата,
	|	Шапка.ПоследнийНомерВерсии КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование КАК ДокументОснование,
	|	Шапка.ВидОперации КАК ВидОперации,
	|	Шапка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	Шапка.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	Шапка.ФорматОбмена КАК ФорматОбмена,
	|	Шапка.ИНН КАК ИНН,
	|	Шапка.КПП КАК КПП,
	|	Шапка.ТорговыйОбъект КАК ТорговыйОбъект,
	|	Шапка.АдресТорговогоОбъекта КАК АдресТорговогоОбъекта,
	|	Шапка.Ответственный КАК Ответственный,
	|	Шапка.НомерСмены КАК НомерСмены,
	|	Шапка.НомерЧекаККМ КАК НомерЧекаККМ,
	|	Шапка.СерийныйНомерККМ КАК СерийныйНомерККМ
	|ИЗ
	|	Шапка КАК Шапка", "Шапка");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	РозничнаяПродажаТовары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ВТ_ШтрихкодыНоменклатуры
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО РозничнаяПродажаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	РозничнаяПродажаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РозничнаяПродажаТовары.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыНоменклатуры.Штрихкод) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК ИдентификаторСтроки,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ВЫБОР Шапка.ВидОперации
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Продажа)
	|			ТОГДА ТабличнаяЧасть.Цена
	|		ИНАЧЕ -ТабличнаяЧасть.Цена
	|	КОНЕЦ КАК Цена,
	|	ЕСТЬNULL(ВТ_ШтрихкодыНоменклатуры.Штрихкод, ""0000000000000"") КАК Штрихкод,
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.АлкогольнаяПродукция.Объем КАК Объем
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК Шапка
	|		ПО ТабличнаяЧасть.Ссылка = Шапка.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ШтрихкодыНоменклатуры КАК ВТ_ШтрихкодыНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = ВТ_ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)",
		"Товары");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Шапка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТабличнаяЧасть.НомерСтроки КАК ИдентификаторСтроки,
	|	ЕСТЬNULL(ТабличнаяЧасть.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Справка2 КАК Справка2,
	|	ТабличнаяЧасть.АкцизнаяМарка КАК ШтрихкодУпаковки,
	|	ТабличнаяЧасть.ШтрихкодУпаковки КАК ШтрихкодРодительскойУпаковки
	|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
	|		ПО ТабличнаяЧасть.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодУпаковки,
	|	ШтрихкодРодительскойУпаковки");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "АлкогольнаяПродукция";
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось отправить чек в ЕГАИС'");
	Иначе
		НомерЧека             = ДополнительныеПараметры.НомерЧека;
		НомерСмены            = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер         = ДополнительныеПараметры.СерийныйНомер;
		АдресТорговогоОбъекта = ДополнительныеПараметры.АдресТорговогоОбъекта;
	КонецЕсли;
	
	ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация, Дата, ВидОперации");
	
	ДанныеКассира = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛицаТекущегоПользователя(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
	
	Запрос.УстановитьПараметр("НомерЧека",             НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",            НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер",         СерийныйНомер);
	Запрос.УстановитьПараметр("АдресТорговогоОбъекта", АдресТорговогоОбъекта);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	Если ДанныеКассира.Представление <> Неопределено Тогда
		Кассир = СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление));
	Иначе
		Кассир = НСтр("ru = 'Администратор'");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Кассир", Кассир);
	
	РезультатыЗапроса = ГосударственныеИнформационныеСистемы.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
КонецФункции

Функция ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	0    КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                          КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка  КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	&АдресТорговогоОбъекта                       КАК АдресТорговогоОбъекта,
		|	&КАссир                                 КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.РозничнаяПродажа КАК Шапка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.Склад = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	РозничнаяПродажаТовары.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
	|ПОМЕСТИТЬ ВТ_ШтрихкодыНоменклатуры
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО РозничнаяПродажаТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	РозничнаяПродажаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РозничнаяПродажаТовары.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыНоменклатуры.Штрихкод) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК ИдентификаторСтроки,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Количество КАК Количество,
	|	-Товары.Цена КАК Цена,
	|	ЕСТЬNULL(ВТ_ШтрихкодыНоменклатуры.Штрихкод, ""0000000000000"") КАК Штрихкод,
	|	Товары.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	Товары.АлкогольнаяПродукция.Объем КАК Объем
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ШтрихкодыНоменклатуры КАК ВТ_ШтрихкодыНоменклатуры
	|		ПО Товары.Номенклатура = ВТ_ШтрихкодыНоменклатуры.Номенклатура
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.АлкогольнаяПродукция.ВидПродукции.Маркируемый = ИСТИНА",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.НомерСтроки КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.Справка2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2 КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.РозничнаяПродажа.Товары КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "АлкогольнаяПродукция";
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыЧека = ПечатьФискальныхДокументов.ПараметрыЧека(ДокументСсылка);
		НомерЧека     = ПараметрыЧека.НомерЧека;
		НомерСмены    = ПараметрыЧека.НомерСмены;
		СерийныйНомер = ПараметрыЧека.СерийныйНомер;
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
		АдресТорговогоОбъекта = ДополнительныеПараметры.АдресТорговогоОбъекта;
	КонецЕсли;
	
	ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация, Дата, ВидОперации");
	
	ДанныеКассира = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛицаТекущегоПользователя(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
	
	Запрос.УстановитьПараметр("НомерЧека",             НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",            НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер",         СерийныйНомер);
	Запрос.УстановитьПараметр("АдресТорговогоОбъекта", АдресТорговогоОбъекта);
	
	Если ДанныеКассира.Представление <> Неопределено Тогда
		Кассир = СокрЛП(СтрШаблон("%1 %2", Строка(ДанныеКассира.Должность), ДанныеКассира.Представление));
	Иначе
		Кассир = НСтр("ru = 'Администратор'");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Кассир", Кассир);
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекXML(ДокументСсылка, РезультатыЗапроса,
		МенеджерВременныхТаблиц, Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи);
	
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Период,
	|	ЕСТЬNULL(КлассификаторОрганизацийЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.пустаяСсылка)) КАК ОрганизацияЕГАИС,
	|	ДанныеШапки.Ссылка КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.РозничнаяПродажа КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (СтатусыДокументовЕГАИС.Документ = ДанныеШапки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО ДанныеШапки.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Реквизиты.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СтатусОбработки",  Реквизиты.СтатусОбработки);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	Возврат "";
КонецФункции

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                            КАК Период,
	|	ТаблицаАкцизныеМарки.Ссылка        КАК Ссылка,
	|	&ОрганизацияЕГАИС                  КАК ОрганизацияЕГАИС,
	|	ТаблицаАкцизныеМарки.Справка2      КАК Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК СвободныйОстаток
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК ТаблицаАкцизныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|			ПО Справки2ЕГАИС.Ссылка = ТаблицаАкцизныеМарки.Справка2
	|ГДЕ
	|	ТаблицаАкцизныеМарки.Ссылка = &Ссылка
	|	И &СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияЕГАИС.ПереданВУТМ)
	|	И ТаблицаАкцизныеМарки.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАкцизныеМарки.Ссылка,
	|	ТаблицаАкцизныеМарки.Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти



#КонецОбласти

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ЧекиЕГАИС.ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокСвободныйОстаток() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокКоличество() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СканированиеМаркируемойПродукции

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		
		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
			Возврат ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
		ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
		
			Возврат ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И Не ДанныеШтрихкода.МаркируемаяПродукция
			И ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
			
			Возврат ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
			
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		Возврат ОбработатьДанныеШтрихкодаЕдиницыПродукцииМОТП(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		Возврат ОбработатьДанныеШтрихкодаЕдиницыПродукцииИСМП(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМаркиМаркируемойПродукции(
			ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.Видпродукции <> Неопределено И СтрокаДерева.Номенклатура <> Неопределено Тогда
			
			Если СтрокаДерева.Видпродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
				
				ПараметрыЗаполнения.Вставить("РодительскийШтрихкод", УпаковкаВерхнегоУровня);
				ОбработатьДанныеШтрихкодаЕдиницыПродукцииМОТП(ДокументОбъект, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
				
			ИначеЕсли СтрокаДерева.Видпродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область АлкогольнаяПродукция

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ПОМЕСТИТЬ ВТСерии
	|ИЗ
	|	&Серии КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ) КАК Маркируемая
	|ИЗ
	|	ВТТовары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АлкогольнаяПродукция КАК ВТ_АлкогольнаяПродукция
	|		ПО ТабличнаяЧасть.Номенклатура = ВТ_АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТабличнаяЧасть.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.АлкогольнаяПродукция,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Серии", ДокументОбъект.Серии.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка КАК ШтрихкодУпаковки,
	|	ВЫБОР
	|		КОГДА АкцизныеМаркиЕГАИС.Справка2 = РозничнаяПродажаТовары.Справка2
	|			ТОГДА АкцизныеМаркиЕГАИС.Справка2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса)
	|	КОНЕЦ КАК Статус,
	|	АкцизныеМаркиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	РозничнаяПродажаТовары.Справка2 КАК Справка2
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО РозничнаяПродажаТовары.Ссылка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО РозничнаяПродажаТовары.АкцизнаяМарка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|ГДЕ
	|	РозничнаяПродажаТовары.Ссылка = &Ссылка";
	
	Если ЗаполнитьСправки2ИзРегистра Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РозничнаяПродажаТовары.Справка2", "АкцизныеМаркиЕГАИС.Справка2");
	КонецЕсли; 
	
	Возврат Новый Структура("МаркированныеТовары", Запрос.Выполнить().Выгрузить());
КонецФункции

// Функция предназначена для обработки считанного штрихкода акцизной марки старого (PDF417) и нового (Data Matrix) образцов
//
Функция ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	
	Объект = Форма.Объект;
	
	// Найдем строки товара с незаполненными акцизными марками. Например пользователь вручную ввел строку а потом прочитал марку.
	СтрокиТовара = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, АкцизнаяМарка", ДанныеШтрихкода.Номенклатура, Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка()));
	
	Если СтрокиТовара.Количество() = 0 Тогда
		СтрокаТовара = Объект.Товары.Добавить();
		
		Результат.ДобавленныеСтроки.Добавить(СтрокаТовара);
	ИначеЕсли СтрокиТовара[0].Количество > 1 Тогда
		ИсходнаяСтрока = СтрокиТовара[0];
		СтрокаТовара = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, ИсходнаяСтрока);
		ИсходнаяСтрока.Количество = ИсходнаяСтрока.Количество - 1;
		
		Результат.ДобавленныеСтроки.Добавить(СтрокаТовара);
		Результат.ИзмененныеСтроки.Добавить(ИсходнаяСтрока);
	Иначе
		СтрокаТовара = СтрокиТовара[0];
		
		Результат.ИзмененныеСтроки.Добавить(СтрокаТовара);
	КонецЕсли; 
	
	СтрокаТовара.Номенклатура         = ДанныеШтрихкода.Номенклатура;
	СтрокаТовара.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
	Если ДанныеШтрихкода.Свойство("ЧастичноеВыбытие") И ДанныеШтрихкода.ЧастичноеВыбытие Тогда
		СтрокаТовара.Количество       				= ДанныеШтрихкода.Количество;
		СтрокаТовара.ЧастичноеВыбытиеКоличество 	= ДанныеШтрихкода.Количество;
		СтрокаТовара.ЧастичноеВыбытиеНоменклатура 	= ДанныеШтрихкода.ЧастичноеВыбытиеНоменклатура;
		СтрокаТовара.ЧастичноеВыбытиеВариантУчета 	= ДанныеШтрихкода.ЧастичноеВыбытиеВариантУчета;
	Иначе
		СтрокаТовара.Количество       = 1;
	КонецЕсли;
	СтрокаТовара.ШтрихкодУпаковки     = ДанныеШтрихкода.ШтрихкодУпаковки;
	СтрокаТовара.АкцизнаяМарка        = ДанныеШтрихкода.ШтрихкодУпаковки;
	СтрокаТовара.Штрихкод             = ДанныеШтрихкода.Штрихкод;
	
	
	Возврат Результат;
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМарки(ДокументОбъект, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМарки(
			ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция предназначена для обработки считанного малого штрихкода акцизной марки старого (PDF417) образца
//
Функция ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	Результат.ТекстОшибки = НСтр("ru = 'Обработка кодов DataMatrix в документе Чек ККМ не поддерживается. Считайте код акцизной марки.'");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПродукцияМОТП

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМаркиТабачнойПродукции(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМаркиТабачнойПродукции(
			Форма, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.Вставить("РодительскийШтрихкод", УпаковкаВерхнегоУровня);
			ОбработатьДанныеШтрихкодаЕдиницыПродукцииМОТП(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаЕдиницыПродукцииМОТП(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		РезультатОбработки   = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
	Иначе
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод
	КонецЕсли;
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		ШтрихкодУпаковки = РодительскийШтрихкод;
	Иначе
		ШтрихкодУпаковки = ДанныеШтрихкода.ШтрихкодУпаковки;
	КонецЕсли;
	
	ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
		ДанныеШтрихкода,
		ПараметрыСканирования);
	
	Если ЭтоСтрокаДанныхЧастичногоВыбытия
			ИЛИ ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
		
		Количество = ДанныеШтрихкода.Количество;
	Иначе
		Количество = ДанныеШтрихкода.КоличествоПотребительскихУпаковок;
	КонецЕсли; 
	
	КлючевыеПоля = Новый Структура;
	КлючевыеПоля.Вставить("Номенклатура",  ДанныеШтрихкода.Номенклатура);
	КлючевыеПоля.Вставить("АкцизнаяМарка", ШтрихкодУпаковки);
	
	Если Объект.Товары.НайтиСтроки(КлючевыеПоля).Количество() > 0 Тогда
		РезультатОбработки.ЕстьОшибки  = Истина;
		РезультатОбработки.ТекстОшибки = НСтр("ru = 'Позиция уже добавлена в документ'");
		
		Возврат РезультатОбработки;
	Иначе
		КлючевыеПоля.Вставить("АкцизнаяМарка", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
		КлючевыеПоля.Вставить("Количество",    Количество);
		
		СтрокиТовары = Объект.Товары.НайтиСтроки(КлючевыеПоля);
		Если СтрокиТовары.Количество() > 0 Тогда
			СтрокаТовары = СтрокиТовары[0];
			
			РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары = Объект.Товары.Добавить();
			СтрокаТовары.Номенклатура = ДанныеШтрихкода.Номенклатура;
			
			РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли; 
	КонецЕсли; 
	
	СтрокаТовары.Количество       = Количество;
	СтрокаТовары.Штрихкод         = ДанныеШтрихкода.Штрихкод;
	СтрокаТовары.КодАкцизнойМарки = ДанныеШтрихкода.ПолныйКодМаркировки;
	СтрокаТовары.АкцизнаяМарка    = ШтрихкодУпаковки;
	
	ШтрихкодированиеИСМП.ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковки(
		СтрокаТовары,
		ДанныеШтрихкода,
		ПараметрыСканирования);
	
	Возврат РезультатОбработки;
КонецФункции

#КонецОбласти

#Область ПродукцияИСМП 

Функция ОбработатьДанныеШтрихкодаЕдиницыПродукцииИСМП(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		РезультатОбработки  = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
	Иначе
		РезультатОбработки  = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод
	КонецЕсли;
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		ШтрихкодУпаковки = РодительскийШтрихкод;
	Иначе
		ШтрихкодУпаковки = ДанныеШтрихкода.ШтрихкодУпаковки;
	КонецЕсли;
	
	ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
		ДанныеШтрихкода,
		ПараметрыСканирования);
	
	Если ЭтоСтрокаДанныхЧастичногоВыбытия
			ИЛИ ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
		
		Количество = ДанныеШтрихкода.Количество;
	Иначе
		Количество = ДанныеШтрихкода.КоличествоПотребительскихУпаковок;
	КонецЕсли; 
	
	КлючевыеПоля = Новый Структура;
	КлючевыеПоля.Вставить("Номенклатура",  ДанныеШтрихкода.Номенклатура);
	КлючевыеПоля.Вставить("АкцизнаяМарка", ШтрихкодУпаковки);
	
	Если Объект.Товары.НайтиСтроки(КлючевыеПоля).Количество() > 0 Тогда
		РезультатОбработки.ЕстьОшибки  = Истина;
		РезультатОбработки.ТекстОшибки = НСтр("ru = 'Позиция уже добавлена в документ'");
		
		Возврат РезультатОбработки;
	Иначе
		КлючевыеПоля.Вставить("АкцизнаяМарка", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
		КлючевыеПоля.Вставить("Количество",    Количество);
		
		СтрокиТовары = Объект.Товары.НайтиСтроки(КлючевыеПоля);
		Если СтрокиТовары.Количество() > 0 Тогда
			// Если такая номенклатура уже добавлена в документ без марки (например копированием)
			// дополним существующую строку данными маркировки
			СтрокаТовары = СтрокиТовары[0];
			
			РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаТовары);
		Иначе
			// Если ее нет - создадим новую
			СтрокаТовары = Объект.Товары.Добавить();
			СтрокаТовары.Номенклатура = ДанныеШтрихкода.Номенклатура;
			
			РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		КонецЕсли; 
	КонецЕсли; 
	
	СтрокаТовары.Количество       = Количество;
	СтрокаТовары.Штрихкод         = ДанныеШтрихкода.Штрихкод;
	СтрокаТовары.КодАкцизнойМарки = ДанныеШтрихкода.ПолныйКодМаркировки;
	СтрокаТовары.АкцизнаяМарка    = ШтрихкодУпаковки;
	
	
	ШтрихкодированиеИСМП.ЗаполнениеСохраняемойСтрокиШтрихкодовУпаковки(
		СтрокаТовары,
		ДанныеШтрихкода,
		ПараметрыСканирования);
	
	Возврат РезультатОбработки;
КонецФункции
	
#КонецОбласти 

#КонецОбласти

#Область ФормированиеОРП

Функция ЕстьПравоПриемРозничнойВыручки(Организация)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЕстьПравоПриемРозничнойВыручки = Ложь;
	ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		ЕстьПравоПриемРозничнойВыручки = Истина;
	Иначе
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийПКО.РозничнаяВыручка));
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЕстьПравоПриемРозничнойВыручки = Истина;
		Исключение
			ЕстьПравоПриемРозничнойВыручки = Ложь;
		КонецПопытки;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции

Функция ЕстьПравоВозвратРозничнойВыручки(Организация)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЕстьПравоПриемРозничнойВыручки = Ложь;
	ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		ЕстьПравоПриемРозничнойВыручки = Истина;
	Иначе
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю));
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЕстьПравоПриемРозничнойВыручки = Истина;
		Исключение
			ЕстьПравоПриемРозничнойВыручки = Ложь;
		КонецПопытки;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции

Функция ТекстЗапросаНезакрытыеЧеки(СписокТаблиц)
	
	СписокТаблиц.Вставить("ВТ_РозничныеЧекиКПогашению",   СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_Продажи",                   СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_Возвраты",                  СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаЧеки",                  СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаДокументы",             СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_ТаблицаТовары",             СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаТовары",                СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвраты",              СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_ВозвратУслуг",              СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвратУслуг",          СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_АгентскиеУслуги",           СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаАгентскиеУслуги",       СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаПодарочныеСертификаты", СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаОплаты",                СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвратОплаты",         СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_ТаблицаВзаиморасчеты",      СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_ДокументыРасчетов",         СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВзаиморасчеты",         СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ДокументыРасчетов",            СписокТаблиц.Количество());
	СписокТаблиц.Вставить("СчетаНаОплату",                СписокТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РозничнаяПродажа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат)
	|			ТОГДА ОснованиеВозврата.Ссылка
	|		ИНАЧЕ РозничнаяПродажа.Ссылка
	|	КОНЕЦ КАК ДокументРасчетов,
	|	РозничнаяПродажа.Организация КАК Организация,
	|	РозничнаяПродажа.Склад КАК Склад,
	|	РозничнаяПродажа.СчетКасса КАК СчетКасса,
	|	РозничнаяПродажа.ДокументБезНДС КАК ДокументБезНДС,
	|	РозничнаяПродажа.СуммаВключаетНДС КАК ЦенаВключаетНДС,
	|	РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат) КАК ЭтоВозврат,
	|	РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Предоплата) КАК ЭтоПредоплата,
	|	РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат)
	|		И ОснованиеВозврата.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Предоплата) КАК ЭтоВозвратПредоплаты,
	|	ЕСТЬNULL(РозничнаяПродажа.Основание.ОтчетОРозничныхПродажах, ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка) КАК ЭтоВозвратЗакрытогоПериода,
	|	ВЫБОР
	|		КОГДА РозничнаяПродажа.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.Патент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеятельностьНаПатенте
	|ПОМЕСТИТЬ ВТ_РозничныеЧекиКПогашению
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК ОснованиеВозврата
	|		ПО РозничнаяПродажа.Основание = ОснованиеВозврата.Ссылка
	|ГДЕ
	|	РозничнаяПродажа.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|	И РозничнаяПродажа.ИдентификаторУстройства = &ИдентификаторУстройства
	|	И РозничнаяПродажа.Проведен
	|	И РозничнаяПродажа.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтоВозврат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяПродажа.Ссылка КАК Ссылка,
	|	РозничнаяПродажа.Организация КАК Организация,
	|	РозничнаяПродажа.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничнаяПродажа.СуммаВключаетНДС КАК ЦенаВключаетНДС,
	|	РозничнаяПродажа.ДокументБезНДС КАК ДокументБезНДС
	|ПОМЕСТИТЬ ВТ_Продажи
	|ИЗ
	|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО РозничныеЧекиКПогашению.Ссылка = РозничнаяПродажа.Ссылка
	|ГДЕ
	|	НЕ РозничныеЧекиКПогашению.ЭтоВозврат
	|	И НЕ РозничныеЧекиКПогашению.ЭтоПредоплата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничнаяПродажа.Ссылка КАК Ссылка,
	|	РозничнаяПродажа.Основание КАК Основание,
	|	РозничнаяПродажа.Организация КАК Организация,
	|	РозничнаяПродажа.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничнаяПродажа.СуммаВключаетНДС КАК ЦенаВключаетНДС,
	|	РозничнаяПродажа.ДокументБезНДС КАК ДокументБезНДС,
	|	РозничнаяПродажа.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТ_Возвраты
	|ИЗ
	|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО РозничныеЧекиКПогашению.Ссылка = РозничнаяПродажа.Ссылка
	|ГДЕ
	|	РозничныеЧекиКПогашению.ЭтоВозврат
	|	И НЕ РозничныеЧекиКПогашению.ЭтоВозвратПредоплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеЧекиКПогашению.Ссылка КАК РозничнаяПродажа,
	|	РозничныеЧекиКПогашению.Организация КАК Организация,
	|	РозничныеЧекиКПогашению.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте
	|ИЗ
	|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
	|
	|СГРУППИРОВАТЬ ПО
	|	РозничныеЧекиКПогашению.Ссылка,
	|	РозничныеЧекиКПогашению.Склад,
	|	РозничныеЧекиКПогашению.Организация,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте,
	|	РозничныеЧекиКПогашению.СчетКасса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РозничныеЧекиКПогашению.Организация КАК Организация,
	|	РозничныеЧекиКПогашению.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	НЕОПРЕДЕЛЕНО КАК ОтчетОРозничныхПродажах,
	|	МИНИМУМ(РозничныеЧекиКПогашению.ДокументБезНДС) КАК ДокументБезНДС
	|ИЗ
	|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
	|
	|СГРУППИРОВАТЬ ПО
	|	РозничныеЧекиКПогашению.Организация,
	|	РозничныеЧекиКПогашению.Склад,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте,
	|	РозничныеЧекиКПогашению.СчетКасса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеЧекиКПогашению.Организация КАК Организация,
	|	РозничныеЧекиКПогашению.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.СуммаСкидки = 0
	|			ТОГДА ТаблицаТовары.Цена
	|		КОГДА ТаблицаТовары.Количество = 0
	|				И НЕ РозничнаяПродажа.СуммаВключаетНДС
	|			ТОГДА ТаблицаТовары.Сумма - ТаблицаТовары.СуммаСкидки
	|		КОГДА ТаблицаТовары.Количество = 0
	|				И РозничнаяПродажа.СуммаВключаетНДС
	|			ТОГДА ТаблицаТовары.Сумма - ТаблицаТовары.СуммаСкидки - ТаблицаТовары.СуммаНДС
	|		КОГДА ТаблицаТовары.Количество = 0
	|				И РозничнаяПродажа.СуммаВключаетНДС
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаТовары.Сумма - ТаблицаТовары.СуммаСкидки - ТаблицаТовары.СуммаНДС) / ТаблицаТовары.Количество КАК ЧИСЛО(19, 2))
	|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаТовары.Сумма - ТаблицаТовары.СуммаСкидки) / ТаблицаТовары.Количество КАК ЧИСЛО(19, 2))
	|	КОНЕЦ КАК Цена,
	|	ТаблицаТовары.КиЗ_ГИСМ КАК КиЗ_ГИСМ,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Сумма - ТаблицаТовары.СуммаСкидки КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	РозничныеЧекиКПогашению.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаТовары.Номенклатура.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ВТ_ТаблицаТовары
	|ИЗ
	|	ВТ_Продажи КАК РозничныеЧекиКПогашению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ПО РозничныеЧекиКПогашению.Ссылка = РозничнаяПродажа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
	|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Возвраты.Организация,
	|	ВТ_Возвраты.Склад,
	|	ВТ_Возвраты.СчетКасса,
	|	ВТ_Возвраты.ДеятельностьНаПатенте,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.КиЗ_ГИСМ,
	|	-ТаблицаТовары.Количество,
	|	-ТаблицаТовары.Сумма,
	|	ТаблицаТовары.СтавкаНДС,
	|	-ТаблицаТовары.СуммаНДС,
	|	ВТ_Возвраты.ЦенаВключаетНДС,
	|	ТаблицаТовары.Номенклатура.НомерГТД,
	|	ТаблицаТовары.Номенклатура.СтранаПроисхождения
	|ИЗ
	|	ВТ_Возвраты КАК ВТ_Возвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
	|		ПО ВТ_Возвраты.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Номенклатура.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Организация КАК Организация,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ТаблицаТовары.СчетКасса КАК СчетКасса,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.КиЗ_ГИСМ КАК КиЗ_ГИСМ,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
	|	ТаблицаТовары.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаТовары.Номенклатура.Услуга КАК ЭтоУслуга,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК Содержание
	|ИЗ
	|	ВТ_ТаблицаТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.КиЗ_ГИСМ,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.СтавкаНДС,
	|	ТаблицаТовары.Организация,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.ДеятельностьНаПатенте,
	|	ТаблицаТовары.ЦенаВключаетНДС,
	|	ТаблицаТовары.СчетКасса,
	|	ТаблицаТовары.НомерГТД,
	|	ТаблицаТовары.СтранаПроисхождения,
	|	ТаблицаТовары.Номенклатура.Услуга,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаТовары.Количество) <> 0
	|		ИЛИ СУММА(ТаблицаТовары.Сумма) <> 0
	|		ИЛИ СУММА(ТаблицаТовары.СуммаНДС) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка.НомерЧекаККМ КАК НомерФискальногоЧека,
	|	ВЫБОР
	|		КОГДА НЕ ПродажиТекущейСмены.Ссылка ЕСТЬ NULL
	|			ТОГДА &ДатаДокумента
	|		ИНАЧЕ ЕСТЬNULL(ОснованиеВозврата.ОтчетОРозничныхПродажах.Дата, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК ДатаРеализации,
	|	РозничныеЧекиКПогашению.Организация КАК Организация,
	|	РозничныеЧекиКПогашению.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.КиЗ_ГИСМ КАК КиЗ_ГИСМ,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
	|	РозничныеЧекиКПогашению.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаТовары.Номенклатура.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	ВТ_Возвраты КАК РозничныеЧекиКПогашению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
	|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК ОснованиеВозврата
	|		ПО РозничныеЧекиКПогашению.Основание = ОснованиеВозврата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Продажи КАК ПродажиТекущейСмены
	|		ПО РозничныеЧекиКПогашению.Основание = ПродажиТекущейСмены.Ссылка
	|ГДЕ
	|	НЕ ТаблицаТовары.Номенклатура.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.КиЗ_ГИСМ,
	|	ТаблицаТовары.Цена,
	|	ТаблицаТовары.СтавкаНДС,
	|	РозничныеЧекиКПогашению.Организация,
	|	РозничныеЧекиКПогашению.Склад,
	|	РозничныеЧекиКПогашению.СчетКасса,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте,
	|	РозничныеЧекиКПогашению.ЦенаВключаетНДС,
	|	ТаблицаТовары.Номенклатура.НомерГТД,
	|	ТаблицаТовары.Номенклатура.СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА НЕ ПродажиТекущейСмены.Ссылка ЕСТЬ NULL
	|			ТОГДА &ДатаДокумента
	|		ИНАЧЕ ЕСТЬNULL(ОснованиеВозврата.ОтчетОРозничныхПродажах.Дата, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ТаблицаТовары.Ссылка.НомерЧекаККМ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаТовары.Количество) <> 0
	|		ИЛИ СУММА(ТаблицаТовары.Сумма) <> 0
	|		ИЛИ СУММА(ТаблицаТовары.СуммаНДС) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Возвраты.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_Возвраты.ЦенаВключаетНДС
	|			ТОГДА РозничнаяПродажаАгентскиеУслуги.Сумма
	|		ИНАЧЕ РозничнаяПродажаАгентскиеУслуги.Сумма + РозничнаяПродажаАгентскиеУслуги.СуммаНДС
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ ВТ_ВозвратУслуг
	|ИЗ
	|	ВТ_Возвраты КАК ВТ_Возвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.АгентскиеУслуги КАК РозничнаяПродажаАгентскиеУслуги
	|		ПО ВТ_Возвраты.Ссылка = РозничнаяПродажаАгентскиеУслуги.Ссылка
	|ГДЕ
	|	НЕ РозничнаяПродажаАгентскиеУслуги.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Возвраты.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_Возвраты.ЦенаВключаетНДС
	|			ТОГДА РозничнаяПродажаТовары.Сумма
	|		ИНАЧЕ РозничнаяПродажаТовары.Сумма + РозничнаяПродажаТовары.СуммаНДС
	|	КОНЕЦ
	|ИЗ
	|	ВТ_Возвраты КАК ВТ_Возвраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ПО ВТ_Возвраты.Ссылка = РозничнаяПродажаТовары.Ссылка
	|ГДЕ
	|	РозничнаяПродажаТовары.Номенклатура.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Возвраты.Ссылка КАК Ссылка,
	|	СУММА(ВТ_ВозвратУслуг.Сумма) КАК СуммаВозвратаУслуги,
	|	ВТ_Возвраты.СуммаДокумента КАК СуммаДокумента,
	|	ВТ_Возвраты.Основание КАК Основание
	|ИЗ
	|	ВТ_ВозвратУслуг КАК ВТ_ВозвратУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Возвраты КАК ВТ_Возвраты
	|		ПО ВТ_ВозвратУслуг.Ссылка = ВТ_Возвраты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Возвраты.Ссылка,
	|	ВТ_Возвраты.СуммаДокумента,
	|	ВТ_Возвраты.Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеЧекиКПогашению.Организация КАК Организация,
	|	РозничныеЧекиКПогашению.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ТаблицаАгентскиеУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаАгентскиеУслуги.Содержание КАК Содержание,
	|	СУММА(ТаблицаАгентскиеУслуги.Количество * ВЫБОР
	|			КОГДА РозничныеЧекиКПогашению.ЭтоВозврат
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Количество,
	|	ТаблицаАгентскиеУслуги.Цена КАК Цена,
	|	СУММА(ТаблицаАгентскиеУслуги.Сумма * ВЫБОР
	|			КОГДА РозничныеЧекиКПогашению.ЭтоВозврат
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Сумма,
	|	ТаблицаАгентскиеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаАгентскиеУслуги.СуммаНДС * ВЫБОР
	|			КОГДА РозничныеЧекиКПогашению.ЭтоВозврат
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СуммаНДС,
	|	ТаблицаАгентскиеУслуги.Контрагент КАК Контрагент,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РозничныеЧекиКПогашению.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ПОМЕСТИТЬ ВТ_АгентскиеУслуги
	|ИЗ
	|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.АгентскиеУслуги КАК ТаблицаАгентскиеУслуги
	|		ПО (ТаблицаАгентскиеУслуги.Ссылка = РозничныеЧекиКПогашению.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАгентскиеУслуги.Номенклатура,
	|	ТаблицаАгентскиеУслуги.Содержание,
	|	ТаблицаАгентскиеУслуги.Цена,
	|	ТаблицаАгентскиеУслуги.СтавкаНДС,
	|	ТаблицаАгентскиеУслуги.Контрагент,
	|	ТаблицаАгентскиеУслуги.ДоговорКонтрагента,
	|	РозничныеЧекиКПогашению.Организация,
	|	РозничныеЧекиКПогашению.Склад,
	|	РозничныеЧекиКПогашению.ЦенаВключаетНДС,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте,
	|	РозничныеЧекиКПогашению.СчетКасса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АгентскиеУслуги.Организация КАК Организация,
	|	ВТ_АгентскиеУслуги.Склад КАК Склад,
	|	ВТ_АгентскиеУслуги.СчетКасса КАК СчетКасса,
	|	ВТ_АгентскиеУслуги.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ВТ_АгентскиеУслуги.Номенклатура КАК Номенклатура,
	|	ВТ_АгентскиеУслуги.Содержание КАК Содержание,
	|	ВТ_АгентскиеУслуги.Количество КАК Количество,
	|	ВТ_АгентскиеУслуги.Цена КАК Цена,
	|	ВТ_АгентскиеУслуги.Сумма КАК Сумма,
	|	ВТ_АгентскиеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_АгентскиеУслуги.СуммаНДС КАК СуммаНДС,
	|	ВТ_АгентскиеУслуги.Контрагент КАК Контрагент,
	|	ВТ_АгентскиеУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_АгентскиеУслуги.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	ВТ_АгентскиеУслуги КАК ВТ_АгентскиеУслуги
	|ГДЕ
	|	ВТ_АгентскиеУслуги.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеЧекиКПогашению.Организация КАК Организация,
	|	РозничныеЧекиКПогашению.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ТаблицаПодарочныеСертификаты.ВидОплаты КАК ВидОплаты,
	|	СУММА(ТаблицаПодарочныеСертификаты.Сумма * ВЫБОР
	|			КОГДА РозничныеЧекиКПогашению.ЭтоВозврат
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.ПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
	|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаПодарочныеСертификаты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПодарочныеСертификаты.ВидОплаты,
	|	РозничныеЧекиКПогашению.Организация,
	|	РозничныеЧекиКПогашению.Склад,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте,
	|	РозничныеЧекиКПогашению.СчетКасса
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаПодарочныеСертификаты.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
	|	РозничныеЧекиКПогашению.Организация КАК Организация,
	|	РозничныеЧекиКПогашению.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
	|	СУММА(ТаблицаОплата.Сумма) КАК СуммаОплаты
	|ИЗ
	|	Документ.РозничнаяПродажа.Оплата КАК ТаблицаОплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
	|		ПО ТаблицаОплата.Ссылка = РозничныеЧекиКПогашению.Ссылка
	|ГДЕ
	|	НЕ РозничныеЧекиКПогашению.ЭтоВозврат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.ВидОплаты,
	|	РозничныеЧекиКПогашению.Ссылка,
	|	РозничныеЧекиКПогашению.Организация,
	|	РозничныеЧекиКПогашению.Склад,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте,
	|	РозничныеЧекиКПогашению.СчетКасса
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаОплата.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
	|	РозничныеЧекиКПогашению.Организация КАК Организация,
	|	РозничныеЧекиКПогашению.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ТаблицаОплата.ВидОплаты КАК ВидОплаты,
	|	СУММА(ТаблицаОплата.Сумма) КАК СуммаОплаты
	|ИЗ
	|	Документ.РозничнаяПродажа.Оплата КАК ТаблицаОплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
	|		ПО ТаблицаОплата.Ссылка = РозничныеЧекиКПогашению.Ссылка
	|ГДЕ
	|	РозничныеЧекиКПогашению.ЭтоВозврат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплата.ВидОплаты,
	|	РозничныеЧекиКПогашению.Ссылка,
	|	РозничныеЧекиКПогашению.Организация,
	|	РозничныеЧекиКПогашению.Склад,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте,
	|	РозничныеЧекиКПогашению.СчетКасса
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаОплата.Сумма) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
	|	РозничныеЧекиКПогашению.Организация КАК Организация,
	|	РозничныеЧекиКПогашению.Склад КАК Склад,
	|	РозничныеЧекиКПогашению.СчетКасса КАК СчетКасса,
	|	РозничныеЧекиКПогашению.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ЕСТЬNULL(ЕСТЬNULL(ДокументСчетНаОплатуПокупателю.Ссылка, ДокументРозничнаяПродажаОснование.Ссылка), РозничныеЧекиКПогашению.ДокументРасчетов) КАК ДокументРасчетов,
	|	РозничныеЧекиКПогашению.ЭтоПредоплата
	|		ИЛИ РозничныеЧекиКПогашению.ЭтоВозвратПредоплаты КАК ЭтоПредоплата,
	|	ВЫБОР
	|		КОГДА РозничныеЧекиКПогашению.ЭтоПредоплата
	|			ТОГДА ДокументРозничнаяПродажа.СуммаПредоплаты
	|		КОГДА РозничныеЧекиКПогашению.ЭтоВозвратПредоплаты
	|				И НЕ РозничныеЧекиКПогашению.ЭтоВозвратЗакрытогоПериода
	|			ТОГДА -ДокументРозничнаяПродажа.СуммаПредоплаты
	|		КОГДА НЕ РозничныеЧекиКПогашению.ЭтоВозвратПредоплаты
	|			ТОГДА ДокументРозничнаяПродажа.СуммаДокумента - ДокументРозничнаяПродажа.СуммаПредоплаты
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОплаты,
	|	ВЫБОР
	|		КОГДА РозничныеЧекиКПогашению.ЭтоВозвратПредоплаты
	|				И РозничныеЧекиКПогашению.ЭтоВозвратЗакрытогоПериода
	|			ТОГДА ДокументРозничнаяПродажа.СуммаПредоплаты
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВозврат,
	|	ВЫБОР
	|		КОГДА НЕ РозничныеЧекиКПогашению.ЭтоПредоплата
	|				И НЕ РозничныеЧекиКПогашению.ЭтоВозврат
	|			ТОГДА ДокументРозничнаяПродажа.СуммаПредоплаты
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаЗачет
	|ПОМЕСТИТЬ ВТ_ТаблицаВзаиморасчеты
	|ИЗ
	|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК ДокументРозничнаяПродажа
	|		ПО РозничныеЧекиКПогашению.Ссылка = ДокументРозничнаяПродажа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК ДокументСчетНаОплатуПокупателю
	|		ПО (ДокументРозничнаяПродажа.СчетНаОплатуПокупателю = ДокументСчетНаОплатуПокупателю.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РозничныеЧекиКПогашению КАК ДокументРозничнаяПродажаОснование
	|		ПО (ДокументРозничнаяПродажа.Основание = ДокументРозничнаяПродажаОснование.Ссылка)
	|ГДЕ
	|	(ДокументРозничнаяПродажа.СуммаПредоплаты <> 0
	|			ИЛИ НЕ ДокументСчетНаОплатуПокупателю.Ссылка ЕСТЬ NULL)
	|	И &ИспользоватьПредоплатыВРознице
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаВзаиморасчеты.ДокументРасчетов КАК ДокументРасчетов
	|ПОМЕСТИТЬ ВТ_ДокументыРасчетов
	|ИЗ
	|	ВТ_ТаблицаВзаиморасчеты КАК ВТ_ТаблицаВзаиморасчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаВзаиморасчеты.Организация КАК Организация,
	|	ВТ_ТаблицаВзаиморасчеты.Склад КАК Склад,
	|	ВТ_ТаблицаВзаиморасчеты.СчетКасса КАК СчетКасса,
	|	ВТ_ТаблицаВзаиморасчеты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ВТ_ТаблицаВзаиморасчеты.ДокументРасчетов КАК ДокументРасчетов,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ТаблицаВзаиморасчеты.ЭтоПредоплата
	|				ТОГДА ВТ_ТаблицаВзаиморасчеты.СуммаОплаты
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВТ_ТаблицаВзаиморасчеты.СуммаВозврат) КАК СуммаВозврат,
	|	СУММА(ВТ_ТаблицаВзаиморасчеты.СуммаЗачет) КАК СуммаЗачет
	|ИЗ
	|	ВТ_ТаблицаВзаиморасчеты КАК ВТ_ТаблицаВзаиморасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаВзаиморасчеты.Организация,
	|	ВТ_ТаблицаВзаиморасчеты.Склад,
	|	ВТ_ТаблицаВзаиморасчеты.ДокументРасчетов,
	|	ВТ_ТаблицаВзаиморасчеты.ДеятельностьНаПатенте,
	|	ВТ_ТаблицаВзаиморасчеты.СчетКасса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыРасчетов.ДокументРасчетов КАК ДокументРасчетов,
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Ссылка.Контрагент, &РозничныйПокупатель) КАК Контрагент,
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Ссылка.ДоговорКонтрагента, &ОсновнойДоговорРозничныйПокупатель) КАК ДоговорКонтрагента,
	|	СУММА(ЕСТЬNULL(РозничнаяПродажаТовары.Сумма, СчетНаОплатуПокупателюТовары.Сумма)) КАК Сумма,
	|	ЕСТЬNULL(РозничнаяПродажаТовары.СтавкаНДС, СчетНаОплатуПокупателюТовары.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(РозничнаяПродажаТовары.СуммаНДС, СчетНаОплатуПокупателюТовары.СуммаНДС)) КАК СуммаНДС
	|ИЗ
	|	ВТ_ДокументыРасчетов КАК ВТ_ДокументыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|		ПО ВТ_ДокументыРасчетов.ДокументРасчетов = СчетНаОплатуПокупателюТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ПО ВТ_ДокументыРасчетов.ДокументРасчетов = РозничнаяПродажаТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыРасчетов.ДокументРасчетов,
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Ссылка.Контрагент, &РозничныйПокупатель),
	|	ЕСТЬNULL(РозничнаяПродажаТовары.СтавкаНДС, СчетНаОплатуПокупателюТовары.СтавкаНДС),
	|	ЕСТЬNULL(СчетНаОплатуПокупателюТовары.Ссылка.ДоговорКонтрагента, &ОсновнойДоговорРозничныйПокупатель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаВзаиморасчеты.Организация КАК Организация,
	|	ВТ_ТаблицаВзаиморасчеты.Склад КАК Склад,
	|	ВТ_ТаблицаВзаиморасчеты.СчетКасса КАК СчетКасса,
	|	ВТ_ТаблицаВзаиморасчеты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	ВТ_ТаблицаВзаиморасчеты.ДокументРасчетов КАК СчетНаОплатуПокупателю,
	|	СУММА(ВТ_ТаблицаВзаиморасчеты.СуммаОплаты) КАК СуммаОплаты
	|ИЗ
	|	ВТ_ТаблицаВзаиморасчеты КАК ВТ_ТаблицаВзаиморасчеты
	|ГДЕ
	|	ВТ_ТаблицаВзаиморасчеты.ДокументРасчетов ССЫЛКА Документ.СчетНаОплатуПокупателю
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаВзаиморасчеты.Склад,
	|	ВТ_ТаблицаВзаиморасчеты.ДокументРасчетов,
	|	ВТ_ТаблицаВзаиморасчеты.СчетКасса,
	|	ВТ_ТаблицаВзаиморасчеты.ДеятельностьНаПатенте,
	|	ВТ_ТаблицаВзаиморасчеты.Организация";
	
	Возврат ТекстЗапроса;
КонецФункции 

Функция СформироватьОтчетыОРозничныхПродажах(Организация, ИдентификаторУстройства) Экспорт
	Запрос = Новый Запрос;
	
	СписокТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНезакрытыеЧеки(СписокТаблиц);
	
	ОбновитьПовторноИспользуемыеЗначения = Ложь;
	
	РозничныйПокупательСсылка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Контрагенты.РозничныйПокупатель");
	ОсновнойДоговорРозничныйПокупатель = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ВедетсяУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	РозничныйПокупательСуществует = ЗначениеЗаполнено(РозничныйПокупательСсылка);
	
	Если НЕ РозничныйПокупательСуществует Тогда
		РозничныйПокупательСсылка = Справочники.Контрагенты.ПолучитьСсылку();
	КонецЕсли;
	
	Если РозничныйПокупательСуществует Тогда
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			ОсновнойДоговорРозничныйПокупатель, 
			РозничныйПокупательСсылка, 
			Организация, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем));
	ИначеЕсли ВедетсяУчетПоДоговорам Тогда
		ОсновнойДоговорРозничныйПокупатель = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("ДатаДокумента",           ОбщегоНазначения.ТекущаяДатаПользователя());
	Запрос.УстановитьПараметр("ИдентификаторУстройства", ИдентификаторУстройства);
	Запрос.УстановитьПараметр("РозничныйПокупатель",     РозничныйПокупательСсылка);
	Запрос.УстановитьПараметр("ОсновнойДоговорРозничныйПокупатель", ОсновнойДоговорРозничныйПокупатель);
	Запрос.УстановитьПараметр("ИспользоватьПредоплатыВРознице", ПолучитьФункциональнуюОпцию("ИспользоватьПредоплатыВРознице"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыЗаполнения = Новый Структура;
	Для Каждого КлючИЗначение Из СписокТаблиц Цикл
		ПараметрыЗаполнения.Вставить(КлючИЗначение.Ключ, РезультатЗапроса[КлючИЗначение.Значение].Выгрузить());
	КонецЦикла; 
	
	ДанныеЗаполнения = Новый Структура("Организация, Склад, СчетКасса, ДеятельностьНаПатенте");
	
	ЕстьПравоПриемРозничнойВыручки = ЕстьПравоПриемРозничнойВыручки(Организация);
	ЕстьПравоВозвратРозничнойВыручки = ЕстьПравоВозвратРозничнойВыручки(Организация);
	ИспользоватьФиксированноеВремяВДокументах = ПолучитьФункциональнуюОпцию("ФиксированноеВремяВДокументах");
	
	ВозвратыУслуг = ПараметрыЗаполнения.ТаблицаВозвратУслуг;
	
	ТаблицаВозвратОплаты = ПараметрыЗаполнения.ТаблицаВозвратОплаты;
	ТаблицаОплаты        = ПараметрыЗаполнения.ТаблицаОплаты;
	Для Каждого СтрокаВозврата Из ВозвратыУслуг Цикл
		СтрокиОплаты      = ТаблицаОплаты.НайтиСтроки(Новый Структура("Ссылка", СтрокаВозврата.Основание));
		МассивСуммыОплаты = Новый Массив;
		
		ИтогоСуммаОплаты = 0;
		Для Каждого СтрокаОплаты Из СтрокиОплаты Цикл
			МассивСуммыОплаты.Добавить(СтрокаОплаты.СуммаОплаты);
			ИтогоСуммаОплаты = ИтогоСуммаОплаты + СтрокаОплаты.СуммаОплаты;
		КонецЦикла;
		
		// Возвраты по услугам "схлопываются" в соотвествующих ТЧ, поэтому безналичных оплат по ним делать не нужно.
		СуммаБезналичнойОплатыПоТоварам = ИтогоСуммаОплаты * (СтрокаВозврата.СуммаДокумента - СтрокаВозврата.СуммаВозвратаУслуги)/СтрокаВозврата.СуммаДокумента;
		МассивСуммыОплатыТовары = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаБезналичнойОплатыПоТоварам, МассивСуммыОплаты);
		Для Индекс = 0 По СтрокиОплаты.Количество()-1 Цикл
			СтрокиОплаты[Индекс].СуммаОплаты = ?(МассивСуммыОплатыТовары = Неопределено, 0, МассивСуммыОплатыТовары[Индекс]);
		КонецЦикла; 
		
		// Возвраты оплаты
		СтрокиВозвратаОплаты      = ТаблицаВозвратОплаты.НайтиСтроки(Новый Структура("Ссылка", СтрокаВозврата.Ссылка));
		МассивСуммыВозвратаОплаты = Новый Массив;
		
		ИтогоСуммаВозвратаОплаты = 0;
		Для Каждого СтрокаОплаты Из СтрокиВозвратаОплаты Цикл
			МассивСуммыВозвратаОплаты.Добавить(СтрокаОплаты.СуммаОплаты);
			ИтогоСуммаВозвратаОплаты = ИтогоСуммаВозвратаОплаты + СтрокаОплаты.СуммаОплаты;
		КонецЦикла;
		
		// Возвраты по услугам "схлопываются" в соотвествующих ТЧ, поэтому возврат безналичных оплат по ним делать не нужно.
		СуммаБезналичногоВозвратаПоТоварам = ИтогоСуммаВозвратаОплаты * (СтрокаВозврата.СуммаДокумента - СтрокаВозврата.СуммаВозвратаУслуги)/СтрокаВозврата.СуммаДокумента;
		
		МассивСуммыВозвратаОплатыТовары = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаБезналичногоВозвратаПоТоварам, МассивСуммыВозвратаОплаты);
		Для Индекс = 0 По СтрокиВозвратаОплаты.Количество()-1 Цикл
			СтрокиВозвратаОплаты[Индекс].СуммаОплаты = ?(МассивСуммыВозвратаОплатыТовары = Неопределено, 0, МассивСуммыВозвратаОплатыТовары[Индекс]);
		КонецЦикла; 
	КонецЦикла; 
	
	ТаблицаВозвратОплаты.Свернуть("Организация, Склад, ВидОплаты, СчетКасса, ДеятельностьНаПатенте", "СуммаОплаты");
	ТаблицаОплаты.Свернуть("Организация, Склад, ВидОплаты, СчетКасса, ДеятельностьНаПатенте", "СуммаОплаты");
	
	ДокументыКПроведению = Новый Массив;
	
	// Таблица реквизитов документов расчетов
	ДокументыРасчетов = ПараметрыЗаполнения.ДокументыРасчетов.Скопировать();
	ДокументыРасчетов.Индексы.Добавить("ДокументРасчетов");
	
	НачатьТранзакцию();
	
	// Если есть контрагент вида "Розничный покупатель" и он не задан, то создадим его
	Если ДокументыРасчетов.НайтиСтроки(Новый Структура("Контрагент", РозничныйПокупательСсылка)).Количество() > 0 
		И НЕ ОбщегоНазначения.СсылкаСуществует(РозничныйПокупательСсылка) Тогда
		
		СправочникОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		СправочникОбъект.УстановитьСсылкуНового(РозничныйПокупательСсылка);
		СправочникОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		СправочникОбъект.Наименование = НСтр("ru = 'Розничный покупатель'");
		СправочникОбъект.НаименованиеПолное = НСтр("ru = 'Розничный покупатель'");
		СправочникОбъект.ИмяПредопределенныхДанных = "РозничныйПокупатель";
		СправочникОбъект.Записать();
		
		ОбновитьПовторноИспользуемыеЗначения = Истина;
		
		// Если учет по договорам не ведется, то договор будет создан при записи "Отчета о розничных продажах"
		Если ВедетсяУчетПоДоговорам Тогда
			СправочникОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			СправочникОбъект.УстановитьСсылкуНового(ОсновнойДоговорРозничныйПокупатель);
			СправочникОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			СправочникОбъект.Организация = Организация;
			СправочникОбъект.Владелец = РозничныйПокупательСсылка;
			СправочникОбъект.Наименование = НСтр("ru='Без договора'", ОбщегоНазначения.КодОсновногоЯзыка());
			СправочникОбъект.Записать();
			
			РаботаСДоговорамиКонтрагентовБП.УстановитьОсновнойДоговорКонтрагента(СправочникОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДокументы Из ПараметрыЗаполнения.ТаблицаДокументы Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаДокументы);
		
		ТоварыПоДокументу                = ПараметрыЗаполнения.ТаблицаТовары.Скопировать(ДанныеЗаполнения);
		ВозвратыПоДокументу              = ПараметрыЗаполнения.ТаблицаВозвраты.Скопировать(ДанныеЗаполнения);
		АгентскиеУслугиПоДокументу       = ПараметрыЗаполнения.ТаблицаАгентскиеУслуги.Скопировать(ДанныеЗаполнения);
		ПодарочныеСертификатыПоДокументу = ПараметрыЗаполнения.ТаблицаПодарочныеСертификаты.Скопировать(ДанныеЗаполнения);
		ОплатаПоДокументу                = ТаблицаОплаты.Скопировать(ДанныеЗаполнения); 
		ВозвратыОплат                    = ТаблицаВозвратОплаты.Скопировать(ДанныеЗаполнения);
		
		СчетаНаОплатуПокупателю           = ПараметрыЗаполнения.СчетаНаОплату.Скопировать(ДанныеЗаполнения);
		ВзаиморасчетыПоДокументам         = ПараметрыЗаполнения.ТаблицаВзаиморасчеты.Скопировать(ДанныеЗаполнения);
		ВзаиморасчетыПоДокументам.Свернуть("ДокументРасчетов", "Сумма, СуммаЗачет, СуммаВозврат");
		
		// Не создаем документ, если все его табличные части будут пустыми.
		Если ТоварыПоДокументу.Количество() = 0
			И ВозвратыПоДокументу.Количество() = 0
			И АгентскиеУслугиПоДокументу.Количество() = 0 
			И ПодарочныеСертификатыПоДокументу.Количество() = 0 
			И ОплатаПоДокументу.Количество() = 0
			И СчетаНаОплатуПокупателю.Количество() = 0
			И ВзаиморасчетыПоДокументам.Количество() = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТовары Из ТоварыПоДокументу Цикл
			Если Не СтрокаТовары.ЦенаВключаетНДС Тогда
				СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
				СтрокаТовары.Цена  = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма/СтрокаТовары.Количество, 0);
			КонецЕсли; 
		КонецЦикла;
		
		Для Каждого СтрокаТовары Из ВозвратыПоДокументу Цикл
			Если Не СтрокаТовары.ЦенаВключаетНДС Тогда
				СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
				СтрокаТовары.Цена  = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма/СтрокаТовары.Количество, 0);
			КонецЕсли; 
		КонецЦикла;
		
		Для Каждого СтрокаАгентскиеУслуги Из АгентскиеУслугиПоДокументу Цикл
			Если Не СтрокаАгентскиеУслуги.ЦенаВключаетНДС Тогда
				СтрокаАгентскиеУслуги.Сумма = СтрокаАгентскиеУслуги.Сумма + СтрокаАгентскиеУслуги.СуммаНДС;
				СтрокаАгентскиеУслуги.Цена  = ?(СтрокаАгентскиеУслуги.Количество <> 0, СтрокаАгентскиеУслуги.Сумма/СтрокаАгентскиеУслуги.Количество, 0);
			КонецЕсли; 
		КонецЦикла; 

		// Документ создается с фиксированным значением настройки НДС.
		ДанныеЗаполнения.Вставить("СуммаВключаетНДС", Истина);
		ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		ОтчетОРозничныхПродажах.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		ОтчетОРозничныхПродажах.Заполнить(ДанныеЗаполнения);  
		ДанныеЗаполнения.Удалить("СуммаВключаетНДС");
		ОтчетОРозничныхПродажах.ДокументБезНДС = СтрокаДокументы.ДокументБезНДС;
		
		Документы.ОтчетОРозничныхПродажах.УстановитьДеятельностьНаТорговомСборе(ОтчетОРозничныхПродажах);
		
		Если Не ИспользоватьФиксированноеВремяВДокументах Тогда
			ОтчетОРозничныхПродажах.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
		КонецЕсли;
		
		ТоварыИВозвратыПоДокументу = ТоварыПоДокументу.СкопироватьКолонки();
		ОбщегоНазначенияклиентсервер.ДополнитьТаблицу(ТоварыПоДокументу, ТоварыИВозвратыПоДокументу);
		ОбщегоНазначенияклиентсервер.ДополнитьТаблицу(ВозвратыПоДокументу, ТоварыИВозвратыПоДокументу);
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, ДеятельностьНаПатенте, Склад,
			|ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента,
			|СуммаВключаетНДС, Реализация, АТТПоПродажнойСтоимости, ДокументБезНДС");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ОтчетОРозничныхПродажах);
		ДанныеОбъекта.АТТПоПродажнойСтоимости = Ложь;
		ДанныеОбъекта.Реализация = Истина;
		
		СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
			ОбщегоНазначения.ВыгрузитьКолонку(ТоварыИВозвратыПоДокументу, "Номенклатура", Истина), ДанныеОбъекта);
		
		ВедетсяУчетПрослеживаемыхТоваров  = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
			И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(ОбщегоНазначения.ТекущаяДатаПользователя());

		Для Каждого СтрокаИсточника Из ТоварыПоДокументу Цикл
			СтрокаПриемника = ОтчетОРозничныхПродажах.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаИсточника.Номенклатура);
			Если СведенияОНоменклатуре <> Неопределено
			   И ВедетсяУчетПрослеживаемыхТоваров Тогда 
				СтрокаПриемника.ПрослеживаемыйТовар = СведенияОНоменклатуре.ПрослеживаемыйТовар
					Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
				СтрокаПриемника.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаИсточника Из ВозвратыПоДокументу Цикл
			СтрокаПриемника = ОтчетОРозничныхПродажах.Возвраты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаИсточника.Номенклатура);
			Если СведенияОНоменклатуре <> Неопределено
			   И ВедетсяУчетПрослеживаемыхТоваров Тогда 
				СтрокаПриемника.ПрослеживаемыйТовар = СведенияОНоменклатуре.ПрослеживаемыйТовар
					Или СведенияОНоменклатуре.ПрослеживаемыйКомплект;
				СтрокаПриемника.ПрослеживаемыйКомплект = СведенияОНоменклатуре.ПрослеживаемыйКомплект;
			КонецЕсли;
		КонецЦикла;
		
		ОтчетОРозничныхПродажах.АгентскиеУслуги.Загрузить(АгентскиеУслугиПоДокументу);
		ОтчетОРозничныхПродажах.ПодарочныеСертификаты.Загрузить(ПодарочныеСертификатыПоДокументу);
		ОтчетОРозничныхПродажах.Оплата.Загрузить(ОплатаПоДокументу);
		ОтчетОРозничныхПродажах.ВозвратОплаты.Загрузить(ВозвратыОплат);
		
		// Работа с предоплатами
		ТаблицаПредоплаты = ОтчетОРозничныхПродажах.Предоплаты.ВыгрузитьКолонки();
		ТаблицаЗачетАванса = ОтчетОРозничныхПродажах.ЗачетАвансов.ВыгрузитьКолонки(); 
		ТаблицаОплатаСчетов  = ОтчетОРозничныхПродажах.ОплатаСчетов.ВыгрузитьКолонки();
		
		ТаблицаПредоплаты.Колонки.Добавить("ВидВзаиморасчета", ОбщегоНазначения.ОписаниеТипаСтрока(20));
		
		Для каждого СтрокаВзаиморасчеты Из ВзаиморасчетыПоДокументам Цикл
			
			Если СтрокаВзаиморасчеты.СуммаВозврат > 0 Тогда
				// Возврат предоплаты предыдущей смены
				ТаблицаДокумента = ДокументыРасчетов.Скопировать(Новый Структура("ДокументРасчетов", СтрокаВзаиморасчеты.ДокументРасчетов));
				СуммыДокумента = ТаблицаДокумента.ВыгрузитьКолонку("Сумма");
				
				МассивСуммаВозврат = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
					СтрокаВзаиморасчеты.СуммаВозврат, СуммыДокумента);
					
				Для Инд = 0 По ТаблицаДокумента.Количество()-1 Цикл
					НоваяСтрока = ТаблицаПредоплаты.Добавить();
					НоваяСтрока.Контрагент = ТаблицаДокумента[Инд].Контрагент;
					НоваяСтрока.ДоговорКонтрагента = ТаблицаДокумента[Инд].ДоговорКонтрагента;
					НоваяСтрока.СуммаВозврат = МассивСуммаВозврат[Инд];
					НоваяСтрока.СтавкаНДС = ТаблицаДокумента[Инд].СтавкаНДС;
					НоваяСтрока.ВидВзаиморасчета = "ВозвратПредоплаты";
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаВзаиморасчеты.Сумма > СтрокаВзаиморасчеты.СуммаЗачет Тогда
				// Если по одному счету на оплату (документу расчетов) в одной смене была и предоплата и зачет предоплаты, 
				// то предоплату не учитываем, а зачет производим только в части ранее принятых (не в этой смене) предоплат
				ТаблицаДокумента = ДокументыРасчетов.Скопировать(Новый Структура("ДокументРасчетов", СтрокаВзаиморасчеты.ДокументРасчетов));
				СуммыДокумента = ТаблицаДокумента.ВыгрузитьКолонку("Сумма");
				
				МассивСуммаОплаты = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
					СтрокаВзаиморасчеты.Сумма - СтрокаВзаиморасчеты.СуммаЗачет, СуммыДокумента);
					
				Для Инд = 0 По ТаблицаДокумента.Количество()-1 Цикл
					НоваяСтрока = ТаблицаПредоплаты.Добавить();
					НоваяСтрока.Контрагент = ТаблицаДокумента[Инд].Контрагент;
					НоваяСтрока.ДоговорКонтрагента = ТаблицаДокумента[Инд].ДоговорКонтрагента;
					НоваяСтрока.Сумма = МассивСуммаОплаты[Инд];
					НоваяСтрока.СтавкаНДС = ТаблицаДокумента[Инд].СтавкаНДС;
					НоваяСтрока.ВидВзаиморасчета = "Предоплата";
				КонецЦикла;
				
			ИначеЕсли СтрокаВзаиморасчеты.СуммаЗачет > СтрокаВзаиморасчеты.Сумма Тогда
				СуммаЗачета = СтрокаВзаиморасчеты.СуммаЗачет - СтрокаВзаиморасчеты.Сумма;
				ТаблицаДокумента = ДокументыРасчетов.Скопировать(Новый Структура("ДокументРасчетов", СтрокаВзаиморасчеты.ДокументРасчетов));
				ТаблицаДокумента.Колонки.Добавить("СуммаЗачета", ТаблицаЗачетАванса.Колонки.СуммаЗачета.ТипЗначения);
				
				// Распределим сумму зачета по строкам чека
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаЗачета, ТаблицаДокумента, "СуммаЗачета", "Сумма");
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДокумента, ТаблицаЗачетАванса);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СтрокаОплатаСчетов Из СчетаНаОплатуПокупателю Цикл
			ТаблицаДокумента = ДокументыРасчетов.Скопировать(Новый Структура("ДокументРасчетов", СтрокаОплатаСчетов.СчетНаОплатуПокупателю));
			ТаблицаДокумента.Колонки.Добавить("СуммаОплаты", ТаблицаОплатаСчетов.Колонки.СуммаОплаты.ТипЗначения);
			ТаблицаДокумента.Колонки.ДокументРасчетов.Имя = "СчетНаОплатуПокупателю";
			
			Если ТаблицаДокумента.Итог("Сумма") = 0 
				ИЛИ СтрокаОплатаСчетов.СуммаОплаты = 0 Тогда
				
				Продолжить;
			КонецЕсли;
			
			СуммаНДС = ТаблицаДокумента.Итог("СуммаНДС")*СтрокаОплатаСчетов.СуммаОплаты/ТаблицаДокумента.Итог("Сумма"); 
			Если СуммаНДС <> 0 Тогда
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СуммаНДС, ТаблицаДокумента, "СуммаНДС");
			КонецЕсли;
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(СтрокаОплатаСчетов.СуммаОплаты, ТаблицаДокумента, "СуммаОплаты", "Сумма");
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДокумента, ТаблицаОплатаСчетов);
		КонецЦикла;
		
		ТаблицаПредоплаты.Свернуть("Контрагент, ДоговорКонтрагента, СтавкаНДС, ВидВзаиморасчета", "Сумма, СуммаВозврат");
		ТаблицаЗачетАванса.Свернуть("Контрагент, ДоговорКонтрагента", "СуммаЗачета");
		
		ОтчетОРозничныхПродажах.Предоплаты.Загрузить(ТаблицаПредоплаты);
		ОтчетОРозничныхПродажах.ЗачетАвансов.Загрузить(ТаблицаЗачетАванса);
		ОтчетОРозничныхПродажах.ОплатаСчетов.Загрузить(ТаблицаОплатаСчетов);
		
		ОтчетОРозничныхПродажах.Комментарий = НСтр("ru = 'Создан автоматически закрытием кассовой смены'");
		
		ОтчетОРозничныхПродажах.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
		ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		ДокументыКПроведению.Добавить(ОтчетОРозничныхПродажах.Ссылка);
		
		СуммаПродаж = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ОтчетОРозничныхПродажах, "Товары") 
			+ УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ОтчетОРозничныхПродажах, "АгентскиеУслуги")
			+ ОтчетОРозничныхПродажах.ПодарочныеСертификаты.Итог("Сумма")
			+ ОтчетОРозничныхПродажах.Предоплаты.Итог("Сумма");
			
		// Оплаты картами, сертификатами собсвенными и чужими, а также зачеты авансов
		БезналичнаяОплата = ОтчетОРозничныхПродажах.Оплата.Итог("СуммаОплаты") 
			+ ОтчетОРозничныхПродажах.ЗачетАвансов.Итог("СуммаЗачета");
		
		// Если есть продажи оплаченные наличными
		Если  СуммаПродаж > БезналичнаяОплата
			И ЕстьПравоПриемРозничнойВыручки Тогда
			ПриходныйОрдер = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ПриходныйОрдер.Заполнить(ОтчетОРозничныхПродажах.Ссылка);
			
			Если Не ИспользоватьФиксированноеВремяВДокументах Тогда
				ПриходныйОрдер.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
			КонецЕсли;
			
			ПриходныйОрдер.Записать(РежимЗаписиДокумента.Запись);
			ДокументыКПроведению.Добавить(ПриходныйОрдер.Ссылка);
		КонецЕсли;
		
		СуммаВозвратов = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ОтчетОРозничныхПродажах, "Возвраты") 
			+ ОтчетОРозничныхПродажах.Предоплаты.Итог("СуммаВозврат");
		
		// Если есть возвраты оплаченные наличными
		Если СуммаВозвратов > ОтчетОРозничныхПродажах.ВозвратОплаты.Итог("СуммаОплаты")
			И ЕстьПравоВозвратРозничнойВыручки Тогда
			РасходныйОрдер = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РасходныйОрдер.Заполнить(ОтчетОРозничныхПродажах.Ссылка);
			
			Если Не ИспользоватьФиксированноеВремяВДокументах Тогда
				РасходныйОрдер.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
			КонецЕсли;
			
			РасходныйОрдер.Записать(РежимЗаписиДокумента.Запись);
			ДокументыКПроведению.Добавить(РасходныйОрдер.Ссылка);
		КонецЕсли;
		
		СтрокаДокументы.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах.Ссылка;
		
		ТаблицаРеквизиты = НОвый ТаблицаЗначений;
		ТаблицаРеквизиты.Колонки.Добавить("Период");
		ТаблицаРеквизиты.Колонки.Добавить("Регистратор");
		ТаблицаРеквизиты.Колонки.Добавить("Организация");
		ТаблицаРеквизиты.Колонки.Добавить("СчетНаОплатуПокупателю");
		
		НоваяСтрокаРеквизиты             = ТаблицаРеквизиты.Добавить(); 
		НоваяСтрокаРеквизиты.Период      = ОтчетОРозничныхПродажах.Дата;
		НоваяСтрокаРеквизиты.Регистратор = ОтчетОРозничныхПродажах.Ссылка;
		НоваяСтрокаРеквизиты.Организация = ОтчетОРозничныхПродажах.Организация;
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОтгрузкиПоСчетам(
			СчетаНаОплатуПокупателю,
			ТоварыПоДокументу,
			Неопределено,
			ТаблицаРеквизиты);
		
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ТаблицаРеквизиты);
			
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
	Для Каждого СтрокаПоЧеку Из ПараметрыЗаполнения.ТаблицаЧеки Цикл
	
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаПоЧеку);
		
		НайденныеСтроки = ПараметрыЗаполнения.ТаблицаДокументы.НайтиСтроки(ДанныеЗаполнения);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
		
			ДокументОбъект = СтрокаПоЧеку.РозничнаяПродажа.ПолучитьОбъект();
			ДокументОбъект.ОтчетОРозничныхПродажах = НайденныеСтроки[0].ОтчетОРозничныхПродажах;
			ДокументОбъект.Записать(); 
			
		КонецЕсли;
	
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
	Если ОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	ПровестиДокументы(ДокументыКПроведению);
	
	Возврат ПараметрыЗаполнения.ТаблицаДокументы.ВыгрузитьКолонку("ОтчетОРозничныхПродажах");
КонецФункции

Процедура ПровестиДокументы(ДокументыКПроведению)
	
	НепроведенныеДокументы = ОбщегоНазначения.ПровестиДокументы(ДокументыКПроведению);
	Для Каждого РезультатПроведения Из НепроведенныеДокументы Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не проведен документ %1: %2'"),
			Строка(РезультатПроведения.Ссылка), РезультатПроведения.ОписаниеОшибки),
			РезультатПроведения.Ссылка, "Объект");
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти 

#Область ОбработкаОбновления
// Процедура - обработчик обновления
// Заполняет счет кассы в документе "Розничная продажа" исходя из его содержимого или ОРП к которому он привязан
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//
Процедура ЗаполнитьСчетКасса(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	РозничнаяПродажа.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДокументОтчетОРозничныхПродажах.СчетКасса, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетКасса
	|ПОМЕСТИТЬ ВТ_ДокументыКОбработке
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ДокументОтчетОРозничныхПродажах
	|		ПО РозничнаяПродажа.ОтчетОРозничныхПродажах = ДокументОтчетОРозничныхПродажах.Ссылка
	|ГДЕ
	|	РозничнаяПродажа.СчетКасса = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РозничнаяПродажаТовары.НомерСтроки) КАК СтрокТовары,
	|	ВТ_ДокументыКОбработке.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РозничнаяПродажаАгентскиеУслуги.НомерСтроки) КАК СтрокАгентскиеУслуги,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РозничнаяПродажаУслугиПлатежногоАгента.НомерСтроки) КАК СтрокПлатежныеАгенты,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РозничнаяПродажаПодарочныеСертификаты.НомерСтроки) КАК СтрокСертификаты,
	|	ВТ_ДокументыКОбработке.СчетКасса КАК СчетКасса
	|ПОМЕСТИТЬ ВТ_СодержаниеДокумента
	|ИЗ
	|	ВТ_ДокументыКОбработке КАК ВТ_ДокументыКОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|		ПО ВТ_ДокументыКОбработке.Ссылка = РозничнаяПродажаТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.АгентскиеУслуги КАК РозничнаяПродажаАгентскиеУслуги
	|		ПО ВТ_ДокументыКОбработке.Ссылка = РозничнаяПродажаАгентскиеУслуги.Ссылка
	|			И (НЕ ЕСТЬNULL(РозничнаяПродажаАгентскиеУслуги.ДоговорКонтрагента.ПлатежныйАгент, ЛОЖЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.АгентскиеУслуги КАК РозничнаяПродажаУслугиПлатежногоАгента
	|		ПО ВТ_ДокументыКОбработке.Ссылка = РозничнаяПродажаУслугиПлатежногоАгента.Ссылка
	|			И (ЕСТЬNULL(РозничнаяПродажаУслугиПлатежногоАгента.ДоговорКонтрагента.ПлатежныйАгент, ЛОЖЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.ПодарочныеСертификаты КАК РозничнаяПродажаПодарочныеСертификаты
	|		ПО ВТ_ДокументыКОбработке.Ссылка = РозничнаяПродажаПодарочныеСертификаты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыКОбработке.Ссылка,
	|	ВТ_ДокументыКОбработке.СчетКасса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СодержаниеДокумента.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_СодержаниеДокумента.СчетКасса <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ВТ_СодержаниеДокумента.СчетКасса
	|		КОГДА ВТ_СодержаниеДокумента.СтрокТовары = 0
	|				И ВТ_СодержаниеДокумента.СтрокАгентскиеУслуги = 0
	|				И ВТ_СодержаниеДокумента.СтрокПлатежныеАгенты <> 0
	|				И ВТ_СодержаниеДокумента.СтрокСертификаты = 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаПлатежногоАгента)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
	|	КОНЕЦ КАК СчетКасса
	|ИЗ
	|	ВТ_СодержаниеДокумента КАК ВТ_СодержаниеДокумента";
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектовОбработано = ОбъектовОбработано + 1;
		
		НачатьТранзакцию();
		
		Попытка
			// Блокируем объект от изменения другими сеансами.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.РозничнаяПродажа");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.СчетКасса = Выборка.СчетКасса;
			
			// Запись обработанного объекта (без перепроведения).
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедуре Документы.РозничнаяПродажа.ЗаполнитьСчетКасса() не удалось обработать документ по причине:
					|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.РозничнаяПродажа, Выборка.Ссылка, ТекстСообщения);
				
		КонецПопытки; 
		
	КонецЦикла;
		
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре Документы.РозничнаяПродажа.ЗаполнитьСчетКасса() не удалось обработать документы: в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РозничнаяПродажа,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.РозничнаяПродажа.ЗаполнитьСчетКасса() обработала очередную порцию документов: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
			
	Параметры.ОбработкаЗавершена = (ОбъектовОбработано = 0);
	
КонецПроцедуры

Процедура ЗаполнитьСистемуНалогообложения(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	РозничнаяПродажа.Ссылка КАК Ссылка,
	|	КОНЕЦПЕРИОДА(РозничнаяПродажа.Дата, МЕСЯЦ) КАК ДатаПериода,
	|	РозничнаяПродажа.Организация КАК Организация
	|ИЗ
	|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
	|ГДЕ
	|	РозничнаяПродажа.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.ТипыСистемНалогообложенияККТ.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПериода УБЫВ
	|ИТОГИ ПО
	|	ДатаПериода,
	|	Организация";
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПоПериодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоПериодам.Следующий() Цикл
		ВыборкаПоОрганизациям = ВыборкаПоПериодам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОрганизациям.Следующий() Цикл
			СистемаНалогообложения = ПечатьФискальныхДокументов.НалоговыйРежимПоУмолчаниюДляПечатиЧека(
						ВыборкаПоОрганизациям.Организация, ВыборкаПоОрганизациям.ДатаПериода);
						
			ВыборкаПоДокументам = ВыборкаПоОрганизациям.Выбрать();
			Пока ВыборкаПоДокументам.Следующий() Цикл
				
				ОбъектовОбработано = ОбъектовОбработано + 1;
				
				НачатьТранзакцию();
				
				Попытка
					// Блокируем объект от изменения другими сеансами.
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.РозничнаяПродажа");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументам.Ссылка);
					Блокировка.Заблокировать();
					
					ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
					
					// Если объект ранее был удален, пропускаем его.
					Если ДокументОбъект = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					ДокументОбъект.СистемаНалогообложения = СистемаНалогообложения;
					
					// Запись обработанного объекта (без перепроведения).
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					// Если не удалось обработать какой-либо документ, повторяем попытку снова.
					ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Процедуре Документы.РозничнаяПродажа.ЗаполнитьСистемуНалогообложения() не удалось обработать документ по причине:
							|%1'"),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Документы.РозничнаяПродажа, ВыборкаПоДокументам.Ссылка, ТекстСообщения);
						
				КонецПопытки; 
			
			КонецЦикла;
		КонецЦикла; 
	КонецЦикла;
	
	Если ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре Документы.РозничнаяПродажа.ЗаполнитьСистемуНалогообложения() не удалось обработать документы: в %1 из %2 возникли ошибки'"),
				ПроблемныхОбъектов,
				ОбъектовОбработано);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РозничнаяПродажа,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Процедура Документы.РозничнаяПродажа.ЗаполнитьСистемуНалогообложения() обработала очередную порцию документов: %1 документов'"), ОбъектовОбработано));
	КонецЕсли;
			
	Параметры.ОбработкаЗавершена = (ОбъектовОбработано = 0);
КонецПроцедуры
 
#КонецОбласти 

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыДокумента = Новый Соответствие;
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийРозничнаяПродажа.Предоплата, "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийРозничнаяПродажа.Продажа,    "ФормаДокументаОбщая");
	ФормыДокумента.Вставить(Перечисления.ВидыОперацийРозничнаяПродажа.Возврат,    "ФормаДокументаОбщая");
	
	Возврат ФормыДокумента;

КонецФункции

Функция ТекстЗапросаДанныеДляОбновленияЦенДокументов() Экспорт
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РозничнаяПродажаТовары.Номенклатура КАК Номенклатура,
	|	РозничнаяПродажаТовары.Цена КАК Цена,
	|	&Валюта КАК Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
	|ГДЕ
	|	РозничнаяПродажаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РозничнаяПродажаУслуги.Номенклатура,
	|	РозничнаяПродажаУслуги.Цена,
	|	&Валюта,
	|	&СпособЗаполненияЦены,
	|	&ЦенаВключаетНДС
	|ИЗ
	|	Документ.РозничнаяПродажа.АгентскиеУслуги КАК РозничнаяПродажаУслуги
	|ГДЕ
	|	РозничнаяПродажаУслуги.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Цена,
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
	Возврат ТекстЗапроса;
КонецФункции

Функция СвойствоСтруктуры(Структура, Путь)
	Если ТипЗнч(Структура) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоложениеТочки = СтрНайти(Путь, ".");
	Если ПоложениеТочки = 0 Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура, Путь);
	Иначе
		Возврат СвойствоСтруктуры(
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура, Лев(Путь, ПоложениеТочки-1)),
			Сред(Путь, ПоложениеТочки+1));
	КонецЕсли;
КонецФункции


#КонецОбласти

#КонецЕсли














