#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 14, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ТекстЗапросаДанныеДляПечатиСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("Реквизиты",     НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.Ссылка.Дата КАК ДатаОснования,
	|	Реквизиты.Ссылка.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Склад,
	|	Реквизиты.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Реквизиты.Ссылка.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Ссылка.ПодразделениеОрганизации.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Реквизиты.Ссылка.Организация.ОбособленноеПодразделение
	|					ТОГДА Реквизиты.Ссылка.Организация.ЦифровойИндексОбособленногоПодразделения
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Ссылка.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Ссылка.Организация.ГоловнаяОрганизация
	|		ИНАЧЕ Реквизиты.Ссылка.Организация
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА Реквизиты.Ссылка.Организация.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Ссылка.Организация.ГоловнаяОрганизация.ИНН
	|		ИНАЧЕ Реквизиты.Ссылка.Организация.ИНН
	|	КОНЕЦ КАК ИННпоставщика,
	|	ВЫБОР
	|		КОГДА Реквизиты.Ссылка.ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА Реквизиты.Ссылка.ПодразделениеОрганизации
	|		ИНАЧЕ Реквизиты.Ссылка.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделениеПоставщика,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА Реквизиты.Контрагент.ОбособленноеПодразделение
	|				И Реквизиты.Контрагент.ГоловнойКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Реквизиты.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ Реквизиты.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	Реквизиты.Контрагент.ИНН КАК ИННпокупателя,
	|	Реквизиты.Контрагент КАК ОбособленноеПодразделениеПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК Грузоотправитель,
	|	Реквизиты.Ссылка.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.Представление КАК Основание,
	|	Реквизиты.ДоговорКонтрагента.Дата КАК ОснованиеДата,
	|	Реквизиты.ДоговорКонтрагента.Номер КАК ОснованиеНомер,
	|	Реквизиты.Ссылка.Исполнитель КАК Исполнитель,
	|	Реквизиты.Ссылка.ИсполнительНаОсновании КАК ИсполнительНаОсновании,
	|	НЕОПРЕДЕЛЕНО КАК ОтпускПроизвел,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьНомер,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьДата,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьВыдана,
	|	НЕОПРЕДЕЛЕНО КАК ДоверенностьЧерезКого,
	|	НЕОПРЕДЕЛЕНО КАК ЗаЗаказчикаНаОсновании,
	|	ЛОЖЬ КАК ЕстьТовары,
	|	"""" КАК АдресДоставки,
	|	"""" КАК СведенияОТранспортировкеИГрузе,
	|	НЕОПРЕДЕЛЕНО КАК ОтветственныйЗаОформление,
	|	"""" КАК СопроводительныеДокументы,
	|	НЕОПРЕДЕЛЕНО КАК Перевозчик,
	|	ЛОЖЬ КАК ПеревозкаАвтотранспортом
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|	И (Реквизиты.СчетФактура = &СчетФактура
	|				И Реквизиты.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
	|			ИЛИ Реквизиты.НомерСтроки = &НомерСтроки)
	|	И Реквизиты.Контрагент = &Контрагент
	|	И Реквизиты.ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Реквизиты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерТабЧасти,
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Ссылка.Номенклатура КАК Товар,
	|	ТаблицаУслуги.Ссылка.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаУслуги.Ссылка.Номенклатура.КодОКВЭД2 КАК ТоварАртикул,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаУслуги.Ссылка.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.Ссылка.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ ТаблицаУслуги.Ссылка.Номенклатура.Наименование
	|	КОНЕЦ КАК ТоварНаименование,
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаПроисхождения,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеСтраны,
	|	НЕОПРЕДЕЛЕНО КАК НомерГТД,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеГТД,
	|	НЕОПРЕДЕЛЕНО КАК РегистрационныйНомерТД,
	|	ТаблицаУслуги.Ссылка.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.Цена КАК Цена,
	|	ТаблицаУслуги.Сумма КАК Сумма,
	|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
	|	ТаблицаУслуги.Ссылка.СтавкаНДС КАК СтавкаНДС,
	|	ИСТИНА КАК ЭтоУслуга,
	|	ТаблицаУслуги.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ТаблицаУслуги.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоКомиссия,
	|	ТаблицаУслуги.Сумма КАК ВсегоРуб,
	|	ТаблицаУслуги.СуммаНДС КАК НДСРуб,
	|	ТаблицаУслуги.Сумма - ТаблицаУслуги.СуммаНДС КАК СуммаБезНДСРуб,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК КонтрагентСводныйСФ,
	|	ТаблицаУслуги.Ссылка.Номенклатура.ПериодичностьУслуги КАК ПериодичностьУслуги,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка) КАК ТоварКодТНВЭД,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	0 КАК НалоговаяБазаНДС
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &ДокументОснование
	|	И (ТаблицаУслуги.СчетФактура = &СчетФактура
	|				И ТаблицаУслуги.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
	|			ИЛИ ТаблицаУслуги.НомерСтроки = &НомерСтроки)
	|	И ТаблицаУслуги.Контрагент = &Контрагент
	|	И ТаблицаУслуги.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// Возвращает текст запроса для отбора документов к печати УПД по релевантной форме.
// Добавлена во все документы, для которых доступна печать УПД.
// Параметры:
// ВерсияПостановленияНДС1137 - см.УчетНДСПереопределяемый.ВерсияПостановленияНДС1137()
// ЕстьПрослеживаемыеТовары - Булево - признак того, что в документе есть прослеживаемый товар. Для текущего документа
// параметр не используется, оставлен для совместимости.
//
// Возвращаемое значение: 
// ТекстЗапроса - строка с необходимым текстом запроса.
//
Функция ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов(ВерсияПостановленияНДС1137 = Неопределено, ЕстьПрослеживаемыеТовары = Ложь) Экспорт
	
	ОтбиратьВсеСФ1137 = Ложь;
	Если ВерсияПостановленияНДС1137 = Неопределено Тогда
		ОтбиратьВсеСФ1137 = Истина;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка) КАК СчетФактура,
	|	ОказаниеУслуг.Ссылка.Дата КАК Дата,
	|	ОказаниеУслуг.Ссылка.Номер КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК Руководитель,
	|	НЕОПРЕДЕЛЕНО КАК ГлавныйБухгалтер,
	|	ИСТИНА КАК СчетФактураБезНДС,
	|	ЛОЖЬ КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ИСТИНА КАК УдалитьПрефиксыИзНомера,
	|	ИСТИНА КАК ЭтоСчетФактураВыданный,
	|	ИСТИНА КАК ВыводитьСуммуБезНДС,
	|	ОказаниеУслуг.Ссылка КАК ДокументОснование,
	|	ОказаниеУслуг.НомерСтроки КАК НомерСтроки,
	|	ОказаниеУслуг.Контрагент КАК Контрагент,
	|	ОказаниеУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ГосКонтракты.Код, """") КАК ИдентификаторГосКонтракта,
	|	"""" КАК КППСчетаФактуры,
	|	"""" КАК КПППродавца,
	|	ОказаниеУслуг.Ссылка.Дата КАК ДатаСведений
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГосКонтракты КАК ГосКонтракты
	|			ПО ДоговорыКонтрагентов.ГосударственныйКонтракт = ГосКонтракты.Ссылка
	|		ПО ОказаниеУслуг.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ОказаниеУслуг.Ссылка В(&МассивОбъектов)
	|	И ОказаниеУслуг.Ссылка.Дата > &УсловиеПоДате";
	
	Если ОтбиратьВсеСФ1137 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "> &УсловиеПоДате",
				">= &НачалоПримененияПостановления1137");
	ИначеЕсли ВерсияПостановленияНДС1137 = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "> &УсловиеПоДате",
			"< &НачалоПримененияПостановления1137");
	ИначеЕсли ВерсияПостановленияНДС1137 >= 1 И ВерсияПостановленияНДС1137 <= 3 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "> &УсловиеПоДате",
			"МЕЖДУ &НачалоПримененияПостановления1137 И ДАТАВРЕМЯ(2017,09,30,23,59,59)");
	ИначеЕсли ВерсияПостановленияНДС1137 = 4 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "> &УсловиеПоДате",
			"МЕЖДУ ДАТАВРЕМЯ(2017,10,1) И ДАТАВРЕМЯ(2021,06,30,23,59,59)");
	ИначеЕсли ВерсияПостановленияНДС1137 = 5 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "> &УсловиеПоДате",
			"МЕЖДУ ДАТАВРЕМЯ(2021,7,1) И ДАТАВРЕМЯ(2023,09,30,23,59,59)");
	ИначеЕсли ВерсияПостановленияНДС1137 = 6 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "> &УсловиеПоДате",
			">= ДАТАВРЕМЯ(2023,10,1)");
	КонецЕсли;
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект, СведенияОНоменклатуре = Неопределено) Экспорт
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		ДанныеОбъекта = Новый Структура("Дата, Организация, ДеятельностьНаПатенте, Реализация");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		ДанныеОбъекта.Реализация = Истина;
		
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Объект.Номенклатура, ДанныеОбъекта);
	КонецЕсли;
	
	СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетДоходов) Тогда
		Объект.СчетДоходов = СчетаУчета.СчетДоходов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетУчетаНДСПродажи) Тогда
		Объект.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("Субконто")
		И ЗначениеЗаполнено(СведенияОНоменклатуре.Субконто) Тогда
		
		Объект.Субконто = СведенияОНоменклатуре.Субконто;
		
	ИначеЕсли СведенияОНоменклатуре.Свойство("ВидСубконтоТипЗначения")
		И ЗначениеЗаполнено(СведенияОНоменклатуре.ВидСубконтоТипЗначения) Тогда
		
		Объект.Субконто =
			СведенияОНоменклатуре.ВидСубконтоТипЗначения.ПривестиЗначение(Объект.Субконто);
		
	Иначе
		Объект.Субконто = Неопределено;
	КонецЕсли;
	
	Если СчетаУчета.СчетУчетаНДСПродажи <> Неопределено Тогда
		Объект.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетаУчета.СчетРасходов) Тогда
		Объект.СчетРасходов = СчетаУчета.СчетРасходов;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
	КонецЦикла;

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Возвращаяет массив документов, для которых выписка счетов-фактур не требуется
//
Функция СчетаФактурыНеТребуются(МассивДокументов) Экспорт
	
	ДокументыСчетФактураНеТребуются = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат ДокументыСчетФактураНеТребуются
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОказаниеУслуг.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ЕстьНДС
	|ПОМЕСТИТЬ ВТ_ДокументыСНДС
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.Ссылка В(&МассивДокументов)
	|	И ОказаниеУслуг.СуммаНДС > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОказаниеУслуг.Ссылка,
	|	ОказаниеУслуг.Дата,
	|	ОказаниеУслуг.Организация,
	|	ЕСТЬNULL(ВТ_ДокументыСНДС.ЕстьНДС, ЛОЖЬ) КАК ЕстьНДС
	|ИЗ
	|	Документ.ОказаниеУслуг КАК ОказаниеУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыСНДС КАК ВТ_ДокументыСНДС
	|		ПО (ВТ_ДокументыСНДС.Ссылка = ОказаниеУслуг.Ссылка)
	|ГДЕ
	|	ОказаниеУслуг.Ссылка В(&МассивДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.ЕстьНДС
			И (НЕ УчетнаяПолитика.ПлательщикНДС(Выборка.Организация, Выборка.Дата) 
			ИЛИ УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Выборка.Дата) >= 3 
			И НЕ УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Выборка.Организация, Выборка.Дата)) Тогда
			ДокументыСчетФактураНеТребуются.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыСчетФактураНеТребуются;
	
КонецФункции

// Возвращаяет массив документов с прослеживаемыми товарами.
//
// Параметры:
// МассивДокументов - массив проверяемых документов.
//
// Возвращаемое значение:
// ДокументыСПрослеживаемымиТоварами - массив документов с прослеживаемыми товарами.
//
Функция ДокументыСПрослеживаемымиТоварами(МассивДокументов) Экспорт
	
	// В документе не может быть прослеживаемых товаров.
	ДокументыСПрослеживаемымиТоварами = Новый Массив;
	Возврат ДокументыСПрослеживаемымиТоварами;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиОбновления

Функция ТекстЗапросаДанныеДетализацииДоУслуг() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	Услуги.СчетРасходов КАК СчетРасходов,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Услуги.Субконто КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
	|	Услуги.Номенклатура КАК Услуга,
	|	1 КАК Сумма
	|ИЗ
	|	Документ.ОказаниеУслуг КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	СчетРасходов,
	|	НоменклатурнаяГруппа";
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "") Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	
	СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом	= СчетаУчета.СчетРасчетовПокупателя;
	СтрокаТабличнойЧасти.СчетУчетаРасчетовПоАвансам		= СчетаУчета.СчетАвансовПокупателя;
	
КонецПроцедуры

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	МассивРеквизитов = Новый Массив();
	МассивРеквизитов.Добавить("УдалитьУчитыватьНДС");
	
	Возврат МассивРеквизитов;
	
КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ДоговорДляОтложенногоПроведения = Неопределено) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	ЭтоОтложенноеПроведение = ЗначениеЗаполнено(ДоговорДляОтложенногоПроведения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента();
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Реквизиты.Вставить("ЭтоОтложенноеПроведение", ЭтоОтложенноеПроведение);
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПрименяетсяУСН       = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Реквизиты.Организация, Реквизиты.Период);
	ПлательщикЕНВД       = УчетнаяПолитика.ПлательщикЕНВД(Реквизиты.Организация, Реквизиты.Период);
	
	ЭтоДоходыЕНВД = ПлательщикЕНВД И БухгалтерскийУчетПовтИсп.СчетОтноситсяКДеятельностиЕНВД(Реквизиты.СчетДоходов);
	
	Субсчета91	= БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",	ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ПрименяетсяУСН",			         ПрименяетсяУСН);
	Запрос.УстановитьПараметр("ПрименяетсяУСНПатент",	         ПрименяетсяУСНПатент);
	Запрос.УстановитьПараметр("УчитыватьЗадолженностьУСНПатент",
		УчетПСН.УчитыватьЗадолженностьПоДеятельностиНаПатенте(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ДеятельностьНаПатенте",	         Реквизиты.ДеятельностьНаПатенте);
	Запрос.УстановитьПараметр("ЭтоДоходыЕНВД",			         ЭтоДоходыЕНВД);
	Запрос.УстановитьПараметр("Субсчета91",				         Субсчета91);
	Запрос.УстановитьПараметр("ЭтоОтложенноеПроведение",         ЭтоОтложенноеПроведение);
	Запрос.УстановитьПараметр("ДоговорДляОтложенногоПроведения", ДоговорДляОтложенногоПроведения);
	Запрос.УстановитьПараметр("МассивКодовРеализацийЗаРубеж",
		Справочники.КодыОперацийРаздела7ДекларацииПоНДС.КодыРеализацииУслугЗаРубежом());
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаЗачетАвансов(НомераТаблиц)
		+ ТекстЗапросаРеализация(НомераТаблиц)
		+ ТекстЗапросаРеализацияУслуг(НомераТаблиц)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты);
		
	Результат = Запрос.ВыполнитьПакет();
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаУслуги", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУслуги.Ссылка КАК Ссылка,
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	Реквизиты.Период КАК Дата,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Сумма + ВЫБОР
	|		КОГДА Реквизиты.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаУслуги.СуммаНДС
	|	КОНЕЦ КАК СуммаСНДС,
	|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ТаблицаУслуги.Сумма + ВЫБОР
	|			КОГДА Реквизиты.СуммаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаУслуги.СуммаНДС
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВзаиморасчетов,
	|	ТаблицаУслуги.Сумма + ВЫБОР
	|		КОГДА Реквизиты.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаУслуги.СуммаНДС
	|	КОНЕЦ КАК СуммаРуб,
	|	ТаблицаУслуги.СуммаНДС КАК СуммаНДСРуб,
	|	Реквизиты.СтавкаНДС КАК СтавкаНДС,
	|	Реквизиты.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	Реквизиты.СчетДоходов КАК СчетДоходов,
	|	Реквизиты.Субконто КАК Субконто,
	|	ВЫБОР
	|		КОГДА &ЭтоДоходыЕНВД
	|				И НЕ Реквизиты.ДеятельностьНаПатенте
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоходЕНВД,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДоходПатент,
	|	Реквизиты.СчетРасходов КАК СчетРасходов,
	|	ТаблицаУслуги.Контрагент КАК Контрагент,
	|	ТаблицаУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаУслуги.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаУслуги.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаУслуги.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаУслуги.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.ДоговорКонтрагента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ТаблицаУслуги.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаУслуги.СчетФактура КАК СчетФактура,
	|	ТаблицаУслуги.ВыданСФ КАК ВыданСФ,
	|	ТаблицаУслуги.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	|	СправочникДоговоры.КодРаздел7ДекларацииНДС,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ОперацияНеПодлежитНалогообложению, ЛОЖЬ) КАК КодСоответствуетСт149НКРФ,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ВключаетсяВРеестрПодтверждающихДокументов, ЛОЖЬ) КАК КодВключаетсяВРеестр
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК СправочникДоговоры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|			ПО СправочникДоговоры.КодРаздел7ДекларацииНДС = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|		ПО ТаблицаУслуги.ДоговорКонтрагента = СправочникДоговоры.Ссылка
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|	И (НЕ &ЭтоОтложенноеПроведение
	|			ИЛИ ТаблицаУслуги.ДоговорКонтрагента = &ДоговорДляОтложенногоПроведения)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(НомераТаблиц)

	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты",			НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ЗачетАвансовТаблицаДокумента",	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	""ОказаниеУслуг"" КАК ВидОперации,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	&ПрименяетсяУСН КАК УчитыватьЗадолженностьУСН,
	|	&УчитыватьЗадолженностьУСНПатент КАК УчитыватьЗадолженностьУСНПатент,
	|	ЛОЖЬ КАК ДеятельностьНаТорговомСборе,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	""Выбытие"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаУслуги.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаУслуги.Ссылка КАК ДокументРасчетов,
	|	ТаблицаУслуги.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	ТаблицаУслуги.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ТаблицаУслуги.Контрагент КАК Контрагент,
	|	ТаблицаУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаУслуги.ВидДоговора КАК ВидДоговора,
	|	ТаблицаУслуги.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаУслуги.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаУслуги.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	ТаблицаУслуги.РасчетыВВалюте КАК РасчетыВВалюте,
	|	ТаблицаУслуги.ПодразделениеОрганизации КАК Подразделение,
	|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ТаблицаУслуги.СуммаРуб) КАК СуммаРуб,
	|	СУММА(0) КАК СуммаВзаиморасчетовКомитента,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаУслуги.ДоходЕНВД
	|				ТОГДА ТаблицаУслуги.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаУслуги.ДоходПатент
	|				ТОГДА ТаблицаУслуги.СуммаВзаиморасчетов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВзаиморасчетовПатент,
	|	СУММА(0) КАК СуммаВзаиморасчетовТорговыйСбор
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.Ссылка,
	|	ТаблицаУслуги.СчетУчетаРасчетовСКонтрагентом,
	|	ТаблицаУслуги.СчетУчетаРасчетовПоАвансам,
	|	ТаблицаУслуги.Контрагент,
	|	ТаблицаУслуги.ДоговорКонтрагента,
	|	ТаблицаУслуги.ВидДоговора,
	|	ТаблицаУслуги.ВалютаВзаиморасчетов,
	|	ТаблицаУслуги.РасчетыВУсловныхЕдиницах,
	|	ТаблицаУслуги.УчетАгентскогоНДС,
	|	ТаблицаУслуги.РасчетыВВалюте,
	|	ТаблицаУслуги.ПодразделениеОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРеализация(НомераТаблиц)

	НомераТаблиц.Вставить("РеализацияРеквизиты",		НомераТаблиц.Количество());
	НомераТаблиц.Вставить("РеализацияТаблицаДокумента",	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СтавкаНДС КАК СтавкаНДС,
	|	Реквизиты.СчетДоходов КАК СчетДоходов,
	|	Реквизиты.Субконто КАК Субконто,
	|	Реквизиты.СчетРасходов КАК СчетРасходов,
	|	Реквизиты.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	Реквизиты.КодОперацииПоСделке КАК КодОперацииПоСделке,
	|	Реквизиты.НДСИсчисляетсяНалоговымАгентом КАК НДСИсчисляетсяНалоговымАгентом
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Услуги"" КАК ИмяСписка,
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаУслуги.СуммаРуб КАК СуммаРуб,
	|	ТаблицаУслуги.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ТаблицаУслуги.СуммаРуб КАК СуммаБУ,
	|	ТаблицаУслуги.СуммаРуб КАК СуммаНУ,
	|	Реквизиты.СчетРасходов КАК СчетУчета,
	|	Реквизиты.СчетДоходов КАК СчетДоходов,
	|	Реквизиты.Субконто КАК Субконто,
	|	Реквизиты.СтавкаНДС КАК СтавкаНДС,
	|	Реквизиты.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	ТаблицаУслуги.СчетУчетаРасчетовСКонтрагентом КАК КорСчет,
	|	ТаблицаУслуги.Контрагент КАК КорСубконто1,
	|	ТаблицаУслуги.ДоговорКонтрагента КАК КорСубконто2,
	|	ТаблицаУслуги.Ссылка КАК КорСубконто3,
	|	ТаблицаУслуги.Контрагент КАК Контрагент,
	|	ТаблицаУслуги.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаУслуги.СчетФактура КАК СчетФактура,
	|	ТаблицаУслуги.ВыданСФ КАК ВыданСФ,
	|	ТаблицаУслуги.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаУслуги.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	ЛОЖЬ КАК ЭтоКомиссия,
	|	ИСТИНА КАК ЭтоУслуга,
	|	НЕОПРЕДЕЛЕНО КАК Комитент,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКомиссии,
	|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
	|	НЕОПРЕДЕЛЕНО КАК СчетРасчетовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК СчетАвансовСКомитентом,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаРасчетовСКомитентом,
	|	0 КАК СуммаРасчетовСКомитентом,
	|	0 КАК СуммаПоступленияОтКомитента,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.ДоходЕНВД
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КодыОперацийРаздела7ДекларацииПоНДС.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаУслуги.КодРаздел7ДекларацииНДС
	|	КОНЕЦ КАК КодРаздел7ДекларацииНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.ДоходЕНВД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ТаблицаУслуги.КодСоответствуетСт149НКРФ
	|	КОНЕЦ КАК КодСоответствуетСт149НКРФ,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.ДоходЕНВД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ТаблицаУслуги.КодВключаетсяВРеестр
	|	КОНЕЦ КАК КодВключаетсяВРеестр,
	|	ВЫБОР
	|		КОГДА ТаблицаУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|				И Реквизиты.Период >= ДАТАВРЕМЯ(2019, 7, 1)
	|			ТОГДА ТаблицаУслуги.КодРаздел7ДекларацииНДС В (&МассивКодовРеализацийЗаРубеж)
	|						И НЕ Реквизиты.КодОперацииНоменклатурыСоответствуетСт149НКРФ
	|					ИЛИ Реквизиты.КодОперацииПоСделке В (&МассивКодовРеализацийЗаРубеж)
	|						И НЕ ТаблицаУслуги.КодСоответствуетСт149НКРФ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугиЗаРубежом
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаРеализацияУслуг(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаРеализацияУслуг", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаУслуги.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаУслуги.СчетРасходов КАК СчетРасходов,
	|	ТаблицаУслуги.Субконто КАК НоменклатурнаяГруппа,
	|	ТаблицаУслуги.Номенклатура КАК Услуга,
	|	СУММА(ТаблицаУслуги.СуммаРуб - ТаблицаУслуги.СуммаНДСРуб) КАК Сумма
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|ГДЕ
	|	НЕ ТаблицаУслуги.СчетРасходов В (&Субсчета91)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.СчетРасходов,
	|	ТаблицаУслуги.Субконто,
	|	ТаблицаУслуги.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Содержание") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	КонецЕсли;
	
	ТаблицаЗначений.ЗаполнитьЗначения("Реализация услуг", "Содержание");
	
КонецПроцедуры

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если Реквизиты.ЭтоОтложенноеПроведение
		ИЛИ НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаУслуги.Контрагент,
	|	ТаблицаУслуги.ДоговорКонтрагента,
	|	ТаблицаУслуги.ВалютаВзаиморасчетов,
	|	ТаблицаУслуги.ВидДоговора,
	|	ТаблицаУслуги.Дата
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Процедура ОбработкаОтложенногоПроведения(Параметры, Отказ) Экспорт
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведения(
		Параметры.Регистратор,
		Отказ,
		Параметры.ДоговорКонтрагента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	

	ТаблицаВзаиморасчеты = УчетВзаиморасчетовОтложенноеПроведение.ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		Параметры,
		ПараметрыПроведения.ЗачетАвансовТаблицаДокумента, Неопределено,
		ПараметрыПроведения.ЗачетАвансовРеквизиты, Отказ);

	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов",	ТаблицаВзаиморасчеты);

	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияЗачетАвансов(
		Параметры,
		ТаблицаВзаиморасчеты,
		ПараметрыПроведения.ЗачетАвансовРеквизиты,
		Отказ);
	
	УчетВзаиморасчетовОтложенноеПроведение.СформироватьДвиженияУСН(
		Параметры,
		СтруктураТаблицУСН);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Акты об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Акты";
	КомандаПечати.Представление = НСтр("ru = 'Акты об оказании услуг'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Счета-фактуры
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счета-фактуры'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиСчетовФактур";
	
	// Универсальный передаточный документ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД)'");
	КомандаПечати.Обработчик    = "УчетНДСКлиент.ВыполнитьКомандуПечатиУниверсальныхПередаточныхДокументов";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Оказание услуг""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акты") Тогда
		ИменаПечатныхФорм = Новый Соответствие;
		ТабличныйДокументАктОбОказанииУслуг = ПечатьАктовОбОказанииУслуг(
			МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ИменаПечатныхФорм, ПараметрыВывода);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акты", "Акты об оказании услуг",
			ТабличныйДокументАктОбОказанииУслуг ,,"Документ.ОказаниеУслуг.ПФ_MXL_Акт", ИменаПечатныхФорм);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
		МассивСчетовФактур = ПолучитьМассивСчетовФактурОбъктов(МассивОбъектов);
		Документы.СчетФактураВыданный.Печать(МассивСчетовФактур, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ОпределитьПодписантов(СписокДокументов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылки", СписокДокументов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОказаниеУслуг.Ссылка КАК Ссылка,
	|	ОказаниеУслуг.Исполнитель КАК Исполнитель,
	|	ОказаниеУслуг.Дата КАК Дата,
	|	ОказаниеУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ОказаниеУслуг.Организация КАК Организация
	|ИЗ
	|	Документ.ОказаниеУслуг КАК ОказаниеУслуг
	|ГДЕ
	|	ОказаниеУслуг.Ссылка В(&Ссылки)";
	
	ПодписантыДокументов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПодписиДокумента = Новый Структура;
		
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			ПодписиДокумента.Вставить("Исполнитель", Выборка.Исполнитель);
		Иначе
			ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(
				Выборка.Организация, Выборка.Дата, Выборка.ПодразделениеОрганизации);
			Если ЗначениеЗаполнено(ОтветственныеЛицаОрганизации.Руководитель) Тогда
				ПодписиДокумента.Вставить("Исполнитель", ОтветственныеЛицаОрганизации.Руководитель);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодписиДокумента) Тогда
			ПодписантыДокументов.Вставить(Выборка.Ссылка, ПодписиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодписантыДокументов;
	
КонецФункции

// Функция формирует табличный документ с печатными формами актов об обказании услуг
// для каждой строки табличной части
//
// Возвращаемое значение:
//  Табличный документ - печатные формы актов
//
Функция ПечатьАктовОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ИменаФайлов, ПараметрыВывода)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктаУслуги();
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ОказаниеУслуг_Акты";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОказаниеУслуг.ПФ_MXL_Акт");
	
	Шаблон = НСтр("ru = '[Получатель] [ОписаниеДокумента]'");
	
	ПараметрыВывода.Вставить("ОбъектыПечатиДляФаксимилеБП", Новый СписокЗначений);
	
	Пока Шапка.Следующий() Цикл
		
		СведенияОбОрганизации	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, , , , Истина);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		
		ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.Дата, Шапка.ПодразделениеОрганизации);
		
		Если ЗначениеЗаполнено(Шапка.Исполнитель) Тогда
			Если Шапка.Исполнитель = ОтветственныеЛицаОрганизации.Руководитель Тогда 
				ЗаместительПоПриказу = ОтветственныеЛицаОрганизации.РуководительПредставление;
				ДолжностьИНазваниеОрганизации = "" + ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление;
				Если ЗначениеЗаполнено(ПредставлениеОрганизации) И ЗначениеЗаполнено(ДолжностьИНазваниеОрганизации) Тогда
					ДолжностьИНазваниеОрганизации = ДолжностьИНазваниеОрганизации + " " + ПредставлениеОрганизации;
				ИначеЕсли ЗначениеЗаполнено(ПредставлениеОрганизации) Тогда
					ДолжностьИНазваниеОрганизации = ПредставлениеОрганизации;
				КонецЕсли;
			Иначе
				ДанныеОтветственногоЛица = ОтветственныеЛицаБП.РеквизитыПодписиУполномоченногоЛица(Шапка.Организация, Шапка.Исполнитель, Шапка.ИсполнительНаОсновании, Шапка.Дата);
				ЗаместительПоПриказу = "" + ДанныеОтветственногоЛица.ФИО.Представление;
				Если ЗначениеЗаполнено(Шапка.ИсполнительНаОсновании) И ЗначениеЗаполнено(ЗаместительПоПриказу) Тогда 
					ЗаместительПоПриказу = ЗаместительПоПриказу + ", " + ДанныеОтветственногоЛица.ОснованиеПраваПодписиПредставление;
				ИначеЕсли ЗначениеЗаполнено(Шапка.ИсполнительНаОсновании) Тогда
					ЗаместительПоПриказу =  "" + Шапка.ИсполнительНаОсновании;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеОтветственногоЛица.Должность) И ЗначениеЗаполнено(ПредставлениеОрганизации) Тогда
					ДолжностьИНазваниеОрганизации = "" + ДанныеОтветственногоЛица.ДолжностьПредставление + " " + ПредставлениеОрганизации;
				ИначеЕсли ЗначениеЗаполнено(ДанныеОтветственногоЛица.Должность) Тогда 
					ДолжностьИНазваниеОрганизации = "" + ДанныеОтветственногоЛица.ДолжностьПредставление;
				Иначе
					ДолжностьИНазваниеОрганизации = ПредставлениеОрганизации;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗаместительПоПриказу = ОтветственныеЛицаОрганизации.РуководительПредставление;
			ДолжностьИНазваниеОрганизации = "" + ОтветственныеЛицаОрганизации.РуководительДолжностьПредставление;
			Если ЗначениеЗаполнено(ПредставлениеОрганизации) И ЗначениеЗаполнено(ДолжностьИНазваниеОрганизации) Тогда
				ДолжностьИНазваниеОрганизации = ДолжностьИНазваниеОрганизации + " " + ПредставлениеОрганизации;
			ИначеЕсли ЗначениеЗаполнено(ПредставлениеОрганизации) Тогда
				ДолжностьИНазваниеОрганизации = ПредставлениеОрганизации;
			КонецЕсли;
		КонецЕсли;
		
		Выборка = Шапка.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Акт");
			
			ДанныеПечатиАкт = Новый Структура;
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Акт № %1/%2 от %3'"),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Ложь), Выборка.НомерСтроки, Формат(Шапка.Дата, "ДЛФ=DD"));
				
			ПредставлениеПоставщика	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, 
				"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			
			ДанныеПечатиАкт.Вставить("ТекстЗаголовка",					ТекстЗаголовка);
			ДанныеПечатиАкт.Вставить("ДолжностьИНазваниеОрганизации",	ДолжностьИНазваниеОрганизации);
			ДанныеПечатиАкт.Вставить("ЗаместительПоПриказу",			ЗаместительПоПриказу);
			ДанныеПечатиАкт.Вставить("ПредставлениеПоставщика",			ПредставлениеПоставщика);
			ДанныеПечатиАкт.Вставить("Поставщик",						Шапка.Поставщик);
			
			СведенияОКонтрагенте	= БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Выборка.Получатель, Шапка.Дата);
			ПредставлениеПолучателя	= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, 
				"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			ДанныеПечатиАкт.Вставить("ПредставлениеПолучателя",	ПредставлениеПолучателя);
			ДанныеПечатиАкт.Вставить("Получатель",				Выборка.Получатель);
			ДанныеПечатиАкт.Вставить("Основание",				Выборка.ПредставлениеДоговора);
			
			// Вывести табличную часть
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ДанныеПечатиАкт.Вставить("НомерСтроки", 1);
			ДанныеПечатиАкт.Вставить("Товар", РаботаСНоменклатуройКлиентСерверБП.СодержаниеУслуги(
				Выборка.Товар, Выборка.ПериодичностьУслуги, Выборка.Дата));
			
			Сумма		= ?(ЗначениеЗаполнено(Выборка.Сумма), Выборка.Сумма, 0);
			СуммаНДС	= ?(ЗначениеЗаполнено(Выборка.СуммаНДС), Выборка.СуммаНДС, 0);
			
			ДанныеПечатиАкт.Вставить("Всего", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма));
			
			ДанныеПечатиИтогоНДС = ПечатьТорговыхДокументов.ДанныеПечатиИтоговНДС(
				СуммаНДС, 
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Шапка.СтавкаНДС),
				Шапка.СуммаВключаетНДС);
			
			СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
			ИтоговаяСтрока	= НСтр("ru = 'Всего оказано услуг на сумму '") +
				ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, ВалютаРегламентированногоУчета);
			СуммаПрописью	= ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи,
				ВалютаРегламентированногоУчета);
				
			ДанныеПечатиАкт.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
			ДанныеПечатиАкт.Вставить("СуммаПрописью", СуммаПрописью);
			ОбластьМакета.Параметры.Заполнить(ДанныеПечатиАкт);
			ОбластьМакета.Параметры.Заполнить(ДанныеПечатиИтогоНДС);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// В документе может быть несколько одинаковых договоров.
			// Или может быть напечатно несколько документов с одинаковыми договорами.
			// В этом случае УправлениеПечатью.ЗадатьОбластьПечатиДокумента() сработает неправильно при повторной
			// установке области с таким же договором. Область не установится и факсимиле не сработает.
			// Поэтому нужно определить этот вариант и удалить все картинки с префиксом Факсимиле без имени области.
			ДанныеОбластиДоговора = ОбъектыПечати.НайтиПоЗначению(Выборка.ДоговорКонтрагента);
			Если ДанныеОбластиДоговора <> Неопределено Тогда
				УдалитьКартинкиФаксимилеБезОбластейПечати(ТабличныйДокумент);
			КонецЕсли;
			
			// В табличном документе зададим имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
				НомерСтрокиНачало, ОбъектыПечати, Выборка.ДоговорКонтрагента);
			
			// В объекты печати добавляется договор контрагента, а не документ ОказаниеУслуг.
			// Поэтому нужно сохранить соответствие имени области договора (конкретного акта)
			// и документа ОказаниеУслуг, чтобы потом получить из них ОказанияУслуг и определить
			// из них Исполнителя для факсимиле.
			ДанныеОбласти = ОбъектыПечати.НайтиПоЗначению(Выборка.ДоговорКонтрагента);
			ПараметрыВывода.ОбъектыПечатиДляФаксимилеБП.Добавить(Шапка.Ссылка, ДанныеОбласти.Представление);
			
			УправлениеПечатьюБП.ДоработатьФаксимильнуюПодписьИПечать(ТабличныйДокумент, ОбъектыПечати,
				Шапка.Организация, Выборка.ДоговорКонтрагента);
			
			СтруктураИмениФайла = Новый Структура("Получатель, ОписаниеДокумента", Выборка.Получатель, ТекстЗаголовка);
			ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, СтруктураИмениФайла);
			ИменаФайлов.Вставить(Выборка.ДоговорКонтрагента, ИмяФайла);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьАктовОбОказанииУслуг()

Процедура УдалитьКартинкиФаксимилеБезОбластейПечати(ТабличныйДокумент)
	
	РисункиКУдалению = Новый Массив;
	
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		ЭтоПодписьИПечать = Ложь;
		Для Каждого ИмяОбластиСПодписьюИПечатью Из УправлениеПечатью.ПрефиксыИменОбластейСПодписьюИПечатью() Цикл
			Если СтрНайти(Рисунок.Имя, ИмяОбластиСПодписьюИПечатью) > 0 Тогда
				ЭтоПодписьИПечать = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЭтоПодписьИПечать Тогда
			Продолжить;
		КонецЕсли;
		Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка И СтрНайти(Рисунок.Имя, "_Документ_") = 0 Тогда
			РисункиКУдалению.Добавить(Рисунок.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяРисунка Из РисункиКУдалению Цикл
		ТабличныйДокумент.Рисунки.Удалить(ИмяРисунка);
	КонецЦикла;
	
КонецПроцедуры

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
//
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыАктаУслуги()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументОказаниеУслуг.Ссылка КАК Ссылка,
	|	ДокументОказаниеУслуг.Номер КАК Номер,
	|	ДокументОказаниеУслуг.Дата КАК Дата,
	|	ДокументОказаниеУслуг.Организация КАК Организация,
	|	ДокументОказаниеУслуг.Организация КАК Поставщик,
	|	ДокументОказаниеУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДокументОказаниеУслуг.Исполнитель КАК Исполнитель,
	|	ДокументОказаниеУслуг.ИсполнительНаОсновании КАК ИсполнительНаОсновании,
	|	ДокументОказаниеУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДокументОказаниеУслуг.СтавкаНДС КАК СтавкаНДС,
	|	ДокументОказаниеУслуг.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ДокументОказаниеУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(ДокументОказаниеУслуг.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ ДокументОказаниеУслуг.Номенклатура.Наименование
	|	КОНЕЦ КАК Товар,
	|	ОказаниеУслуг.Количество КАК Количество,
	|	ДокументОказаниеУслуг.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОказаниеУслуг.НомерСтроки КАК НомерСтроки,
	|	ОказаниеУслуг.Контрагент КАК Получатель,
	|	ОказаниеУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПРЕДСТАВЛЕНИЕ(ОказаниеУслуг.ДоговорКонтрагента) КАК ПредставлениеДоговора,
	|	ОказаниеУслуг.Цена КАК Цена,
	|	ОказаниеУслуг.Сумма КАК Сумма,
	|	ОказаниеУслуг.СуммаНДС КАК СуммаНДС,
	|	ДокументОказаниеУслуг.Номенклатура.ПериодичностьУслуги КАК ПериодичностьУслуги
	|ИЗ
	|	Документ.ОказаниеУслуг КАК ДокументОказаниеУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслуг
	|		ПО ДокументОказаниеУслуг.Ссылка = ОказаниеУслуг.Ссылка
	|ГДЕ
	|	ДокументОказаниеУслуг.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОказаниеУслуг.Дата,
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьМассивСчетовФактурОбъктов(МассивОбъектов)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОказаниеУслугКонтрагенты.СчетФактура
	|ИЗ
	|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслугКонтрагенты
	|ГДЕ
	|	ОказаниеУслугКонтрагенты.Ссылка В (&МассивОбъектов)
	|	И ОказаниеУслугКонтрагенты.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)";
	Запрос.Текст = ТекстЗапроса;
	Возврат(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура"));
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Номенклатура");
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента()
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СчетДоходов КАК СчетДоходов,
	|	Реквизиты.Субконто КАК Субконто,
	|	Реквизиты.СчетРасходов КАК СчетРасходов,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.Номенклатура КАК Номенклатура,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.СтавкаНДС КАК СтавкаНДС,
	|	Реквизиты.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	Реквизиты.Номенклатура.КодРаздел7ДекларацииНДС КАК КодОперацииПоСделке,
	|	ЛОЖЬ КАК НДСИсчисляетсяНалоговымАгентом,
	|	ЕСТЬNULL(КодыОперацийРаздела7ДекларацииПоНДС.ОперацияНеПодлежитНалогообложению, ЛОЖЬ) КАК КодОперацииНоменклатурыСоответствуетСт149НКРФ
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОказаниеУслуг КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КодыОперацийРаздела7ДекларацииПоНДС КАК КодыОперацийРаздела7ДекларацииПоНДС
	|		ПО Реквизиты.Номенклатура.КодРаздел7ДекларацииНДС = КодыОперацийРаздела7ДекларацииПоНДС.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.СчетДоходов КАК СчетДоходов,
	|	Реквизиты.Субконто КАК Субконто,
	|	Реквизиты.СчетРасходов КАК СчетРасходов,
	|	Реквизиты.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.Номенклатура КАК Номенклатура,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.СтавкаНДС КАК СтавкаНДС,
	|	Реквизиты.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецЕсли