
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Если ОтборОрганизация <> ОсновнаяОрганизация Тогда
		ОтборОрганизация = ОсновнаяОрганизация;
		ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	КонецЕсли;
	
	ОсновнойБанковскийСчет = Неопределено;
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ОсновнойБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборОрганизация, "ОсновнойБанковскийСчет");
		ИспользоватьНесколькоБанковскихСчетовОрганизации 
			= Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(ОтборОрганизация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	Если ОтборБанковскийСчет <> ОсновнойБанковскийСчет Тогда
		ОтборБанковскийСчет = ОсновнойБанковскийСчет;
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	КонецЕсли;
	
	ИзменитьПараметрыВыбораБанковскогоСчета();
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = ОтборБанковскийСчетИспользование 
		И НЕ ЕстьДополнительныеРеквизитыБанковскийСчет(ОтборБанковскийСчет);
		
	Элементы.ФормаГруппаЗагрузитьРеестрИзФайла.Видимость = ПравоДоступа("Использование", Метаданные.Обработки.ЗагрузкаРеестраПлатежей);
	
	Элементы.ГруппаОтборБанковскийСчет.Видимость = НЕ ОтборБанковскийСчетИспользование 
		ИЛИ ИспользоватьНесколькоБанковскихСчетовОрганизации;
	
	РасширениеРаботыСФайламиПодключено = Истина;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Документ.ПлатежиПоРеестрам",
		"ФормаСписка",
		НСтр("ru = 'Новости: Платежи по реестрам'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	// РекламныйСервис
	РекламныйСервис.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ОтборОрганизация <> ОсновнаяОрганизация Тогда
		ОтборОрганизация = ОсновнаяОрганизация;
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ИначеЕсли Не ОтборОрганизацияИспользование Тогда
		ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	КонецЕсли;
	
	ОсновнойБанковскийСчет = Неопределено;
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ОсновнойБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборОрганизация, "ОсновнойБанковскийСчет");
		ИспользоватьНесколькоБанковскихСчетовОрганизации
			= Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(ОтборОрганизация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	Если ОтборБанковскийСчет <> ОсновнойБанковскийСчет Тогда
		ОтборБанковскийСчет = ОсновнойБанковскийСчет;
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	КонецЕсли;
	
	Элементы.ГруппаОтборБанковскийСчет.Видимость = НЕ ОтборБанковскийСчетИспользование 
		ИЛИ ИспользоватьНесколькоБанковскихСчетовОрганизации;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОсновнаяОрганизация = Параметр;
		Если ОсновнаяОрганизация <> ОтборОрганизация Тогда
			ОтборОрганизация = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" Тогда
		Если Параметр.Ссылка = ОтборБанковскийСчет  Тогда
			Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = ОтборБанковскийСчетИспользование 
				И НЕ ЕстьДополнительныеРеквизитыБанковскийСчет(ОтборБанковскийСчет);
		ИначеЕсли НЕ Элементы.ГруппаОтборБанковскийСчет.Видимость Тогда
			Элементы.ГруппаОтборБанковскийСчет.Видимость = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияБПКлиент.ПроверитьНаличиеОрганизаций() Тогда
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайлами", 0.1, Истина);
	КонецЕсли;
	
	// РекламныйСервис
	РекламныйСервисКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец РекламныйСервис
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастройтеРеквизиты" Тогда
		ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаЭлемента", 
			Новый Структура("Ключ, ГруппаДопреквизитыQRКода", ОтборБанковскийСчет), ЭтотОбъект);
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДополнительныеРеквизитыБанковскийСчет(Знач БанковскийСчет)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеквизитыКодаДляОплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РеквизитыКодаДляОплаты КАК РеквизитыКодаДляОплаты
	|ГДЕ
	|	НЕ РеквизитыКодаДляОплаты.ПометкаУдаления
	|	И РеквизитыКодаДляОплаты.Владелец = &БанковскийСчет";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции 

&НаКлиенте
Процедура ОтборБанковскийСчетИспользованиеПриИзменении(Элемент)
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = ОтборБанковскийСчетИспользование 
		И НЕ ЕстьДополнительныеРеквизитыБанковскийСчет(ОтборБанковскийСчет);
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанковскийСчетПриИзменении(Элемент)
	ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = ОтборБанковскийСчетИспользование 
		И НЕ ЕстьДополнительныеРеквизитыБанковскийСчет(ОтборБанковскийСчет);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	Если ОтборОрганизацияИспользование Тогда
		Если НЕ ОтборБанковскийСчетИспользование И ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
			ОтборБанковскийСчетИспользование = Истина;
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
		КонецЕсли;
	ИначеЕсли ОтборБанковскийСчетИспользование Тогда
		ОтборБанковскийСчетИспользование = Ложь;
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОтборОрганизацияПриИзмененииНаСервере();
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = ОтборБанковскийСчетИспользование 
		И НЕ ЕстьДополнительныеРеквизитыБанковскийСчет(ОтборБанковскийСчет);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	ОбщегоНазначенияБП.ВосстановитьОтборСписка(Список, Настройки, "Организация");
	
	ОтборыСписков.СброситьИспользованиеПользовательскихОтборовВНастройке(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Если ПрисоединенныеФайлыБПКлиент.ПараметрыПеретаскиванияСодержатФайлы(ПараметрыПеретаскивания) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка",                  Строка);
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеретаскиваниеФайловОтветПолучен",
				ПрисоединенныеФайлыБПКлиент,
				ДополнительныеПараметры);
			ШаблонВопроса = НСтр("ru = 'Присоединить файлы к документу %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Строка);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Оповестить("ОбновитьРасчетВзносов",, ЭтотОбъект);// формы, отображающие расчет взносов, инициируют обновление отображаемых данных
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Возврат;
	КонецЕсли; 
	
	Отказ = Истина;
	СоздатьДокументЗаписьРеестраНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ЗагрузитьРеестрИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗагрузкуРеестра(Команда)
	
	ЗагрузитьРеестрИзФайла(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЗаписьРеестра(Команда)
	СоздатьДокументЗаписьРеестраНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаЗаполнения

&НаКлиенте
Процедура ЗагрузитьРеестрИзФайла(РежимНастройки = Ложь)
	
	Организация = ПолучитьОрганизацию();
	Если Не ЗначениеЗаполнено(Организация) Тогда
		СообщитьОНеобходимостиУстановитьОтборПоОрганизации();
		Возврат;
	КонецЕсли;
	
	БанковскийСчет = ПолучитьБанковскийСчет();
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		СообщитьОНеобходимостиУстановитьОтборБанковскийСчет();
		Возврат;
	КонецЕсли;
	
	БанкИКассаФормыКлиент.ЗагрузитьРеестрИзФайла(ЭтотОбъект, Организация, БанковскийСчет, РежимНастройки);
	
КонецПроцедуры

#Область ОбработкаЗагрузкиФайла
	
&НаСервереБезКонтекста
Функция ПолучитьДанныеРеестраНаСервере(Организация, БанковскийСчет, РежимНастройки, ПроверитьНастройку, АдресФайла, УникальныйИдентификатор)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация",        Организация);
	ПараметрыЗадания.Вставить("БанковскийСчет",     БанковскийСчет);
	ПараметрыЗадания.Вставить("ДвоичныеДанные",     ДвоичныеДанные);
	ПараметрыЗадания.Вставить("РежимНастройки",     РежимНастройки);
	ПараметрыЗадания.Вставить("ПроверитьНастройку", ПроверитьНастройку);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обработка таблицы данных при загрузке реестра платежей.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ЗагрузкаРеестраПлатежей.ПолучитьТаблицуДанныхДляЗагрузки",
		ПараметрыЗадания, ПараметрыВыполнения);
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьЗаписиРеестраНаСервере(ДанныеРеестра, УникальныйИдентификатор)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание документов по реестру'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДанныеРеестра", ДанныеРеестра);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ОплатаПлатежнойКартой.СоздатьЗаписиРеестра",
		СтруктураПараметров,
		НастройкиЗапуска);
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление(ВыделяемыеЗначения)
	
	Для каждого ЭлементУО Из УсловноеОформление.Элементы Цикл
		Если ЭлементУО.Представление = "ВыделениеЗагруженныхОбъектов" Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементУО);
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ВыделяемыеЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыделенияЗначений = Новый СписокЗначений();
	СписокВыделенияЗначений.ЗагрузитьЗначения(ВыделяемыеЗначения);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, СписокВыделенияЗначений);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Новый Шрифт(),,, Истина));
	ЭлементУО.Представление = "ВыделениеЗагруженныхОбъектов";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписиРеестраПоРеквизитамНаСервере(Отбор)
	Возврат Документы.ОплатаПлатежнойКартой.ЗаписиРеестраПоРеквизитам(Отбор);
КонецФункции

&НаКлиенте
Процедура ПроверитьСоздатьЗаписиРеестра(ДанныеЗаполнения)
	ЗначенияЗаполнения = ДанныеЗаполнения.ЗначенияЗаполнения;
	
	Если НЕ ЗначенияЗаполнения.Свойство("НомерВходящегоДокумента") 
		ИЛИ НЕ ЗначенияЗаполнения.Свойство("ДатаВходящегоДокумента") Тогда
	
		ВызватьИсключение НСтр("ru = 'Загружаемый файл не содержит реквизитов платежного документа'");
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация",               ЗначенияЗаполнения.Организация);
	Отбор.Вставить("БанковскийСчет",            ЗначенияЗаполнения.БанковскийСчет);
	Отбор.Вставить("НомерВходящегоДокумента",   ЗначенияЗаполнения.НомерВходящегоДокумента);
	Отбор.Вставить("ДатаВходящегоДокумента",    ЗначенияЗаполнения.ДатаВходящегоДокумента);
	
	СуществующиеДокументыПоРеестру = ЗаписиРеестраПоРеквизитамНаСервере(Отбор);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаписиРеестраЗавершение", ЭтотОбъект, ДанныеЗаполнения);
		
	Если СуществующиеДокументыПоРеестру.Количество () > 0 Тогда
	
		ТекстВопроса = НСтр("ru = 'В приложении уже существуют записи реестра к платежному документу %1 от %2. 
							 |
                             |Загрузить реестр повторно?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, ЗначенияЗаполнения.НомерВходящегоДокумента, 
			Формат(ЗначенияЗаполнения.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаписиРеестраЗавершение(Результат, ДанныеЗаполнения) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	ДлительнаяОперация = СоздатьЗаписиРеестраНаСервере(ДанныеЗаполнения, УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		Обработчик = Новый ОписаниеОповещения("ПроверитьСоздатьЗаписиРеестраЗавершение", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоздатьЗаписиРеестраЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	Если ДлительнаяОперация = Неопределено 
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСоздатьЗаписиРеестраНаСервере(ДлительнаяОперация.АдресРезультата)
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоздатьЗаписиРеестраНаСервере(АдресРезультата)
	СтруктураРезультата = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	СписокОшибок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		СтруктураРезультата, "СписокОшибок", Неопределено);
		
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
	
	ЗаписиРеестра = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		СтруктураРезультата, "ЗаписиРеестра", Неопределено);
		
	УстановитьУсловноеОформление(ЗаписиРеестра);
	
	Элементы.Список.Обновить();
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ЗагрузитьРеестрИзФайлаВыборФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Не ЭтоАдресВременногоХранилища(Результат.Хранение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не БанкИКассаФормыКлиент.РасширениеФайлаПоддерживается(Результат.Имя) Тогда
		ТекстСообщения = БанкИКассаФормыКлиент.ТекстПредупрежденияНеизвестныйФорматФайлаРеестра();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Организация    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Организация");
	БанковскийСчет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "БанковскийСчет");
	РежимНастройки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "РежимНастройки", Ложь);
	
	ДополнительныеПараметры.Вставить("АдресФайла", Результат.Хранение);
	ДополнительныеПараметры.Вставить("РасширениеФайла", "csv");

	
	ПроверитьНастройку = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры, "ПроверитьНастройку", Ложь);
		
	ДлительнаяОперация = ПолучитьДанныеРеестраНаСервере(Организация, БанковскийСчет, РежимНастройки, 
		ПроверитьНастройку, Результат.Хранение, УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		
		Обработчик = Новый ОписаниеОповещения("ПолучитьДанныеРеестраЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеРеестраЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено 
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		
		Возврат;
	КонецЕсли;
	
	ДанныеРеестра = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);

	Если Не ДанныеРеестра.ЭтоРеестр Тогда
		// это не реестр
		ОбработкаСитуацииНеизвестныйФормат(ДополнительныеПараметры.РежимНастройки);
	ИначеЕсли ДанныеРеестра.ЗначенияЗаполнения.Свойство("Оплаты") Тогда
		// это реестр и он соотвествует сохраненной настройке
		ПроверитьСоздатьЗаписиРеестра(ДанныеРеестра);
	Иначе 
		// это реестр, но сохраненная настойка не подходит (изменен состав полей)
		// предложим настроить правила загрузки заново
		ПараметрыФормы = Новый Структура("Организация, БанковскийСчет, АдресФайла, РасширениеФайла, РежимНастройки");
		
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДополнительныеПараметры);
		
		Для Каждого КлючИЗначение Из ДанныеРеестра.НастройкаЗаполнения Цикл
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузкаРеестраЗавершение", ЭтотОбъект, Новый Структура);
		
		ОткрытьФорму(ДополнительныеПараметры.ИмяФормы, ПараметрыФормы,ЭтотОбъект,,,,ОповещениеОЗавершении);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузкаРеестраЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли; 

	ПроверитьСоздатьЗаписиРеестра(ПолучитьИзВременногоХранилища(Результат));
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСитуацииНеизвестныйФормат(РежимНастройки)
	
	ТекстПредупреждения = БанкИКассаФормыКлиент.ТекстПредупрежденияНеизвестныйФорматРеестра();
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОтборОрганизацияПриИзмененииНаСервере()
	
	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(ОтборБанковскийСчет, ОтборОрганизация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
	ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации 
			= Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(ОтборОрганизация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура НастройкиДинамическогоСписка(ИмяВФорме)
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект,, ИмяВФорме);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОрганизацию()
	Организация = ОсновнаяОрганизация;
	
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		Организация = ОтборОрганизация;
	КонецЕсли;
	
	Возврат Организация;
КонецФункции

&НаКлиенте
Функция ПолучитьБанковскийСчет()
	БанковскийСчет = ОсновнойБанковскийСчет;
	
	Если ОтборБанковскийСчетИспользование И ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		БанковскийСчет = ОтборБанковскийСчет;
	КонецЕсли; 

	Возврат БанковскийСчет;
КонецФункции
 
&НаКлиенте
Процедура СообщитьОНеобходимостиУстановитьОтборПоОрганизации()
	
	ТекстСообщения = НСтр("ru = 'Для формирования реестра установите отбор по организации.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОтборОрганизация");
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНеобходимостиУстановитьОтборБанковскийСчет()
	
	ТекстСообщения = НСтр("ru = 'Для формирования реестра установите отбор по банковскому счету.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОтборБанковскийСчет");
	
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если УправлениеПечатьюБПКлиентСервер.ЭтоИмяКомандыРеестрДокументов(Команда.Имя) Тогда
		НастройкиДинамическогоСписка(Команда.Имя);
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширениеРаботыСФайламиЗавершение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	РасширениеРаботыСФайламиПодключено = ПодключеноРасширениеРаботыСФайлами;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайлами() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЗаписьРеестраНаКлиенте()

	ЗначенияЗаполнения = Новый Структура("ВидОперации", 
		ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаПлатежнойКартой.ПлатежПоРеестру"));
	
	ПараметрыОткрытияФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
	ОткрытьФорму("Документ.ОплатаПлатежнойКартой.Форма.ФормаДокумента", ПараметрыОткрытияФормы, ЭтотОбъект);

КонецПроцедуры

#Область РекламныйСервис

&НаКлиенте
Процедура Подключаемый_ЗаполнитьРекламныйНоситель()
	РекламныйСервисКлиент.ЗаполнитьРекламныйНоситель(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьКнопкуЗакрытьРекламу()
	РекламныйСервисКлиент.ПоказатьКнопкуЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_МакетРекламныйСервисПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	РекламныйСервисКлиент.МакетРекламныйСервисНажатие(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура Подключаемый_КомандаЗакрытьРекламу()
	РекламныйСервисКлиент.КомандаЗакрытьРекламу(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ИзменитьПараметрыВыбораБанковскогоСчета()
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЦифровойСчет", Ложь));
	
	Элементы.ОтборБанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

#КонецОбласти
